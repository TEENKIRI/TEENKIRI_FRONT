{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      reports: [],\n      headers: [{\n        text: '신고자',\n        value: 'reportEmail',\n        align: 'start'\n      }, {\n        text: '피신고자',\n        value: 'suspectEmail'\n      }, {\n        text: '사유',\n        value: 'reason'\n      }, {\n        text: '상세 내용',\n        value: 'details'\n      }, {\n        text: '신고 날짜',\n        value: 'createdTime'\n      }, {\n        text: '조치',\n        value: 'action',\n        sortable: false\n      }],\n      selectedType: '',\n      types: [{\n        text: '전체',\n        value: ''\n      }, {\n        text: 'QnA 신고',\n        value: 'qna'\n      }, {\n        text: '게시글 신고',\n        value: 'post'\n      }, {\n        text: '댓글 신고',\n        value: 'comment'\n      }],\n      page: 1,\n      totalPages: 1,\n      loading: false\n    };\n  },\n  methods: {\n    async fetchReports() {\n      this.loading = true;\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/report/list`, {\n          params: {\n            type: this.selectedType || '',\n            // type이 선택되지 않았을 경우 빈 문자열로 설정\n            page: this.page - 1 // page는 1부터 시작하는 UI에서 -1을 해서 0부터 서버로 요청\n          }\n        });\n        this.reports = response.data.result.content;\n        this.totalPages = response.data.result.totalPages;\n      } catch (error) {\n        console.error('신고 목록을 불러오는 중 오류가 발생했습니다:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Reason을 사용자 친화적인 텍스트로 변환하는 메서드\n    formatReason(reason) {\n      const reasonMap = {\n        SPAM: '스팸홍보/도배글',\n        PORNOGRAPHY: '음란물',\n        ILLEGAL_INFORMATION: '불법정보 포함',\n        HARMFUL_TO_MINORS: '청소년에게 유해한 내용',\n        ABUSIVE_LANGUAGE: '욕설/생명경시/혐오/차별적 표현',\n        PRIVACY_VIOLATION: '개인정보 노출',\n        OFFENSIVE_CONTENT: '불쾌한 표현'\n      };\n      return reasonMap[reason] || '알 수 없는 이유';\n    },\n    formatDate(date) {\n      if (!date) return '';\n      const options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(date).toLocaleDateString('ko-KR', options);\n    }\n  },\n  created() {\n    this.fetchReports();\n  }\n};","map":{"version":3,"names":["axios","data","reports","headers","text","value","align","sortable","selectedType","types","page","totalPages","loading","methods","fetchReports","response","get","process","env","VUE_APP_API_BASE_URL","params","type","result","content","error","console","formatReason","reason","reasonMap","SPAM","PORNOGRAPHY","ILLEGAL_INFORMATION","HARMFUL_TO_MINORS","ABUSIVE_LANGUAGE","PRIVACY_VIOLATION","OFFENSIVE_CONTENT","formatDate","date","options","year","month","day","hour","minute","Date","toLocaleDateString","created"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/report/ReportList.vue"],"sourcesContent":["<template>\n    <v-container class=\"mt-5\">\n      <v-card>\n        <v-card-title>\n          <h3>신고 목록</h3>\n          <v-spacer></v-spacer>\n          <v-select\n            v-model=\"selectedType\"\n            :items=\"types\"\n            label=\"신고 유형 필터\"\n            @change=\"fetchReports\"\n          ></v-select>\n        </v-card-title>\n  \n        <v-card-text>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"reports\"\n            :items-per-page=\"10\"\n            class=\"elevation-1\"\n            :loading=\"loading\"\n          >\n            <template v-slot:[`item.createdTime`]=\"{ item }\">\n              {{ formatDate(item.createdTime) }}\n            </template>\n            <template v-slot:[`item.reason`]=\"{ item }\">\n              {{ formatReason(item.reason) }}\n            </template>\n            <template v-slot:[`item.details`]=\"{ item }\">\n              {{ item.details }}\n            </template>\n            <template v-slot:[`item.action`]=\"{ item }\">\n              <v-btn @click=\"viewReportDetail(item)\" color=\"primary\">상세 보기</v-btn>\n            </template>\n          </v-data-table>\n  \n          <v-pagination\n            v-if=\"totalPages > 1\"\n            v-model=\"page\"\n            :length=\"totalPages\"\n            @input=\"fetchReports\"\n            class=\"mt-3\"\n          ></v-pagination>\n        </v-card-text>\n      </v-card>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        reports: [],\n        headers: [\n          { text: '신고자', value: 'reportEmail', align: 'start' },\n          { text: '피신고자', value: 'suspectEmail' },\n          { text: '사유', value: 'reason' },\n          { text: '상세 내용', value: 'details' },\n          { text: '신고 날짜', value: 'createdTime' },\n          { text: '조치', value: 'action', sortable: false }\n        ],\n        selectedType: '',\n        types: [\n          { text: '전체', value: '' },\n          { text: 'QnA 신고', value: 'qna' },\n          { text: '게시글 신고', value: 'post' },\n          { text: '댓글 신고', value: 'comment' }\n        ],\n        page: 1,\n        totalPages: 1,\n        loading: false,\n      };\n    },\n    methods: {\n      async fetchReports() {\n        this.loading = true;\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/report/list`, {\n            params: {\n              type: this.selectedType || '',  // type이 선택되지 않았을 경우 빈 문자열로 설정\n              page: this.page - 1             // page는 1부터 시작하는 UI에서 -1을 해서 0부터 서버로 요청\n            }\n          });\n          this.reports = response.data.result.content;\n          this.totalPages = response.data.result.totalPages;\n        } catch (error) {\n          console.error('신고 목록을 불러오는 중 오류가 발생했습니다:', error);\n        } finally {\n          this.loading = false;\n        }\n      },\n      \n      // Reason을 사용자 친화적인 텍스트로 변환하는 메서드\n      formatReason(reason) {\n        const reasonMap = {\n          SPAM: '스팸홍보/도배글',\n          PORNOGRAPHY: '음란물',\n          ILLEGAL_INFORMATION: '불법정보 포함',\n          HARMFUL_TO_MINORS: '청소년에게 유해한 내용',\n          ABUSIVE_LANGUAGE: '욕설/생명경시/혐오/차별적 표현',\n          PRIVACY_VIOLATION: '개인정보 노출',\n          OFFENSIVE_CONTENT: '불쾌한 표현'\n        };\n        return reasonMap[reason] || '알 수 없는 이유';\n      },\n      \n      formatDate(date) {\n        if (!date) return '';\n        const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };\n        return new Date(date).toLocaleDateString('ko-KR', options);\n      }\n    },\n    created() {\n      this.fetchReports();\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .v-container {\n    max-width: 1200px;\n    margin: 0 auto;\n  }\n  </style>\n"],"mappings":"AAiDE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,CACP;QAAEC,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE,aAAa;QAAEC,KAAK,EAAE;MAAQ,CAAC,EACrD;QAAEF,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAe,CAAC,EACvC;QAAED,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAS,CAAC,EAC/B;QAAED,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAU,CAAC,EACnC;QAAED,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAc,CAAC,EACvC;QAAED,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE,QAAQ;QAAEE,QAAQ,EAAE;MAAM,EAChD;MACDC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE,CACL;QAAEL,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAG,CAAC,EACzB;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAM,CAAC,EAChC;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAO,CAAC,EACjC;QAAED,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAU,EACnC;MACDK,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE,CAAC;MACbC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI,CAACF,OAAM,GAAI,IAAI;MACnB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMf,KAAK,CAACgB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,cAAc,EAAE;UAClFC,MAAM,EAAE;YACNC,IAAI,EAAE,IAAI,CAACb,YAAW,IAAK,EAAE;YAAG;YAChCE,IAAI,EAAE,IAAI,CAACA,IAAG,GAAI,EAAc;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACR,OAAM,GAAIa,QAAQ,CAACd,IAAI,CAACqB,MAAM,CAACC,OAAO;QAC3C,IAAI,CAACZ,UAAS,GAAII,QAAQ,CAACd,IAAI,CAACqB,MAAM,CAACX,UAAU;MACnD,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,UAAU;QACR,IAAI,CAACZ,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACAc,YAAYA,CAACC,MAAM,EAAE;MACnB,MAAMC,SAAQ,GAAI;QAChBC,IAAI,EAAE,UAAU;QAChBC,WAAW,EAAE,KAAK;QAClBC,mBAAmB,EAAE,SAAS;QAC9BC,iBAAiB,EAAE,cAAc;QACjCC,gBAAgB,EAAE,mBAAmB;QACrCC,iBAAiB,EAAE,SAAS;QAC5BC,iBAAiB,EAAE;MACrB,CAAC;MACD,OAAOP,SAAS,CAACD,MAAM,KAAK,WAAW;IACzC,CAAC;IAEDS,UAAUA,CAACC,IAAI,EAAE;MACf,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,MAAMC,OAAM,GAAI;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC;MACzG,OAAO,IAAIC,IAAI,CAACP,IAAI,CAAC,CAACQ,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC;IAC5D;EACF,CAAC;EACDQ,OAAOA,CAAA,EAAG;IACR,IAAI,CAAChC,YAAY,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}