{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"mt-5\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-center mt-5\"\n};\nconst _hoisted_3 = {\n  ref: \"videoPlayer\",\n  class: \"video-js vjs-theme-city vjs-16-9 vjs-big-play-centered\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_progress_linear = _resolveComponent(\"v-progress-linear\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString($data.lectureData.title), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createTextVNode(\"나의 진행률 : \"), _createElementVNode(\"span\", null, _toDisplayString($data.userProgress), 1 /* TEXT */), _createTextVNode(\"% \"), _createVNode(_component_v_progress_linear, {\n      modelValue: $data.userProgress,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userProgress = $event),\n      color: \"amber\",\n      height: \"25\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"strong\", null, _toDisplayString($data.userProgress) + \"%\", 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"video\", _hoisted_3, null, 512 /* NEED_PATCH */)])])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","ref","_createBlock","_component_v_container","default","_withCtx","_createElementVNode","_hoisted_1","_toDisplayString","$data","lectureData","title","_createTextVNode","userProgress","_createVNode","_component_v_progress_linear","modelValue","_cache","$event","color","height","_","_hoisted_2","_hoisted_3"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/lecture/LectureDetail.vue"],"sourcesContent":["<template>\n  <v-container>\n    <div class=\"mt-5\">\n      <h1>{{ lectureData.title }}</h1>\n      <div>나의 진행률 : \n        <span>{{ userProgress }}</span>% \n        <v-progress-linear\n          v-model=\"userProgress\"\n          color=\"amber\"\n          height=\"25\"\n        >\n          <template v-slot:default>\n            <strong>{{ userProgress }}%</strong>\n          </template>\n        </v-progress-linear>\n      </div>\n      <div class=\"d-flex justify-center mt-5\">\n        <video\n          ref=\"videoPlayer\"\n          class=\"video-js vjs-theme-city vjs-16-9 vjs-big-play-centered\"\n        ></video>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\n// import VideoPlayer from '@/components/Lecture/videoPlayer.vue';\nimport axios from \"axios\";\nimport videojs from \"video.js\";\n\nexport default {\n  // name: 'VideoExample',\n  name: \"VideoPlayer\",\n  // components: {\n  //   VideoPlayer\n  // },\n  data() {\n    return {\n      user: {\n        token: \"\",\n        id: \"\",\n        email: \"\",\n      },\n      lectureId: \"\",\n      lectureData: {},\n\n      // 영상 진행률 체크를 위한 코드\n      isVideoPlay: false,\n      currentVideoTime : 0,\n      mostWatchedTime : 0,\n      userProgress : 0, // 유저 진행률 표시용\n\n      json: {\n        createdTime: \"2024-08-16T16:28:53\",\n        enrollmentId: 4,\n        id: 1,\n        imageUrl:\n          \"https://hannahbucket21.s3.ap-northeast-2.amazonaws.com/1_t240612014338002.jpg\",\n        isCompleted: false,\n        progress: 0,\n        title: \"20분 강의 - 1번강좌\",\n        updatedTime: \"2024-08-16T16:28:55\",\n        userLectureDuration: 0,\n        videoDuration: 1294,\n        videoUrl: \"https://hannahbucket2\",\n      },\n\n      player: null,\n\n      videoOptions: {\n        autoplay: true,\n        controls: true,\n        sources: [\n          {\n            src: \"\",\n            type: \"video/mp4\",\n          },\n        ],\n      },\n\n    // 인터벌 ID를 저장할 변수\n      checkInterval: null, \n      updateUserProgressInterval : null\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      }\n\n      this.lectureId = this.$route.params.id;\n\n      // 강의 세부 정보를 가져옵니다.\n      await this.getLectureDetail();\n\n      // 강의 세부 정보에서 비디오 URL을 설정하고 VideoPlayer 컴포넌트를 렌더링합니다.\n      this.setLectureDetail();\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n  },\n  mounted() {\n    // player를 초기화합니다.\n    this.initPlayer();\n  },\n  watch: {\n    \"videoOptions.sources\": {\n      handler(newSources) {\n        const newSrc = newSources[0].src;\n        if (newSrc) {\n          if (this.player) {\n            this.player.src(newSrc);\n          } else {\n            this.initPlayer();\n          }\n        }\n      },\n      deep: true, // 깊은 변경 감지\n    },\n  },\n  methods: {\n    async getLectureDetail() {\n      try {\n        const response = await axios.get(\n          `${process.env.VUE_APP_API_BASE_URL}/user/lecture/detail/${this.lectureId}`\n        );\n        const additionalData = response.data.result;\n        this.lectureData = additionalData;\n\n\n        // 시간용 변수 적용\n        this.mostWatchedTime = this.lectureData.userLectureDuration;\n        if(this.lectureData.isCompleted ){ \n          this.currentVideoTime = 0; //이미 시청이 완료된 경우는처음부터 다시 시청\n        }else{\n          this.currentVideoTime = this.lectureData.userLectureDuration;\n        }\n        this.updateUserProgress(); // 유저 표시용도의 퍼센트 계산\n\n        // lectureData에서 videoUrl을 가져와 videoOptions를 업데이트합니다.\n        this.videoOptions.sources[0].src = this.lectureData.videoUrl;\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(\"수강신청이 되지 않았습니다.\");\n          history.go(-1);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n    setLectureDetail() {\n      // videoOptions가 업데이트된 후 loadVideo를 true로 설정하여 VideoPlayer를 렌더링합니다.\n      this.loadVideo = true;\n    },\n    initPlayer() {\n      if (this.videoOptions.sources[0].src) {\n        this.player = videojs(this.$refs.videoPlayer, this.videoOptions, () => {\n          // 영상 시작 시간을 설정하는 이벤트\n          this.player.on(\"loadstart\", () => {\n            this.setStartTime();\n          });\n\n          // 영상이 시작될 때\n          this.player.on(\"play\", () => {\n            this.onVideoPlay();\n          });\n\n          // 영상이 일시정지될 때\n          this.player.on(\"pause\", () => {\n            this.onVideoPause();\n          });\n\n          // 영상이 끝날 때\n          this.player.on(\"ended\", () => {\n            this.onVideoEnded();\n          });\n        });\n      }\n    },\n    setStartTime() {\n      // 영상의 시작 시간을 설정\n      this.player.currentTime(this.currentVideoTime);\n      console.log(\"영상의 시작 시간이 설정되었습니다.\");\n    },\n    onVideoPlay() {\n      console.log(\"영상이 시작되었습니다.\");\n      \n      if(!this.lectureData.isCompleted){ //시청 완료가 false인 경우만 check 시작\n        this.checkInterval = setInterval(() => { // 3초마다 플레이된 시간 체크 시작\n          this.checkPlayTime();\n        }, 3000);\n        \n        this.updateUserProgressInterval = setInterval(() => {\n          this.updateUserProgress();\n        }, 1000);\n      }\n      \n    },\n    onVideoPause() {\n      console.log(\"영상이 일시정지되었습니다.\");\n      // 3초마다 플레이된 시간 체크 중지\n      if (this.checkInterval) {\n        clearInterval(this.checkInterval);\n        this.checkInterval = null;\n      }\n\n      // 퍼센트 계산하던 것 체크 중지\n      if (this.updateUserProgressInterval) {\n        clearInterval(this.updateUserProgressInterval);\n        this.updateUserProgressInterval = null;\n      }\n    },\n    onVideoEnded() {\n      console.log(\"영상이 끝났습니다.\");\n      clearInterval(this.checkInterval); // 영상이 끝나면 인터벌을 정리합니다.\n      clearInterval(this.updateUserProgressInterval); // 영상이 끝나면 인터벌을 정리합니다.\n\n      if(!this.lectureData.isCompleted){ //기존에 시청완료가 되지 않았던 것만 보냄\n        this.postUserVideoEndedStatus(); // 비디오 끝 함수 호츨\n      }\n    },\n    checkPlayTime() {\n      this.currentVideoTime = Math.floor(this.player.currentTime()); // 소수점 내림으로 고정. (비디오 전체시간때문에!)\n      this.postUserDurationVideoTime();\n      console.log(\"현재 플레이된 시간: \", this.currentVideoTime, \"초\");\n    },\n    updateUserProgress() {\n      let progressTime = this.currentVideoTime;\n      if(this.currentVideoTime <= this.mostWatchedTime){\n        progressTime = this.mostWatchedTime;\n      }\n        const percentage = (progressTime / this.lectureData.videoDuration) * 100; //현재 시간을 기준으로 퍼센트 계산\n        let roundPercent = Math.round(percentage * 10) / 10; // 소수점 첫 번째 자리까지만 존재하도록 반올림\n        roundPercent = (roundPercent >=100 && !this.lectureData.isCompleted) ? 99 : (roundPercent >= 100) ? 100 : roundPercent; // isCompleted true 여야 100\n        this.userProgress = roundPercent;\n    },\n\n    async postUserDurationVideoTime(){\n      if(this.currentVideoTime >= this.mostWatchedTime){\n        try {\n          const userLectureDuration = {\n            userLectureDuration : this.currentVideoTime\n          }\n          const response = await axios.patch(\n            `${process.env.VUE_APP_API_BASE_URL}/enroll/update/duration/${this.lectureData.enrollmentId}`, \n            userLectureDuration\n          );\n        console.log('update response:', response);    // error 해결용 log 추가\n        } catch (e) {\n          if (e.response.data.status_code === 404) {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            history.go(-1);\n          } else {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            console.error(e);\n          }\n        }\n      }\n    },\n    async postUserVideoEndedStatus(){\n      if(this.currentVideoTime > this.lectureData.videoDuration){\n        this.currentVideoTime = this.lectureData.videoDuration; // 더 큰값이 들어가면 초기화\n      }\n      try {\n        const isCompleted = {\n          isCompleted : true\n        }\n        const response = await axios.patch(\n          `${process.env.VUE_APP_API_BASE_URL}/enroll/update/complete/${this.lectureData.enrollmentId}`, \n          isCompleted\n        );\n        console.log('update response:', response);  // error 해결용 log 추가\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          history.go(-1);\n        } else {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          console.error(e);\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n    }\n\n    if (this.updateUserProgressInterval) {\n      clearInterval(this.updateUserProgressInterval);\n    }\n  },\n};\n</script>"],"mappings":";;EAESA,KAAK,EAAC;AAAM;;EAcVA,KAAK,EAAC;AAA4B;;EAEnCC,GAAG,EAAC,aAAa;EACjBD,KAAK,EAAC;;;;;uBAlBdE,YAAA,CAsBcC,sBAAA;IAvBhBC,OAAA,EAAAC,QAAA,CAEI,MAoBM,CApBNC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJD,mBAAA,CAAgC,YAAAE,gBAAA,CAAzBC,KAAA,CAAAC,WAAW,CAACC,KAAK,kBACxBL,mBAAA,CAWM,cAfZM,gBAAA,CAIW,WACH,GAAAN,mBAAA,CAA+B,cAAAE,gBAAA,CAAtBC,KAAA,CAAAI,YAAY,kBAL7BD,gBAAA,CAKuC,IAC/B,GAAAE,YAAA,CAQoBC,4BAAA;MAd5BC,UAAA,EAOmBP,KAAA,CAAAI,YAAY;MAP/B,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOmBT,KAAA,CAAAI,YAAY,GAAAK,MAAA;MACrBC,KAAK,EAAC,OAAO;MACbC,MAAM,EAAC;;MAEUhB,OAAO,EAAAC,QAAA,CACtB,MAAoC,CAApCC,mBAAA,CAAoC,gBAAAE,gBAAA,CAAzBC,KAAA,CAAAI,YAAY,IAAG,GAAC,gB;MAZvCQ,CAAA;yCAgBMf,mBAAA,CAKM,OALNgB,UAKM,GAJJhB,mBAAA,CAGS,SAHTiB,UAGS,8B;IApBjBF,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}