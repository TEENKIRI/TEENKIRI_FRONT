{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, createBlock as _createBlock, withKeys as _withKeys } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_list, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n        return _openBlock(), _createBlock(_component_v_list_item, {\n          key: message.id,\n          class: _normalizeClass({\n            'my-message': $options.isMyMessage(message.senderId),\n            'other-message': !$options.isMyMessage(message.senderId)\n          })\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.senderNickname), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.content), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.createdTime), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)]),\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_v_text_field, {\n      modelValue: $data.newMessage,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n      label: \"메시지를 입력하세요...\",\n      onKeyup: _withKeys($options.sendMessage, [\"enter\"])\n    }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_container","default","_withCtx","_createVNode","_component_v_list","_createElementBlock","_Fragment","_renderList","$data","messages","message","_component_v_list_item","key","id","class","_normalizeClass","$options","isMyMessage","senderId","_component_v_list_item_content","_component_v_list_item_title","_createTextVNode","_toDisplayString","senderNickname","_","_component_v_list_item_subtitle","content","createdTime","_component_v_text_field","modelValue","newMessage","_cache","$event","label","onKeyup","_withKeys","sendMessage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-list>\n        <v-list-item\n          v-for=\"message in messages\"\n          :key=\"message.id\"\n          :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        >\n          <v-list-item-content>\n            <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n            <v-list-item-subtitle>{{ message.content }}</v-list-item-subtitle>\n            <v-list-item-subtitle>{{ message.createdTime }}</v-list-item-subtitle>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n  \n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import SockJS from 'sockjs-client';\n  import { Stomp } from '@stomp/stompjs';\n  \n  export default {\n    data() {\n      return {\n        messages: [],\n        newMessage: '',\n        stompClient: null,\n        userId: localStorage.getItem('userId'),\n      };\n    },\n    mounted() {\n      this.loadChatHistory();\n      this.connectWebSocket();\n    },\n    methods: {\n      async loadChatHistory() {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`);\n          this.messages = response.data;\n        } catch (error) {\n          console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n        }\n      },\n      connectWebSocket() {\n        const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n        this.stompClient = Stomp.over(socket);\n  \n        this.stompClient.connect({}, (frame) => {\n          console.log('Connected: ' + frame);\n          this.stompClient.subscribe('/topic/public', (tick) => {\n            const message = JSON.parse(tick.body);\n            this.messages.push(message);\n          });\n        });\n      },\n      sendMessage() {\n        if (!this.userId) {\n          console.error('User ID is not available in localStorage');\n          return;\n        }\n  \n        if (this.stompClient && this.stompClient.connected) {\n          const message = {\n            content: this.newMessage,\n            senderId: this.userId, \n          };\n          this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n          this.newMessage = '';\n        }\n      },\n      isMyMessage(senderId) {\n        return senderId == this.userId;\n      },\n    },\n    beforeUnmount() {\n      if (this.stompClient) {\n        this.stompClient.disconnect();\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .v-list-item {\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 10px;\n    max-width: 60%;\n  }\n  \n  .my-message {\n    background-color: #2196f3; \n    color: white;\n    margin-left: auto;\n    text-align: right;\n  }\n  \n  .other-message {\n    background-color: #f44336;\n    color: white;\n    margin-right: auto;\n    text-align: left;\n  }\n  </style>\n  "],"mappings":";;;;;;;;;uBACIA,YAAA,CAoBcC,sBAAA;IArBlBC,OAAA,EAAAC,QAAA,CAEM,MAYS,CAZTC,YAAA,CAYSC,iBAAA;MAdfH,OAAA,EAAAC,QAAA,CAIU,MAA2B,E,kBAD7BG,mBAAA,CAUcC,SAAA,QAbtBC,WAAA,CAI4BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;6BADhBX,YAAA,CAUcY,sBAAA;UARXC,GAAG,EAAEF,OAAO,CAACG,EAAE;UACfC,KAAK,EANhBC,eAAA;YAAA,cAMiCC,QAAA,CAAAC,WAAW,CAACP,OAAO,CAACQ,QAAQ;YAAA,kBAAqBF,QAAA,CAAAC,WAAW,CAACP,OAAO,CAACQ,QAAQ;UAAA;;UAN9GjB,OAAA,EAAAC,QAAA,CAQU,MAIsB,CAJtBC,YAAA,CAIsBgB,8BAAA;YAZhClB,OAAA,EAAAC,QAAA,CASY,MAAmE,CAAnEC,YAAA,CAAmEiB,4BAAA;cAT/EnB,OAAA,EAAAC,QAAA,CAS+B,MAA4B,CAT3DmB,gBAAA,CAAAC,gBAAA,CASkCZ,OAAO,CAACa,cAAc,iB;cATxDC,CAAA;0CAUYrB,YAAA,CAAkEsB,+BAAA;cAV9ExB,OAAA,EAAAC,QAAA,CAUkC,MAAqB,CAVvDmB,gBAAA,CAAAC,gBAAA,CAUqCZ,OAAO,CAACgB,OAAO,iB;cAVpDF,CAAA;0CAWYrB,YAAA,CAAsEsB,+BAAA;cAXlFxB,OAAA,EAAAC,QAAA,CAWkC,MAAyB,CAX3DmB,gBAAA,CAAAC,gBAAA,CAWqCZ,OAAO,CAACiB,WAAW,iB;cAXxDH,CAAA;;YAAAA,CAAA;;UAAAA,CAAA;;;MAAAA,CAAA;QAgBMrB,YAAA,CAIgByB,uBAAA;MApBtBC,UAAA,EAiBiBrB,KAAA,CAAAsB,UAAU;MAjB3B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBiBxB,KAAA,CAAAsB,UAAU,GAAAE,MAAA;MACnBC,KAAK,EAAC,eAAe;MACpBC,OAAK,EAnBdC,SAAA,CAmBsBnB,QAAA,CAAAoB,WAAW;;IAnBjCZ,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}