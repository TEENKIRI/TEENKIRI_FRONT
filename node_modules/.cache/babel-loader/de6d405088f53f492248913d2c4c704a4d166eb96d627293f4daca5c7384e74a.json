{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      questions: [],\n      totalQuestions: 0,\n      loading: false,\n      headers: [{\n        text: 'ID',\n        value: 'id'\n      }, {\n        text: '사용자 이름',\n        value: 'questionUserName'\n      }, {\n        text: '제목',\n        value: 'title'\n      }, {\n        text: '작성 시간',\n        value: 'createdTime'\n      }, {\n        text: '답변',\n        value: 'answerText'\n      }, {\n        text: '이미지',\n        value: 'qImageUrl'\n      }],\n      options: {\n        page: 1,\n        itemsPerPage: 10,\n        sortBy: ['createdTime'],\n        sortDesc: [true]\n      }\n    };\n  },\n  methods: {\n    async fetchQuestions() {\n      this.loading = true;\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/list`, {\n          params: {\n            page: this.options.page - 1,\n            // Spring Boot 페이지 인덱스는 0부터 시작\n            size: this.options.itemsPerPage,\n            sort: `${this.options.sortBy[0]},${this.options.sortDesc[0] ? 'desc' : 'asc'}`\n          }\n        });\n        this.questions = response.data.data.content;\n        this.totalQuestions = response.data.data.totalElements;\n      } catch (error) {\n        console.error('질문 목록을 불러오는 중 오류가 발생했습니다.', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(date).toLocaleDateString('ko-KR', options);\n    }\n  },\n  watch: {\n    options: {\n      handler() {\n        this.fetchQuestions();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n};","map":{"version":3,"names":["axios","data","questions","totalQuestions","loading","headers","text","value","options","page","itemsPerPage","sortBy","sortDesc","methods","fetchQuestions","response","get","process","env","VUE_APP_API_BASE_URL","params","size","sort","content","totalElements","error","console","formatDate","date","year","month","day","hour","minute","Date","toLocaleDateString","watch","handler","deep","mounted"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/QnaList.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"questions\"\n            :loading=\"loading\"\n            :server-items-length=\"totalQuestions\"\n            :options.sync=\"options\"\n            :items-per-page=\"options.itemsPerPage\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:top>\n              <v-toolbar flat>\n                <v-toolbar-title>질문 목록</v-toolbar-title>\n                <v-divider class=\"mx-4\" inset vertical></v-divider>\n                <v-spacer></v-spacer>\n                <v-btn @click=\"fetchQuestions\">새로고침</v-btn>\n              </v-toolbar>\n            </template>\n            <template v-slot:item.answerText=\"{ item }\">\n              <span v-if=\"item.answerText\">{{ item.answerText }}</span>\n              <span v-else>답변 없음</span>\n            </template>\n            <template v-slot:item.createdTime=\"{ item }\">\n              {{ formatDate(item.createdTime) }}\n            </template>\n          </v-data-table>\n        </v-col>\n      </v-row>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        questions: [],\n        totalQuestions: 0,\n        loading: false,\n        headers: [\n          { text: 'ID', value: 'id' },\n          { text: '사용자 이름', value: 'questionUserName' },\n          { text: '제목', value: 'title' },\n          { text: '작성 시간', value: 'createdTime' },\n          { text: '답변', value: 'answerText' },\n          { text: '이미지', value: 'qImageUrl' }\n        ],\n        options: {\n          page: 1,\n          itemsPerPage: 10,\n          sortBy: ['createdTime'],\n          sortDesc: [true]\n        }\n      };\n    },\n    methods: {\n      async fetchQuestions() {\n        this.loading = true;\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/list`, {\n            params: {\n              page: this.options.page - 1, // Spring Boot 페이지 인덱스는 0부터 시작\n              size: this.options.itemsPerPage,\n              sort: `${this.options.sortBy[0]},${this.options.sortDesc[0] ? 'desc' : 'asc'}`\n            }\n          });\n          this.questions = response.data.data.content;\n          this.totalQuestions = response.data.data.totalElements;\n        } catch (error) {\n          console.error('질문 목록을 불러오는 중 오류가 발생했습니다.', error);\n        } finally {\n          this.loading = false;\n        }\n      },\n      formatDate(date) {\n        const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };\n        return new Date(date).toLocaleDateString('ko-KR', options);\n      }\n    },\n    watch: {\n      options: {\n        handler() {\n          this.fetchQuestions();\n        },\n        deep: true\n      }\n    },\n    mounted() {\n      this.fetchQuestions();\n    }\n  };\n  </script>\n  \n  <style scoped>\n  /* 여기에 필요한 스타일을 추가하세요 */\n  </style>\n  "],"mappings":"AAmCE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,CACP;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,EAC3B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAmB,CAAC,EAC7C;QAAED,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAQ,CAAC,EAC9B;QAAED,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAc,CAAC,EACvC;QAAED,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAa,CAAC,EACnC;QAAED,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAY,EACnC;MACDC,OAAO,EAAE;QACPC,IAAI,EAAE,CAAC;QACPC,YAAY,EAAE,EAAE;QAChBC,MAAM,EAAE,CAAC,aAAa,CAAC;QACvBC,QAAQ,EAAE,CAAC,IAAI;MACjB;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAACV,OAAM,GAAI,IAAI;MACnB,IAAI;QACF,MAAMW,QAAO,GAAI,MAAMf,KAAK,CAACgB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,WAAW,EAAE;UAC/EC,MAAM,EAAE;YACNX,IAAI,EAAE,IAAI,CAACD,OAAO,CAACC,IAAG,GAAI,CAAC;YAAE;YAC7BY,IAAI,EAAE,IAAI,CAACb,OAAO,CAACE,YAAY;YAC/BY,IAAI,EAAE,GAAG,IAAI,CAACd,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,IAAI,MAAK,GAAI,KAAK;UAC9E;QACF,CAAC,CAAC;QACF,IAAI,CAACV,SAAQ,GAAIa,QAAQ,CAACd,IAAI,CAACA,IAAI,CAACsB,OAAO;QAC3C,IAAI,CAACpB,cAAa,GAAIY,QAAQ,CAACd,IAAI,CAACA,IAAI,CAACuB,aAAa;MACxD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,UAAU;QACR,IAAI,CAACrB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IACDuB,UAAUA,CAACC,IAAI,EAAE;MACf,MAAMpB,OAAM,GAAI;QAAEqB,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC;MACzG,OAAO,IAAIC,IAAI,CAACN,IAAI,CAAC,CAACO,kBAAkB,CAAC,OAAO,EAAE3B,OAAO,CAAC;IAC5D;EACF,CAAC;EACD4B,KAAK,EAAE;IACL5B,OAAO,EAAE;MACP6B,OAAOA,CAAA,EAAG;QACR,IAAI,CAACvB,cAAc,CAAC,CAAC;MACvB,CAAC;MACDwB,IAAI,EAAE;IACR;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACzB,cAAc,CAAC,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}