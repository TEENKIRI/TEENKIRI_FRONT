{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3b9be7f1\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"board-container\"\n};\nconst _hoisted_2 = {\n  class: \"board-title\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"board-table\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"번호\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"제목\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"작성자\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"작성일\")])], -1 /* HOISTED */));\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"pagination\"\n};\nconst _hoisted_8 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.boardTitle), 1 /* TEXT */), $data.isAdmin || $data.category === 'post' ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_3, [_createElementVNode(\"button\", {\n    class: \"create-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.createNewPost && $options.createNewPost(...args))\n  }, \"게시글 작성\")])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"table\", _hoisted_4, [_hoisted_5, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boardItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(index + 1 + ($data.currentPage - 1) * $data.itemsPerPage), 1 /* TEXT */), _createElementVNode(\"td\", {\n      onClick: $event => $options.goToDetail(item.id, $data.category),\n      class: \"clickable\"\n    }, _toDisplayString(item.title), 9 /* TEXT, PROPS */, _hoisted_6), _createElementVNode(\"td\", null, _toDisplayString(item.nickname), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(item.createdTime)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPreviousPage && $options.goToPreviousPage(...args))\n  }, \"Previous\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalPages, page => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: page,\n      onClick: $event => $options.goToPage(page),\n      class: _normalizeClass({\n        active: $data.currentPage === page\n      })\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.goToNextPage && $options.goToNextPage(...args))\n  }, \"Next\")])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","boardTitle","isAdmin","category","_hoisted_3","onClick","_cache","args","$options","createNewPost","_createCommentVNode","_hoisted_4","_hoisted_5","_Fragment","_renderList","boardItems","item","index","id","currentPage","itemsPerPage","$event","goToDetail","title","_hoisted_6","nickname","formatDate","createdTime","_hoisted_7","goToPreviousPage","totalPages","page","goToPage","_normalizeClass","active","_hoisted_8","goToNextPage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1 class=\"board-title\">{{ boardTitle }}</h1>\n    <h2 v-if=\"isAdmin || category === 'post'\">\n      <button class=\"create-button\" @click=\"createNewPost\">게시글 작성</button>\n    </h2>\n    <table class=\"board-table\">\n      <thead>\n        <tr>\n          <th>번호</th>\n          <th>제목</th>\n          <th>작성자</th>\n          <th>작성일</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n          <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n          <td @click=\"goToDetail(item.id, category)\" class=\"clickable\">{{ item.title }}</td>\n          <td>{{ item.nickname }}</td>\n          <td>{{ formatDate(item.createdTime) }}</td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"pagination\">\n      <button @click=\"goToPreviousPage\">Previous</button>\n      <span v-for=\"page in totalPages\" :key=\"page\" @click=\"goToPage(page)\" :class=\"{ active: currentPage === page }\">{{ page }}</span>\n      <button @click=\"goToNextPage\">Next</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      userId: null, // 현재 로그인된 사용자의 ID\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems', // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkAdminRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1, // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage, // 페이지당 항목 수\n          },\n        });\n        const data = response.data.result;\n        this.boardItems = data.content;\n        this.totalPages = data.totalPages;\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id, category) {\n      this.$router.push({ name: 'BoardDetail', params: { category, id } });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.board-table th,\n.board-table td {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: left;\n}\n\n.board-table th {\n  background-color: #f4f4f4;\n}\n\n.board-table td.clickable {\n  cursor: pointer;\n  color: blue;\n  text-decoration: underline;\n}\n\n.pagination {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.pagination button {\n  margin: 0 5px;\n}\n\n.pagination span {\n  margin: 0 5px;\n  cursor: pointer;\n}\n\n.pagination .active {\n  font-weight: bold;\n  color: blue;\n}\n\n.create-button {\n  display: block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.create-button:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;;EACtBA,KAAK,EAAC;AAAa;;EAF3BC,GAAA;AAAA;;EAMWD,KAAK,EAAC;AAAa;gEACxBE,mBAAA,CAOQ,gB,aANNA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAY,YAAR,KAAG,G,aACPA,mBAAA,CAAY,YAAR,KAAG,E;mBAZjB;;EAwBSF,KAAK,EAAC;AAAY;mBAxB3B;;uBACEG,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJF,mBAAA,CAA6C,MAA7CG,UAA6C,EAAAC,gBAAA,CAAlBC,KAAA,CAAAC,UAAU,kBAC3BD,KAAA,CAAAE,OAAO,IAAIF,KAAA,CAAAG,QAAQ,e,cAA7BP,mBAAA,CAEK,MALTQ,UAAA,GAIMT,mBAAA,CAAoE;IAA5DF,KAAK,EAAC,eAAe;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,QAAM,E,KAJjEG,mBAAA,gBAMIf,mBAAA,CAiBQ,SAjBRgB,UAiBQ,GAhBNC,UAOQ,EACRjB,mBAAA,CAOQ,iB,kBANNC,mBAAA,CAKKiB,SAAA,QArBbC,WAAA,CAgBoCd,KAAA,CAAAe,UAAU,EAhB9C,CAgBoBC,IAAI,EAAEC,KAAK;yBAAvBrB,mBAAA,CAKK;MALoCF,GAAG,EAAEsB,IAAI,CAACE;QACjDvB,mBAAA,CAA2D,YAAAI,gBAAA,CAApDkB,KAAK,QAAQjB,KAAA,CAAAmB,WAAW,QAAQnB,KAAA,CAAAoB,YAAY,kBACnDzB,mBAAA,CAAkF;MAA7EU,OAAK,EAAAgB,MAAA,IAAEb,QAAA,CAAAc,UAAU,CAACN,IAAI,CAACE,EAAE,EAAElB,KAAA,CAAAG,QAAQ;MAAGV,KAAK,EAAC;wBAAeuB,IAAI,CAACO,KAAK,wBAlBpFC,UAAA,GAmBU7B,mBAAA,CAA4B,YAAAI,gBAAA,CAArBiB,IAAI,CAACS,QAAQ,kBACpB9B,mBAAA,CAA2C,YAAAI,gBAAA,CAApCS,QAAA,CAAAkB,UAAU,CAACV,IAAI,CAACW,WAAW,kB;sCAIxChC,mBAAA,CAIM,OAJNiC,UAIM,GAHJjC,mBAAA,CAAmD;IAA1CU,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAqB,gBAAA,IAAArB,QAAA,CAAAqB,gBAAA,IAAAtB,IAAA,CAAgB;KAAE,UAAQ,I,kBAC1CX,mBAAA,CAAgIiB,SAAA,QA1BtIC,WAAA,CA0B2Bd,KAAA,CAAA8B,UAAU,EAAlBC,IAAI;yBAAjBnC,mBAAA,CAAgI;MAA9FF,GAAG,EAAEqC,IAAI;MAAG1B,OAAK,EAAAgB,MAAA,IAAEb,QAAA,CAAAwB,QAAQ,CAACD,IAAI;MAAItC,KAAK,EA1BjFwC,eAAA;QAAAC,MAAA,EA0B6FlC,KAAA,CAAAmB,WAAW,KAAKY;MAAI;wBAAOA,IAAI,gCA1B5HI,UAAA;kCA2BMxC,mBAAA,CAA2C;IAAlCU,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAA4B,YAAA,IAAA5B,QAAA,CAAA4B,YAAA,IAAA7B,IAAA,CAAY;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}