{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId')\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`);\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["axios","SockJS","Stomp","data","messages","newMessage","stompClient","userId","localStorage","getItem","mounted","loadChatHistory","connectWebSocket","methods","response","get","process","env","VUE_APP_API_BASE_URL","error","console","socket","over","connect","frame","log","subscribe","tick","message","JSON","parse","body","push","sendMessage","connected","content","senderId","send","stringify","isMyMessage","beforeUnmount","disconnect"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-list>\n        <v-list-item\n          v-for=\"message in messages\"\n          :key=\"message.id\"\n          :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        >\n          <v-list-item-content>\n            <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n            <v-list-item-subtitle>{{ message.content }}</v-list-item-subtitle>\n            <v-list-item-subtitle>{{ message.createdTime }}</v-list-item-subtitle>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n  \n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import SockJS from 'sockjs-client';\n  import { Stomp } from '@stomp/stompjs';\n  \n  export default {\n    data() {\n      return {\n        messages: [],\n        newMessage: '',\n        stompClient: null,\n        userId: localStorage.getItem('userId'),\n      };\n    },\n    mounted() {\n      this.loadChatHistory();\n      this.connectWebSocket();\n    },\n    methods: {\n      async loadChatHistory() {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`);\n          this.messages = response.data;\n        } catch (error) {\n          console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n        }\n      },\n      connectWebSocket() {\n        const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n        this.stompClient = Stomp.over(socket);\n  \n        this.stompClient.connect({}, (frame) => {\n          console.log('Connected: ' + frame);\n          this.stompClient.subscribe('/topic/public', (tick) => {\n            const message = JSON.parse(tick.body);\n            this.messages.push(message);\n          });\n        });\n      },\n      sendMessage() {\n        if (!this.userId) {\n          console.error('User ID is not available in localStorage');\n          return;\n        }\n  \n        if (this.stompClient && this.stompClient.connected) {\n          const message = {\n            content: this.newMessage,\n            senderId: this.userId, \n          };\n          this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n          this.newMessage = '';\n        }\n      },\n      isMyMessage(senderId) {\n        return senderId == this.userId;\n      },\n    },\n    beforeUnmount() {\n      if (this.stompClient) {\n        this.stompClient.disconnect();\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .v-list-item {\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 10px;\n    max-width: 60%;\n  }\n  \n  .my-message {\n    background-color: #2196f3; \n    color: white;\n    margin-left: auto;\n    text-align: right;\n  }\n  \n  .other-message {\n    background-color: #f44336;\n    color: white;\n    margin-right: auto;\n    text-align: left;\n  }\n  </style>\n  "],"mappings":";AAyBE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,eAAe;AAClC,SAASC,KAAI,QAAS,gBAAgB;AAEtC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,IAAI;MACjBC,MAAM,EAAEC,YAAY,CAACC,OAAO,CAAC,QAAQ;IACvC,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,oBAAoB,CAAC;QACzF,IAAI,CAACd,QAAO,GAAIU,QAAQ,CAACX,IAAI;MAC/B,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDP,gBAAgBA,CAAA,EAAG;MACjB,MAAMS,MAAK,GAAI,IAAIpB,MAAM,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,oBAAoB,KAAK,CAAC;MACnE,IAAI,CAACZ,WAAU,GAAIJ,KAAK,CAACoB,IAAI,CAACD,MAAM,CAAC;MAErC,IAAI,CAACf,WAAW,CAACiB,OAAO,CAAC,CAAC,CAAC,EAAGC,KAAK,IAAK;QACtCJ,OAAO,CAACK,GAAG,CAAC,aAAY,GAAID,KAAK,CAAC;QAClC,IAAI,CAAClB,WAAW,CAACoB,SAAS,CAAC,eAAe,EAAGC,IAAI,IAAK;UACpD,MAAMC,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,IAAI,CAAC;UACrC,IAAI,CAAC3B,QAAQ,CAAC4B,IAAI,CAACJ,OAAO,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDK,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAAC1B,MAAM,EAAE;QAChBa,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAC;QACzD;MACF;MAEA,IAAI,IAAI,CAACb,WAAU,IAAK,IAAI,CAACA,WAAW,CAAC4B,SAAS,EAAE;QAClD,MAAMN,OAAM,GAAI;UACdO,OAAO,EAAE,IAAI,CAAC9B,UAAU;UACxB+B,QAAQ,EAAE,IAAI,CAAC7B;QACjB,CAAC;QACD,IAAI,CAACD,WAAW,CAAC+B,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAER,IAAI,CAACS,SAAS,CAACV,OAAO,CAAC,CAAC;QAC3E,IAAI,CAACvB,UAAS,GAAI,EAAE;MACtB;IACF,CAAC;IACDkC,WAAWA,CAACH,QAAQ,EAAE;MACpB,OAAOA,QAAO,IAAK,IAAI,CAAC7B,MAAM;IAChC;EACF,CAAC;EACDiC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAClC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACmC,UAAU,CAAC,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}