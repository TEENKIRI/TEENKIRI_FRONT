{"ast":null,"code":"// import VideoPlayer from '@/components/Lecture/videoPlayer.vue';\nimport axios from \"axios\";\nimport videojs from \"video.js\";\nexport default {\n  // name: 'VideoExample',\n  name: \"VideoPlayer\",\n  // components: {\n  //   VideoPlayer\n  // },\n  data() {\n    return {\n      user: {\n        token: \"\",\n        id: \"\",\n        email: \"\"\n      },\n      lectureId: \"\",\n      lectureData: {},\n      // 영상 진행률 체크를 위한 코드\n      isVideoPlay: false,\n      currentVideoTime: 0,\n      mostWatchedTime: 0,\n      userProgress: 0,\n      // 유저 진행률 표시용\n\n      json: {\n        createdTime: \"2024-08-16T16:28:53\",\n        enrollmentId: 4,\n        id: 1,\n        imageUrl: \"https://hannahbucket21.s3.ap-northeast-2.amazonaws.com/1_t240612014338002.jpg\",\n        isCompleted: false,\n        progress: 0,\n        title: \"20분 강의 - 1번강좌\",\n        updatedTime: \"2024-08-16T16:28:55\",\n        userLectureDuration: 0,\n        videoDuration: 1294,\n        videoUrl: \"https://hannahbucket2\"\n      },\n      player: null,\n      videoOptions: {\n        autoplay: true,\n        controls: true,\n        sources: [{\n          src: \"\",\n          type: \"video/mp4\"\n        }]\n      },\n      // 인터벌 ID를 저장할 변수\n      checkInterval: null,\n      updateUserProgressInterval: null\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      }\n      this.lectureId = this.$route.params.id;\n\n      // 강의 세부 정보를 가져옵니다.\n      await this.getLectureDetail();\n\n      // 강의 세부 정보에서 비디오 URL을 설정하고 VideoPlayer 컴포넌트를 렌더링합니다.\n      this.setLectureDetail();\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n  },\n  mounted() {\n    // player를 초기화합니다.\n    this.initPlayer();\n  },\n  watch: {\n    \"videoOptions.sources\": {\n      handler(newSources) {\n        const newSrc = newSources[0].src;\n        if (newSrc) {\n          if (this.player) {\n            this.player.src(newSrc);\n          } else {\n            this.initPlayer();\n          }\n        }\n      },\n      deep: true // 깊은 변경 감지\n    }\n  },\n  methods: {\n    async getLectureDetail() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/lecture/detail/${this.lectureId}`);\n        const additionalData = response.data.result;\n        this.lectureData = additionalData;\n\n        // 시간용 변수 적용\n        this.mostWatchedTime = this.lectureData.userLectureDuration;\n        if (this.lectureData.isCompleted) {\n          this.currentVideoTime = 0; //이미 시청이 완료된 경우는처음부터 다시 시청\n        } else {\n          this.currentVideoTime = this.lectureData.userLectureDuration;\n        }\n        this.updateUserProgress(); // 유저 표시용도의 퍼센트 계산\n\n        // lectureData에서 videoUrl을 가져와 videoOptions를 업데이트합니다.\n        this.videoOptions.sources[0].src = this.lectureData.videoUrl;\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(\"수강신청이 되지 않았습니다.\");\n          history.go(-1);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n    setLectureDetail() {\n      // videoOptions가 업데이트된 후 loadVideo를 true로 설정하여 VideoPlayer를 렌더링합니다.\n      this.loadVideo = true;\n    },\n    initPlayer() {\n      if (this.videoOptions.sources[0].src) {\n        this.player = videojs(this.$refs.videoPlayer, this.videoOptions, () => {\n          // 영상 시작 시간을 설정하는 이벤트\n          this.player.on(\"loadstart\", () => {\n            this.setStartTime();\n          });\n\n          // 영상이 시작될 때\n          this.player.on(\"play\", () => {\n            this.onVideoPlay();\n          });\n\n          // 영상이 일시정지될 때\n          this.player.on(\"pause\", () => {\n            this.onVideoPause();\n          });\n\n          // 영상이 끝날 때\n          this.player.on(\"ended\", () => {\n            this.onVideoEnded();\n          });\n        });\n      }\n    },\n    setStartTime() {\n      // 영상의 시작 시간을 설정\n      this.player.currentTime(this.currentVideoTime);\n      console.log(\"영상의 시작 시간이 설정되었습니다.\");\n    },\n    onVideoPlay() {\n      console.log(\"영상이 시작되었습니다.\");\n      if (!this.lectureData.isCompleted) {\n        //시청 완료가 false인 경우만 check 시작\n        this.checkInterval = setInterval(() => {\n          // 3초마다 플레이된 시간 체크 시작\n          this.checkPlayTime();\n        }, 3000);\n        this.updateUserProgressInterval = setInterval(() => {\n          this.updateUserProgress();\n        }, 1000);\n      }\n    },\n    onVideoPause() {\n      console.log(\"영상이 일시정지되었습니다.\");\n      // 3초마다 플레이된 시간 체크 중지\n      if (this.checkInterval) {\n        clearInterval(this.checkInterval);\n        this.checkInterval = null;\n      }\n\n      // 퍼센트 계산하던 것 체크 중지\n      if (this.updateUserProgressInterval) {\n        clearInterval(this.updateUserProgressInterval);\n        this.updateUserProgressInterval = null;\n      }\n    },\n    onVideoEnded() {\n      console.log(\"영상이 끝났습니다.\");\n      clearInterval(this.checkInterval); // 영상이 끝나면 인터벌을 정리합니다.\n      clearInterval(this.updateUserProgressInterval); // 영상이 끝나면 인터벌을 정리합니다.\n\n      if (!this.lectureData.isCompleted) {\n        //기존에 시청완료가 되지 않았던 것만 보냄\n        this.postUserVideoEndedStatus(); // 비디오 끝 함수 호츨\n      }\n    },\n    checkPlayTime() {\n      this.currentVideoTime = Math.floor(this.player.currentTime()); // 소수점 내림으로 고정. (비디오 전체시간때문에!)\n      this.postUserDurationVideoTime();\n      console.log(\"현재 플레이된 시간: \", this.currentVideoTime, \"초\");\n    },\n    updateUserProgress() {\n      let progressTime = this.currentVideoTime;\n      if (this.currentVideoTime <= this.mostWatchedTime) {\n        progressTime = this.mostWatchedTime;\n      }\n      const percentage = progressTime / this.lectureData.videoDuration * 100; //현재 시간을 기준으로 퍼센트 계산\n      let roundPercent = Math.round(percentage * 10) / 10; // 소수점 첫 번째 자리까지만 존재하도록 반올림\n      roundPercent = roundPercent >= 100 && !this.lectureData.isCompleted ? 99 : roundPercent >= 100 ? 100 : roundPercent; // isCompleted true 여야 100\n      this.userProgress = roundPercent;\n    },\n    async postUserDurationVideoTime() {\n      if (this.currentVideoTime >= this.mostWatchedTime) {\n        try {\n          const userLectureDuration = {\n            userLectureDuration: this.currentVideoTime\n          };\n          const response = await axios.patch(`${process.env.VUE_APP_API_BASE_URL}/enroll/update/duration/${this.lectureData.enrollmentId}`, userLectureDuration);\n          console.log('update response:', response); // error 해결용 log 추가\n        } catch (e) {\n          if (e.response.data.status_code === 404) {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            history.go(-1);\n          } else {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            console.error(e);\n          }\n        }\n      }\n    },\n    async postUserVideoEndedStatus() {\n      if (this.currentVideoTime > this.lectureData.videoDuration) {\n        this.currentVideoTime = this.lectureData.videoDuration; // 더 큰값이 들어가면 초기화\n      }\n      try {\n        const isCompleted = {\n          isCompleted: true\n        };\n        const response = await axios.patch(`${process.env.VUE_APP_API_BASE_URL}/enroll/update/complete/${this.lectureData.enrollmentId}`, isCompleted);\n        console.log('update response:', response); // error 해결용 log 추가\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          history.go(-1);\n        } else {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          console.error(e);\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n    }\n    if (this.updateUserProgressInterval) {\n      clearInterval(this.updateUserProgressInterval);\n    }\n  }\n};","map":{"version":3,"names":["axios","videojs","name","data","user","token","id","email","lectureId","lectureData","isVideoPlay","currentVideoTime","mostWatchedTime","userProgress","json","createdTime","enrollmentId","imageUrl","isCompleted","progress","title","updatedTime","userLectureDuration","videoDuration","videoUrl","player","videoOptions","autoplay","controls","sources","src","type","checkInterval","updateUserProgressInterval","created","$store","dispatch","getters","getUserObj","alert","location","href","$route","params","getLectureDetail","setLectureDetail","error","console","mounted","initPlayer","watch","handler","newSources","newSrc","deep","methods","response","get","process","env","VUE_APP_API_BASE_URL","additionalData","result","updateUserProgress","e","status_code","history","go","loadVideo","$refs","videoPlayer","on","setStartTime","onVideoPlay","onVideoPause","onVideoEnded","currentTime","log","setInterval","checkPlayTime","clearInterval","postUserVideoEndedStatus","Math","floor","postUserDurationVideoTime","progressTime","percentage","roundPercent","round","patch","status_message","beforeUnmount","dispose"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/lecture/LectureDetail.vue"],"sourcesContent":["<template>\n  <v-container>\n    <div class=\"mt-5\">\n      <h1>{{ lectureData.title }}</h1>\n      <div>나의 진행률 : \n        <span>{{ userProgress }}</span>% \n        <v-progress-linear\n          v-model=\"userProgress\"\n          color=\"amber\"\n          height=\"25\"\n        >\n          <template v-slot:default>\n            <strong>{{ userProgress }}%</strong>\n          </template>\n        </v-progress-linear>\n      </div>\n      <div class=\"d-flex justify-center mt-5\">\n        <video\n          ref=\"videoPlayer\"\n          class=\"video-js vjs-theme-city vjs-16-9 vjs-big-play-centered\"\n        ></video>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\n// import VideoPlayer from '@/components/Lecture/videoPlayer.vue';\nimport axios from \"axios\";\nimport videojs from \"video.js\";\n\nexport default {\n  // name: 'VideoExample',\n  name: \"VideoPlayer\",\n  // components: {\n  //   VideoPlayer\n  // },\n  data() {\n    return {\n      user: {\n        token: \"\",\n        id: \"\",\n        email: \"\",\n      },\n      lectureId: \"\",\n      lectureData: {},\n\n      // 영상 진행률 체크를 위한 코드\n      isVideoPlay: false,\n      currentVideoTime : 0,\n      mostWatchedTime : 0,\n      userProgress : 0, // 유저 진행률 표시용\n\n      json: {\n        createdTime: \"2024-08-16T16:28:53\",\n        enrollmentId: 4,\n        id: 1,\n        imageUrl:\n          \"https://hannahbucket21.s3.ap-northeast-2.amazonaws.com/1_t240612014338002.jpg\",\n        isCompleted: false,\n        progress: 0,\n        title: \"20분 강의 - 1번강좌\",\n        updatedTime: \"2024-08-16T16:28:55\",\n        userLectureDuration: 0,\n        videoDuration: 1294,\n        videoUrl: \"https://hannahbucket2\",\n      },\n\n      player: null,\n\n      videoOptions: {\n        autoplay: true,\n        controls: true,\n        sources: [\n          {\n            src: \"\",\n            type: \"video/mp4\",\n          },\n        ],\n      },\n\n    // 인터벌 ID를 저장할 변수\n      checkInterval: null, \n      updateUserProgressInterval : null\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      }\n\n      this.lectureId = this.$route.params.id;\n\n      // 강의 세부 정보를 가져옵니다.\n      await this.getLectureDetail();\n\n      // 강의 세부 정보에서 비디오 URL을 설정하고 VideoPlayer 컴포넌트를 렌더링합니다.\n      this.setLectureDetail();\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n  },\n  mounted() {\n    // player를 초기화합니다.\n    this.initPlayer();\n  },\n  watch: {\n    \"videoOptions.sources\": {\n      handler(newSources) {\n        const newSrc = newSources[0].src;\n        if (newSrc) {\n          if (this.player) {\n            this.player.src(newSrc);\n          } else {\n            this.initPlayer();\n          }\n        }\n      },\n      deep: true, // 깊은 변경 감지\n    },\n  },\n  methods: {\n    async getLectureDetail() {\n      try {\n        const response = await axios.get(\n          `${process.env.VUE_APP_API_BASE_URL}/user/lecture/detail/${this.lectureId}`\n        );\n        const additionalData = response.data.result;\n        this.lectureData = additionalData;\n\n\n        // 시간용 변수 적용\n        this.mostWatchedTime = this.lectureData.userLectureDuration;\n        if(this.lectureData.isCompleted ){ \n          this.currentVideoTime = 0; //이미 시청이 완료된 경우는처음부터 다시 시청\n        }else{\n          this.currentVideoTime = this.lectureData.userLectureDuration;\n        }\n        this.updateUserProgress(); // 유저 표시용도의 퍼센트 계산\n\n        // lectureData에서 videoUrl을 가져와 videoOptions를 업데이트합니다.\n        this.videoOptions.sources[0].src = this.lectureData.videoUrl;\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(\"수강신청이 되지 않았습니다.\");\n          history.go(-1);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n    setLectureDetail() {\n      // videoOptions가 업데이트된 후 loadVideo를 true로 설정하여 VideoPlayer를 렌더링합니다.\n      this.loadVideo = true;\n    },\n    initPlayer() {\n      if (this.videoOptions.sources[0].src) {\n        this.player = videojs(this.$refs.videoPlayer, this.videoOptions, () => {\n          // 영상 시작 시간을 설정하는 이벤트\n          this.player.on(\"loadstart\", () => {\n            this.setStartTime();\n          });\n\n          // 영상이 시작될 때\n          this.player.on(\"play\", () => {\n            this.onVideoPlay();\n          });\n\n          // 영상이 일시정지될 때\n          this.player.on(\"pause\", () => {\n            this.onVideoPause();\n          });\n\n          // 영상이 끝날 때\n          this.player.on(\"ended\", () => {\n            this.onVideoEnded();\n          });\n        });\n      }\n    },\n    setStartTime() {\n      // 영상의 시작 시간을 설정\n      this.player.currentTime(this.currentVideoTime);\n      console.log(\"영상의 시작 시간이 설정되었습니다.\");\n    },\n    onVideoPlay() {\n      console.log(\"영상이 시작되었습니다.\");\n      \n      if(!this.lectureData.isCompleted){ //시청 완료가 false인 경우만 check 시작\n        this.checkInterval = setInterval(() => { // 3초마다 플레이된 시간 체크 시작\n          this.checkPlayTime();\n        }, 3000);\n        \n        this.updateUserProgressInterval = setInterval(() => {\n          this.updateUserProgress();\n        }, 1000);\n      }\n      \n    },\n    onVideoPause() {\n      console.log(\"영상이 일시정지되었습니다.\");\n      // 3초마다 플레이된 시간 체크 중지\n      if (this.checkInterval) {\n        clearInterval(this.checkInterval);\n        this.checkInterval = null;\n      }\n\n      // 퍼센트 계산하던 것 체크 중지\n      if (this.updateUserProgressInterval) {\n        clearInterval(this.updateUserProgressInterval);\n        this.updateUserProgressInterval = null;\n      }\n    },\n    onVideoEnded() {\n      console.log(\"영상이 끝났습니다.\");\n      clearInterval(this.checkInterval); // 영상이 끝나면 인터벌을 정리합니다.\n      clearInterval(this.updateUserProgressInterval); // 영상이 끝나면 인터벌을 정리합니다.\n\n      if(!this.lectureData.isCompleted){ //기존에 시청완료가 되지 않았던 것만 보냄\n        this.postUserVideoEndedStatus(); // 비디오 끝 함수 호츨\n      }\n    },\n    checkPlayTime() {\n      this.currentVideoTime = Math.floor(this.player.currentTime()); // 소수점 내림으로 고정. (비디오 전체시간때문에!)\n      this.postUserDurationVideoTime();\n      console.log(\"현재 플레이된 시간: \", this.currentVideoTime, \"초\");\n    },\n    updateUserProgress() {\n      let progressTime = this.currentVideoTime;\n      if(this.currentVideoTime <= this.mostWatchedTime){\n        progressTime = this.mostWatchedTime;\n      }\n        const percentage = (progressTime / this.lectureData.videoDuration) * 100; //현재 시간을 기준으로 퍼센트 계산\n        let roundPercent = Math.round(percentage * 10) / 10; // 소수점 첫 번째 자리까지만 존재하도록 반올림\n        roundPercent = (roundPercent >=100 && !this.lectureData.isCompleted) ? 99 : (roundPercent >= 100) ? 100 : roundPercent; // isCompleted true 여야 100\n        this.userProgress = roundPercent;\n    },\n\n    async postUserDurationVideoTime(){\n      if(this.currentVideoTime >= this.mostWatchedTime){\n        try {\n          const userLectureDuration = {\n            userLectureDuration : this.currentVideoTime\n          }\n          const response = await axios.patch(\n            `${process.env.VUE_APP_API_BASE_URL}/enroll/update/duration/${this.lectureData.enrollmentId}`, \n            userLectureDuration\n          );\n        console.log('update response:', response);    // error 해결용 log 추가\n        } catch (e) {\n          if (e.response.data.status_code === 404) {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            history.go(-1);\n          } else {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            console.error(e);\n          }\n        }\n      }\n    },\n    async postUserVideoEndedStatus(){\n      if(this.currentVideoTime > this.lectureData.videoDuration){\n        this.currentVideoTime = this.lectureData.videoDuration; // 더 큰값이 들어가면 초기화\n      }\n      try {\n        const isCompleted = {\n          isCompleted : true\n        }\n        const response = await axios.patch(\n          `${process.env.VUE_APP_API_BASE_URL}/enroll/update/complete/${this.lectureData.enrollmentId}`, \n          isCompleted\n        );\n        console.log('update response:', response);  // error 해결용 log 추가\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          history.go(-1);\n        } else {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          console.error(e);\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n    }\n\n    if (this.updateUserProgressInterval) {\n      clearInterval(this.updateUserProgressInterval);\n    }\n  },\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}