{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      notifications: []\n    };\n  },\n  created() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/notification`);\n        this.notifications = response.data.result; // 서버에서 받은 데이터를 notifications 배열에 저장\n      } catch (error) {\n        console.error('알림 목록을 불러오는 중 오류가 발생했습니다:', error);\n        // 오류 처리 로직 추가 가능 (예: 사용자에게 오류 메시지 표시)\n      }\n    },\n    viewDetail(notification) {\n      if (notification.qnaId) {\n        this.$router.push(`/qna/detail/${notification.qnaId}`);\n      } else if (notification.postId) {\n        this.$router.push(`/post/detail/${notification.postId}`);\n      } else if (notification.reportId) {\n        this.$router.push(`/report/detail/${notification.reportId}`);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","notifications","created","fetchNotifications","methods","response","get","process","env","VUE_APP_API_BASE_URL","result","error","console","viewDetail","notification","qnaId","$router","push","postId","reportId"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/user/UserNotificaion.vue"],"sourcesContent":["<template>\n    <v-container class=\"mt-5\">\n      <h2 class=\"text-h5 font-weight-bold\">알림 목록</h2>\n  \n      <v-list dense>\n        <v-list-item v-for=\"notification in notifications\" :key=\"notification.id\">\n          <v-list-item-content>\n            <v-list-item-title>{{ notification.message }}</v-list-item-title>\n          </v-list-item-content>\n          <v-list-item-action>\n            <v-btn icon @click=\"viewDetail(notification)\">\n              <v-icon>mdi-chevron-right</v-icon>\n            </v-btn>\n          </v-list-item-action>\n        </v-list-item>\n      </v-list>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        notifications: [],\n      };\n    },\n    created() {\n      this.fetchNotifications();\n    },\n    methods: {\n      async fetchNotifications() {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/notification`);\n          this.notifications = response.data.result; // 서버에서 받은 데이터를 notifications 배열에 저장\n        } catch (error) {\n          console.error('알림 목록을 불러오는 중 오류가 발생했습니다:', error);\n          // 오류 처리 로직 추가 가능 (예: 사용자에게 오류 메시지 표시)\n        }\n      },\n      viewDetail(notification) {\n        if (notification.qnaId) {\n          this.$router.push(`/qna/detail/${notification.qnaId}`);\n        } else if (notification.postId) {\n          this.$router.push(`/post/detail/${notification.postId}`);\n        } else if (notification.reportId) {\n          this.$router.push(`/report/detail/${notification.reportId}`);\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .v-container {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .v-list-item {\n    border-bottom: 1px solid #eee;\n  }\n  </style>\n  "],"mappings":";AAoBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,oBAAoB,CAAC;QACzF,IAAI,CAACR,aAAY,GAAII,QAAQ,CAACL,IAAI,CAACU,MAAM,EAAE;MAC7C,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IACDE,UAAUA,CAACC,YAAY,EAAE;MACvB,IAAIA,YAAY,CAACC,KAAK,EAAE;QACtB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAeH,YAAY,CAACC,KAAK,EAAE,CAAC;MACxD,OAAO,IAAID,YAAY,CAACI,MAAM,EAAE;QAC9B,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,gBAAgBH,YAAY,CAACI,MAAM,EAAE,CAAC;MAC1D,OAAO,IAAIJ,YAAY,CAACK,QAAQ,EAAE;QAChC,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC,kBAAkBH,YAAY,CAACK,QAAQ,EAAE,CAAC;MAC9D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}