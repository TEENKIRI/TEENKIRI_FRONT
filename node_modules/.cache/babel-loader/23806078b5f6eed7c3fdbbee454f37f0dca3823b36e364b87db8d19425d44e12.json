{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3b9be7f1\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"board-container\"\n};\nconst _hoisted_2 = {\n  class: \"inner\"\n};\nconst _hoisted_3 = {\n  class: \"board-title\"\n};\nconst _hoisted_4 = {\n  class: \"tbl_list\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"caption\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"colgroup\", null, [/*#__PURE__*/_createElementVNode(\"col\", {\n  width: \"80\"\n}), /*#__PURE__*/_createElementVNode(\"col\", {\n  width: \"\"\n}), /*#__PURE__*/_createElementVNode(\"col\", {\n  width: \"140\"\n}), /*#__PURE__*/_createElementVNode(\"col\", {\n  width: \"140\"\n})], -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", {\n  scope: \"col\"\n}, \"번호\"), /*#__PURE__*/_createElementVNode(\"th\", {\n  scope: \"col\"\n}, \"제목\"), /*#__PURE__*/_createElementVNode(\"th\", {\n  scope: \"col\"\n}, \"작성자\"), /*#__PURE__*/_createElementVNode(\"th\", {\n  scope: \"col\"\n}, \"작성일\")])], -1 /* HOISTED */));\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"btnWrap\"\n};\nconst _hoisted_10 = {\n  class: \"pagingWrap\"\n};\nconst _hoisted_11 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", _hoisted_3, _toDisplayString($data.boardTitle), 1 /* TEXT */), _createElementVNode(\"table\", _hoisted_4, [_hoisted_5, _hoisted_6, _hoisted_7, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boardItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(index + 1 + ($data.currentPage - 1) * $data.itemsPerPage), 1 /* TEXT */), _createElementVNode(\"td\", {\n      onClick: $event => $options.goToDetail(item.id, $data.category),\n      class: \"text_left subject\"\n    }, _toDisplayString(item.title), 9 /* TEXT, PROPS */, _hoisted_8), _createElementVNode(\"td\", null, _toDisplayString(item.nickname), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(item.createdTime)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.createNewPost && $options.createNewPost(...args)),\n    class: \"btn_write\"\n  }, \"작성하기\")]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    href: \"javascript:void(0)\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.goToPage(1)),\n    class: \"btn_paging_start\"\n  })]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    href: \"javascript:void(0)\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.goToPreviousPage && $options.goToPreviousPage(...args)),\n    class: \"btn_paging_prev\"\n  })]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalPages, page => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: page\n    }, [_createElementVNode(\"a\", {\n      href: \"javascript:void(0)\",\n      onClick: $event => $options.goToPage(page),\n      class: _normalizeClass({\n        btn_paging: true,\n        active: $data.currentPage === page\n      })\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    href: \"javascript:void(0)\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.goToNextPage && $options.goToNextPage(...args)),\n    class: \"btn_paging_next\"\n  })]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    href: \"javascript:void(0)\",\n    onClick: _cache[4] || (_cache[4] = $event => $options.goToPage($data.totalPages)),\n    class: \"btn_paging_end\"\n  })])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","width","scope","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","$data","boardTitle","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_Fragment","_renderList","boardItems","item","index","key","id","currentPage","itemsPerPage","onClick","$event","$options","goToDetail","category","title","_hoisted_8","nickname","formatDate","createdTime","_hoisted_9","_cache","args","createNewPost","_hoisted_10","href","goToPage","goToPreviousPage","totalPages","page","_normalizeClass","btn_paging","active","_hoisted_11","goToNextPage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"inner\">\n      <h1 class=\"board-title\">{{ boardTitle }}</h1>\n      <table class=\"tbl_list\">\n        <caption></caption>\n        <colgroup>\n          <col width=\"80\" />\n          <col width=\"\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th scope=\"col\">번호</th>\n            <th scope=\"col\">제목</th>\n            <th scope=\"col\">작성자</th>\n            <th scope=\"col\">작성일</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n            <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n            <td @click=\"goToDetail(item.id, category)\" class=\"text_left subject\">{{ item.title }}</td>\n            <td>{{ item.nickname }}</td>\n            <td>{{ formatDate(item.createdTime) }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"btnWrap\">\n        <button @click=\"createNewPost\" class=\"btn_write\">작성하기</button>\n      </div>\n      <div class=\"pagingWrap\">\n        <ul>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(1)\" class=\"btn_paging_start\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPreviousPage\" class=\"btn_paging_prev\"></a></li>\n          <li v-for=\"page in totalPages\" :key=\"page\">\n            <a href=\"javascript:void(0)\" @click=\"goToPage(page)\" :class=\"{ btn_paging: true, active: currentPage === page }\">{{ page }}</a>\n          </li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToNextPage\" class=\"btn_paging_next\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(totalPages)\" class=\"btn_paging_end\"></a></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      userId: null, // 현재 로그인된 사용자의 ID\n      role: null, // 현재 로그인된 사용자의 역할\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems', // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkUserRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkUserRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n      this.role = role;\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1, // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage, // 페이지당 항목 수\n          },\n        });\n        const data = response.data.result || response.data; // result 안에 데이터가 없다면 데이터 자체 사용\n        this.boardItems = data.content || data; // content가 없다면 데이터 자체 사용\n        this.totalPages = data.totalPages || 1; // totalPages가 없다면 1로 기본값 설정\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id, category) {\n      this.$router.push({ name: 'BoardDetail', params: { category, id } });\n    },\n    canEditOrDelete(item) {\n      if (this.category === 'post') {\n        return this.isAdmin || item.userId === this.userId;\n      } else {\n        return this.isAdmin;\n      }\n    },\n    modifyPost(id) {\n      this.$router.push({ name: 'BoardUpdate', params: { id, category: this.category } });\n    },\n    async deletePost(id) {\n      if (confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n        let apiUrl = '';\n        if (this.category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n        } else if (this.category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n        } else if (this.category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n        } else {\n          console.error('잘못된 카테고리입니다.');\n          return;\n        }\n\n        try {\n          await axios.delete(apiUrl);\n          this.fetchBoardItems();\n          alert('게시글이 삭제되었습니다.');\n        } catch (error) {\n          console.error('게시글을 삭제하는 데 실패했습니다:', error);\n          alert('게시글 삭제에 실패했습니다.');\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n\n.inner {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.tbl_list {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_list th,\n.tbl_list td {\n  border: none; /* 모든 테두리 제거 */\n  padding: 10px;\n  text-align: left;\n}\n\n/* 테두리 스타일을 유지하려면 아래 코드 사용 */\n.tbl_list th {\n  background-color: #f4f4f4;\n}\n\n.tbl_list tr:not(:last-child) td {\n  border-bottom: 1px solid #ccc; /* 하단 선만 유지 */\n}\n\n.text_left {\n  text-align: left;\n}\n\n.subject {\n  cursor: pointer;\n  color: #333;\n  text-decoration: none;\n}\n\n.subject:hover {\n  text-decoration: underline;\n}\n\n.btn_edit,\n.btn_delete {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 4px;\n  transition: background-color 0.3s, color 0.3s;\n  border-radius: 8px;\n}\n\n.btn_edit {\n  background-color: #6cb1ff;\n  color: #fff;\n}\n\n.btn_edit:hover {\n  background-color: #007bff;\n  color: #fff;\n}\n\n.btn_delete {\n  background-color: #f57380;\n  color: #fff;\n  margin-left: 5px;\n}\n\n.btn_delete:hover {\n  background-color: #dc3545;\n  color: #fff;\n}\n\n.btnWrap {\n  text-align: right;\n  margin-top: 20px;\n}\n\n.btn_write {\n  padding: 10px 20px;\n  background-color: #f27885;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.btn_write:hover {\n  background-color: #fa5263;\n}\n\n.pagingWrap ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.pagingWrap li {\n  display: inline-block;\n}\n\n.pagingWrap li a {\n  margin: 0 5px;\n  text-decoration: none;\n  color: black;\n  cursor: pointer;\n}\n\n.pagingWrap li a.active {\n  font-weight: bold;\n  color: blue;\n}\n\n.pagingWrap .btn_paging_start:before {\n  content: \"<<\";\n}\n\n.pagingWrap .btn_paging_prev:before {\n  content: \"<\";\n}\n\n.pagingWrap .btn_paging_next:before {\n  content: \">\";\n}\n\n.pagingWrap .btn_paging_end:before {\n  content: \">>\";\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}