{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      previewImageSrc: null,\n      selectedCategory: null,\n      // 선택된 게시판\n      categories: [{\n        value: 'notice',\n        text: '공지사항'\n      }, {\n        value: 'event',\n        text: '이벤트'\n      }, {\n        value: 'post',\n        text: '자유게시판'\n      }] // 게시판 목록을 저장할 배열\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n  },\n  methods: {\n    checkUserRole() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n      const decodedToken = this.parseJwt(token);\n      const role = decodedToken.role;\n      if (role !== 'ADMIN') {\n        this.categories = this.categories.filter(cat => cat.value === 'post');\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.image = files[0];\n        this.previewImage();\n      } else {\n        this.image = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.image) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.image);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      const decodedToken = this.parseJwt(token);\n      if (decodedToken.role !== 'ADMIN' && this.selectedCategory !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.selectedCategory); // 선택한 게시판 카테고리 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n      try {\n        const apiUrl = this.getApiUrl();\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('저장 성공:', response.data);\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: this.selectedCategory\n          }\n        });\n      } catch (error) {\n        console.error('저장 실패:', error.response?.data || '서버와의 통신에 실패했습니다.');\n        alert('게시글 저장에 실패했습니다.');\n      }\n    },\n    getApiUrl() {\n      switch (this.selectedCategory) {\n        case 'event':\n          return `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n        case 'notice':\n          return `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n        case 'post':\n        default:\n          return `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n      }\n    },\n    cancel() {\n      this.$router.go(-1); // 이전 페이지로 이동\n    }\n  }\n};","map":{"version":3,"names":["axios","data","title","content","image","previewImageSrc","selectedCategory","categories","value","text","mounted","checkUserRole","methods","token","localStorage","getItem","alert","$router","push","decodedToken","parseJwt","role","filter","cat","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","onFileChange","event","files","target","dataTransfer","length","previewImage","reader","FileReader","onload","e","result","readAsDataURL","submitForm","formData","FormData","append","apiUrl","getApiUrl","response","post","headers","Authorization","console","log","name","params","category","process","env","VUE_APP_API_BASE_URL","cancel","go"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardCreate.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card>\n      <v-card-title>\n        <h3>글쓰기</h3>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" @submit.prevent=\"submitForm\">\n          <!-- 게시판 선택 -->\n          <-select\n            v-model=\"selectedCategory\"\n            :items=\"categories\"\n            item-text=\"text\"\n            item-value=\"value\"\n            label=\"게시판 선택\"\n            required\n          ></-select>\n\n          <!-- 제목 -->\n          <v-text-field\n            label=\"제목\"\n            v-model=\"title\"\n            required\n          />\n\n          <!-- 내용 -->\n          <v-textarea\n            label=\"내용\"\n            v-model=\"content\"\n            rows=\"10\"\n            required\n          />\n\n          <!-- 파일 첨부 -->\n          <v-file-input\n            @change=\"onFileChange\"\n            label=\"파일첨부\"\n            accept=\"image/*\"\n          />\n\n          <!-- 미리보기 이미지 -->\n          <v-img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" max-width=\"200\" class=\"my-3\"/>\n\n          <div class=\"btnWrap\">\n            <v-btn text @click=\"cancel\">취소</v-btn>\n            <v-btn color=\"primary\" type=\"submit\" class=\"ml-4\">저장</v-btn>\n          </div>\n        </v-form>\n      </v-card-text>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      previewImageSrc: null,\n      selectedCategory: null, // 선택된 게시판\n      categories: [\n        { value: 'notice', text: '공지사항' },\n        { value: 'event', text: '이벤트' },\n        { value: 'post', text: '자유게시판' },\n      ], // 게시판 목록을 저장할 배열\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n  },\n  methods: {\n    checkUserRole() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n\n      const decodedToken = this.parseJwt(token);\n      const role = decodedToken.role;\n\n      if (role !== 'ADMIN') {\n        this.categories = this.categories.filter(cat => cat.value === 'post');\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(\n          atob(base64)\n            .split('')\n            .map(function (c) {\n              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n        );\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.image = files[0];\n        this.previewImage();\n      } else {\n        this.image = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.image) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.image);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n\n      const decodedToken = this.parseJwt(token);\n      if (decodedToken.role !== 'ADMIN' && this.selectedCategory !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.selectedCategory); // 선택한 게시판 카테고리 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        const apiUrl = this.getApiUrl();\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        console.log('저장 성공:', response.data);\n        this.$router.push({ name: 'BoardList', params: { category: this.selectedCategory } });\n      } catch (error) {\n        console.error('저장 실패:', error.response?.data || '서버와의 통신에 실패했습니다.');\n        alert('게시글 저장에 실패했습니다.');\n      }\n    },\n    getApiUrl() {\n      switch (this.selectedCategory) {\n        case 'event':\n          return `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n        case 'notice':\n          return `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n        case 'post':\n        default:\n          return `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n      }\n    },\n    cancel() {\n      this.$router.go(-1); // 이전 페이지로 이동\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 800px;\n  margin: auto;\n}\n.btnWrap {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n}\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}