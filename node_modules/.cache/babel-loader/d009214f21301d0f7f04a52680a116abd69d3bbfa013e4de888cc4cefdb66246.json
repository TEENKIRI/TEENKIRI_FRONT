{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false,\n      notifications: []\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter(notification => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter(notification => notification.delYN === 'N');\n    }\n    // sortedNotifications 계산 속성은 삭제합니다.\n  },\n  methods: {\n    async fetchNotifications() {\n      if (this.isLogin) {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n\n          // 정렬된 알림을 가져오기 위해 정렬 작업을 메소드로 이동합니다.\n          this.notifications = response.data;\n        } catch (error) {\n          console.error('알림 목록을 가져오는 중 오류 발생:', error);\n        }\n      }\n    },\n    sortedNotifications() {\n      // 이 메소드에서 정렬을 수행하고 결과를 반환합니다.\n      return this.unreadNotifications.sort((a, b) => new Date(b.createdTime) - new Date(a.createdTime));\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          this.notifications[index].delYN = 'Y';\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId) {\n            window.location.href = `/report/list`;\n          } else {\n            console.log('error!!!!!!!!!!!');\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      // 섹션 이동 메소드 (생략)\n    },\n    goToMember() {\n      // 사용자 정보로 이동 메소드 (생략)\n    },\n    handleAccountClick() {\n      // 계정 클릭 핸들러 (생략)\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN';\n      this.fetchNotifications();\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      eventSource.addEventListener('notification', event => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n      eventSource.onerror = error => {\n        console.error('SSE 연결 오류:', error);\n      };\n    }\n  }\n};","map":{"version":3,"names":["EventSourcePolyfill","axios","name","data","logo","require","isLogin","isAdmin","notifications","computed","unreadNotificationsCount","filter","notification","delYN","length","unreadNotifications","methods","fetchNotifications","response","get","process","env","VUE_APP_API_BASE_URL","headers","Authorization","localStorage","getItem","error","console","sortedNotifications","sort","a","b","Date","createdTime","markAsReadAndNavigate","index","id","postId","window","location","href","qnaId","reportId","log","navigate","section","goToMember","handleAccountClick","mounted","token","eventSource","addEventListener","event","JSON","parse","push","onerror"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <!-- 헤더 코드 생략 -->\n        <v-col cols=\"3\" class=\"text-right\">\n          <!-- 알림 버튼 -->\n          <v-btn icon color=\"primary\">\n            <v-badge\n              color=\"red\"\n              :content=\"unreadNotificationsCount\"\n              overlap\n              v-if=\"unreadNotificationsCount > 0\"\n            >\n              <v-icon>mdi-bell</v-icon>\n            </v-badge>\n            <v-icon v-else>mdi-bell</v-icon>\n\n            <v-menu activator=\"parent\" offset-y>\n              <v-list max-width=\"300\" max-height=\"400\" style=\"overflow-y: auto;\">\n                <template v-if=\"unreadNotifications.length > 0\">\n                  <v-list-item\n                    v-for=\"(notification, index) in sortedNotifications\"\n                    :key=\"index\"\n                    :class=\"{'unread-notification': notification.delYN === 'N'}\"\n                    @click=\"markAsReadAndNavigate(notification, index)\"\n                  >\n                    <v-list-item-content>\n                      <v-list-item-title>{{ notification.message }}</v-list-item-title>\n                    </v-list-item-content>\n                  </v-list-item>\n                </template>\n                <template v-else>\n                  <v-list-item>\n                    <v-list-item-content>\n                      <v-list-item-title>알림이 없습니다</v-list-item-title>\n                    </v-list-item-content>\n                  </v-list-item>\n                </template>\n              </v-list>\n            </v-menu>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-app-bar>\n</template>\n\n<script>\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\n\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false,\n      notifications: [],\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter(notification => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter(notification => notification.delYN === 'N');\n    },\n    // sortedNotifications 계산 속성은 삭제합니다.\n  },\n  methods: {\n    async fetchNotifications() {\n      if (this.isLogin) {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n\n          // 정렬된 알림을 가져오기 위해 정렬 작업을 메소드로 이동합니다.\n          this.notifications = response.data;\n        } catch (error) {\n          console.error('알림 목록을 가져오는 중 오류 발생:', error);\n        }\n      }\n    },\n    sortedNotifications() {\n      // 이 메소드에서 정렬을 수행하고 결과를 반환합니다.\n      return this.unreadNotifications.sort((a, b) => new Date(b.createdTime) - new Date(a.createdTime));\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n          this.notifications[index].delYN = 'Y';\n\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId) {\n            window.location.href = `/report/list`;\n          } else {\n            console.log('error!!!!!!!!!!!');\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      // 섹션 이동 메소드 (생략)\n    },\n    goToMember() {\n      // 사용자 정보로 이동 메소드 (생략)\n    },\n    handleAccountClick() {\n      // 계정 클릭 핸들러 (생략)\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN';\n      this.fetchNotifications();\n\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      eventSource.addEventListener('notification', (event) => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n\n      eventSource.onerror = (error) => {\n        console.error('SSE 연결 오류:', error);\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%;\n}\n\n.unread-notification {\n  background-color: white;\n}\n\n.v-list-item {\n  background-color: white;\n}\n</style>\n"],"mappings":";AAiDA,SAASA,mBAAkB,QAAS,uBAAuB;AAC3D,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAEC,OAAO,CAAC,8BAA8B,CAAC;MAC7CC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,KAAK;MACdC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,wBAAwBA,CAAA,EAAG;MACzB,OAAO,IAAI,CAACF,aAAa,CAACG,MAAM,CAACC,YAAW,IAAKA,YAAY,CAACC,KAAI,KAAM,GAAG,CAAC,CAACC,MAAM;IACrF,CAAC;IACDC,mBAAmBA,CAAA,EAAG;MACpB,OAAO,IAAI,CAACP,aAAa,CAACG,MAAM,CAACC,YAAW,IAAKA,YAAY,CAACC,KAAI,KAAM,GAAG,CAAC;IAC9E;IACA;EACF,CAAC;EACDG,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAA,EAAG;MACzB,IAAI,IAAI,CAACX,OAAO,EAAE;QAChB,IAAI;UACF,MAAMY,QAAO,GAAI,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,yBAAyB,EAAE;YAC7FC,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;YACxD;UACF,CAAC,CAAC;;UAEF;UACA,IAAI,CAAClB,aAAY,GAAIU,QAAQ,CAACf,IAAI;QACpC,EAAE,OAAOwB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF;IACF,CAAC;IACDE,mBAAmBA,CAAA,EAAG;MACpB;MACA,OAAO,IAAI,CAACd,mBAAmB,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,WAAW,IAAI,IAAID,IAAI,CAACF,CAAC,CAACG,WAAW,CAAC,CAAC;IACnG,CAAC;IACD,MAAMC,qBAAqBA,CAACvB,YAAY,EAAEwB,KAAK,EAAE;MAC/C,IAAIxB,YAAY,CAACC,KAAI,KAAM,GAAG,EAAE;QAC9B,IAAI;UACF,MAAMwB,EAAC,GAAIzB,YAAY,CAACyB,EAAE;UAC1B,MAAMpC,KAAK,CAACkB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,6BAA6Be,EAAE,EAAE,EAAE,IAAI,EAAE;YAC1Fd,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;YACxD;UACF,CAAC,CAAC;UACF,IAAI,CAAClB,aAAa,CAAC4B,KAAK,CAAC,CAACvB,KAAI,GAAI,GAAG;UAErC,IAAID,YAAY,CAAC0B,MAAM,EAAE;YACvBC,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,sBAAsB7B,YAAY,CAAC0B,MAAM,EAAE;UACpE,OAAO,IAAI1B,YAAY,CAAC8B,KAAK,EAAE;YAC7BH,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,eAAe7B,YAAY,CAAC8B,KAAK,EAAE;UAC5D,OAAO,IAAI9B,YAAY,CAAC+B,QAAQ,EAAE;YAChCJ,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,cAAc;UACvC,OAAO;YACLb,OAAO,CAACgB,GAAG,CAAC,kBAAkB,CAAC;UACjC;QACF,EAAE,OAAOjB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD;MACF;IACF,CAAC;IACDkB,QAAQA,CAACC,OAAO,EAAE;MAChB;IAAA,CACD;IACDC,UAAUA,CAAA,EAAG;MACX;IAAA,CACD;IACDC,kBAAkBA,CAAA,EAAG;MACnB;IAAA;EAEJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,KAAI,GAAIzB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACpB,OAAM,GAAI,CAAC,CAAC4C,KAAK;IAEtB,IAAI,IAAI,CAAC5C,OAAO,EAAE;MAChB,IAAI,CAACC,OAAM,GAAIkB,YAAY,CAACC,OAAO,CAAC,MAAM,MAAM,OAAO;MACvD,IAAI,CAACT,kBAAkB,CAAC,CAAC;MAEzB,MAAMkC,WAAU,GAAI,IAAInD,mBAAmB,CAAC,GAAGoB,OAAO,CAACC,GAAG,CAACC,oBAAoB,YAAY,EAAE;QAC3FC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAU0B,KAAK;QAChC;MACF,CAAC,CAAC;MAEFC,WAAW,CAACC,gBAAgB,CAAC,cAAc,EAAGC,KAAK,IAAK;QACtD,MAAMzC,YAAW,GAAI0C,IAAI,CAACC,KAAK,CAACF,KAAK,CAAClD,IAAI,CAAC;QAC3C,IAAI,CAACK,aAAa,CAACgD,IAAI,CAAC5C,YAAY,CAAC;MACvC,CAAC,CAAC;MAEFuC,WAAW,CAACM,OAAM,GAAK9B,KAAK,IAAK;QAC/BC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACpC,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}