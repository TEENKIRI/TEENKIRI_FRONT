{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-485d4048\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"update-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"게시글 수정\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"title\"\n}, \"제목:\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"content\"\n}, \"내용:\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"image\"\n}, \"이미지:\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"저장\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.title = $event),\n    id: \"title\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.title]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.content = $event),\n    id: \"content\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.content]])]), _createElementVNode(\"div\", null, [_hoisted_5, _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.onFileChange && $options.onFileChange(...args))\n  }, null, 32 /* NEED_HYDRATION */)]), _hoisted_6], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","type","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_3","$event","$data","title","id","required","_hoisted_4","content","_hoisted_5","onChange","onFileChange","_hoisted_6"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardUpdate.vue"],"sourcesContent":["<template>\n  <div class=\"update-container\">\n    <h1>게시글 수정</h1>\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"title\">제목:</label>\n        <input type=\"text\" v-model=\"title\" id=\"title\" required>\n      </div>\n      <div>\n        <label for=\"content\">내용:</label>\n        <textarea v-model=\"content\" id=\"content\" required></textarea>\n      </div>\n      <div>\n        <label for=\"image\">이미지:</label>\n        <input type=\"file\" @change=\"onFileChange\">\n      </div>\n      <button type=\"submit\">저장</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      category: '', // 현재 게시판 종류\n    };\n  },\n  created() {\n    this.category = this.$route.params.category;\n    console.log('Category:', this.category); // 확인용 로그\n    this.fetchPostDetail(); // 컴포넌트 생성 시 기존 게시글 정보를 로드\n  },\n  methods: {\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        let apiUrl;\n\n        // 카테고리별로 API URL을 설정\n        if (this.category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (this.category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (this.category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        const post = response.data.result;\n        this.title = post.title;\n        this.content = post.content;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    onFileChange(e) {\n      this.image = e.target.files[0];\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n        formData.append('title', this.title);\n        formData.append('content', this.content);\n        if (this.image) {\n          formData.append('image', this.image);\n        }\n\n        const postId = this.$route.params.id;\n        let apiUrl;\n\n        // 카테고리별로 API URL을 설정\n        if (this.category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/update/${postId}`;\n        } else if (this.category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/update/${postId}`;\n        } else if (this.category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/update/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n\n        alert('게시글이 성공적으로 수정되었습니다.');\n        this.$router.push({ name: 'BoardDetail', params: { id: postId, category: this.category } }); // 수정 후 상세 페이지로 이동\n      } catch (error) {\n        console.error('게시글을 수정하는 데 실패했습니다:', error);\n        alert('게시글 수정에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.update-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\nh1 {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\nform > div {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\ninput[type=\"text\"],\ntextarea {\n  width: 100%;\n  padding: 8px;\n  box-sizing: border-box;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAkB;gEAC3BC,mBAAA,CAAe,YAAX,QAAM;gEAGNA,mBAAA,CAA8B;EAAvBC,GAAG,EAAC;AAAO,GAAC,KAAG;gEAItBD,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAS,GAAC,KAAG;gEAIxBD,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAO,GAAC,MAAI;gEAGzBD,mBAAA,CAAiC;EAAzBE,IAAI,EAAC;AAAQ,GAAC,IAAE;;uBAf5BC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,UAAe,EACfL,mBAAA,CAcO;IAdAM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BT,mBAAA,CAGM,cAFJY,UAA8B,E,gBAC9BZ,mBAAA,CAAuD;IAAhDE,IAAI,EAAC,MAAM;IAN1B,uBAAAK,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAMoCC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAAlBH,KAAA,CAAAC,KAAK,E,KAEnCf,mBAAA,CAGM,cAFJkB,UAAgC,E,gBAChClB,mBAAA,CAA6D;IAVrE,uBAAAO,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAU2BC,KAAA,CAAAK,OAAO,GAAAN,MAAA;IAAEG,EAAE,EAAC,SAAS;IAACC,QAAQ,EAAR;iDAAtBH,KAAA,CAAAK,OAAO,E,KAE5BnB,mBAAA,CAGM,cAFJoB,UAA+B,EAC/BpB,mBAAA,CAA0C;IAAnCE,IAAI,EAAC,MAAM;IAAEmB,QAAM,EAAAd,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAY,YAAA,IAAAZ,QAAA,CAAAY,YAAA,IAAAb,IAAA,CAAY;uCAE1Cc,UAAiC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}