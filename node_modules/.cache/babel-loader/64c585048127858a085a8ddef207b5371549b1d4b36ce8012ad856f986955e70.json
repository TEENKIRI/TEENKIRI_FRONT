{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ReportCreate from '@/views/report/ReportCreate.vue';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      email: localStorage.getItem('email'),\n      userId: localStorage.getItem('userId'),\n      nickname: localStorage.getItem('nickname'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n      topics: ['/topic/korean', '/topic/english', '/topic/math', '/topic/social', '/topic/science'],\n      topicNames: {\n        '/topic/korean': '국어',\n        '/topic/english': '영어',\n        '/topic/math': '수학',\n        '/topic/social': '사회',\n        '/topic/science': '과학'\n      },\n      selectedTopic: '/topic/korean',\n      forbiddenWords: []\n    };\n  },\n  computed: {\n    filteredMessages() {\n      const currentChannel = this.selectedTopic.replace('/topic/', '');\n      return this.messages.filter(message => message.channel === currentChannel);\n    }\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n    this.loadForbiddenWords();\n    this.$nextTick(() => {\n      this.scrollToBottom();\n    });\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: {\n            since: this.loginTime\n          }\n        });\n        this.messages = response.data;\n        this.scrollToBottom();\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    async loadForbiddenWords() {\n      try {\n        const response = await axios.get('/badwords.txt');\n        this.forbiddenWords = response.data.split('\\n').map(word => word.trim()).filter(word => word);\n        console.log('Loaded forbidden words:', this.forbiddenWords);\n      } catch (error) {\n        console.error('금지된 단어를 로드하는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.subscribeToTopic(this.selectedTopic);\n      }, error => {\n        console.error('웹소켓 연결 실패:', error);\n      });\n    },\n    subscribeToTopic(topic) {\n      if (this.stompClient) {\n        this.stompClient.unsubscribe(this.selectedTopic);\n        this.selectedTopic = topic;\n        this.stompClient.subscribe(`/topic/${this.selectedTopic.replace('/topic/', '')}`, message => {\n          const receivedMessage = JSON.parse(message.body);\n          this.messages.push(receivedMessage);\n          this.scrollToBottom(); // 스크롤을 맨 아래로 이동\n        });\n      }\n    },\n    filterMessage(content) {\n      this.forbiddenWords.forEach(word => {\n        const regex = new RegExp(word.split('').map(char => `[${char}]+[^\\\\w\\\\s]*`).join(''), 'gi');\n        content = content.replace(regex, '*'.repeat(word.length));\n      });\n      return content;\n    },\n    sendMessage() {\n      if (!this.email) {\n        console.error('Email is not available');\n        return;\n      }\n      const channel = this.selectedTopic.replace('/topic/', '');\n      if (!channel) {\n        console.error('Channel is not set.');\n        alert('채널이 설정되지 않았습니다.');\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        const filteredContent = this.filterMessage(this.newMessage);\n        const message = {\n          content: filteredContent,\n          senderId: this.userId,\n          email: this.email,\n          // email을 메시지에 포함시킵니다.\n          channel: channel,\n          senderNickname: this.nickname\n        };\n\n        // 서버로 메시지 전송\n        this.stompClient.send(`/app/chat.sendMessage`, {}, JSON.stringify(message));\n        this.newMessage = '';\n        this.scrollToBottom();\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBox = this.$el.querySelector('.chat-box');\n        if (chatBox) {\n          chatBox.scrollTop = chatBox.scrollHeight;\n        }\n      });\n    },\n    isMyMessage(message) {\n      if (!message || typeof message.email === 'undefined') {\n        console.error('Message object or email is undefined:', message);\n        return false;\n      }\n      return message.email === this.email;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log('Chat closed');\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate\n  }\n};","map":{"version":3,"names":["ReportCreate","SockJS","Stomp","axios","data","messages","newMessage","stompClient","email","localStorage","getItem","userId","nickname","loginTime","Date","toISOString","slice","showReportModal","selectedChatMessageId","topics","topicNames","selectedTopic","forbiddenWords","computed","filteredMessages","currentChannel","replace","filter","message","channel","mounted","loadChatHistory","connectWebSocket","loadForbiddenWords","$nextTick","scrollToBottom","methods","response","get","process","env","VUE_APP_API_BASE_URL","params","since","error","console","split","map","word","trim","log","socket","over","connect","frame","subscribeToTopic","topic","unsubscribe","subscribe","receivedMessage","JSON","parse","body","push","filterMessage","content","forEach","regex","RegExp","char","join","repeat","length","sendMessage","alert","connected","filteredContent","senderId","senderNickname","send","stringify","chatBox","$el","querySelector","scrollTop","scrollHeight","isMyMessage","formatTime","datetime","date","getHours","String","getMinutes","padStart","closeChat","reportMessage","id","closeReportModal","components"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <v-btn icon @click=\"closeChat\" class=\"close-button\">\n      <v-icon>mdi-close</v-icon>\n    </v-btn>\n\n    <v-list class=\"chat-box\">\n      <v-list-item\n        v-for=\"message in filteredMessages\"\n        :key=\"message.id\"\n        :class=\"{\n          'my-message': isMyMessage(message),\n          'other-message': !isMyMessage(message)\n        }\"\n        class=\"message-item\"\n      >\n        <v-btn\n          v-if=\"!isMyMessage(message)\"\n          icon\n          small\n          class=\"report-button\"\n          @click=\"reportMessage(message)\"\n        >\n          <v-icon small>mdi-alarm-light-outline</v-icon>\n        </v-btn>\n        <v-list-item-content>\n          <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n          <v-list-item-subtitle class=\"message-content\">\n            {{ filterMessage(message.content) }}\n          </v-list-item-subtitle>\n          <v-list-item-subtitle\n            :class=\"['message-timestamp', { 'left-align': !isMyMessage(message.senderId) }]\"\n          >\n            {{ formatTime(message.createdTime) }}\n          </v-list-item-subtitle>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n\n    <div class=\"message-input-wrapper\">\n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        hide-details\n        dense\n        class=\"message-input\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n      <v-btn @click=\"sendMessage\" class=\"send-button\" color=\"primary\">전송</v-btn>\n    </div>\n\n    <div class=\"topic-buttons\">\n      <v-btn\n        v-for=\"topic in topics\"\n        :key=\"topic\"\n        @click=\"subscribeToTopic(topic)\"\n        :class=\"{ 'selected-topic': selectedTopic === topic }\"\n        class=\"topic-button\"\n      >\n        {{ topicNames[topic] }}\n      </v-btn>\n    </div>\n\n    <ReportCreate\n      v-if=\"showReportModal\"\n      :chatMessageId=\"selectedChatMessageId\"\n      @close=\"closeReportModal\"\n    />\n  </v-container>\n</template>\n\n<script>\nimport ReportCreate from '@/views/report/ReportCreate.vue';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      email: localStorage.getItem('email'),  \n      userId: localStorage.getItem('userId'),\n      nickname: localStorage.getItem('nickname'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n      topics: [\n        '/topic/korean',\n        '/topic/english',\n        '/topic/math',\n        '/topic/social',\n        '/topic/science'\n      ],\n      topicNames: {\n        '/topic/korean': '국어',\n        '/topic/english': '영어',\n        '/topic/math': '수학',\n        '/topic/social': '사회',\n        '/topic/science': '과학'\n      },\n      selectedTopic: '/topic/korean',\n      forbiddenWords: []\n    };\n  },\n  computed: {\n    filteredMessages() {\n      const currentChannel = this.selectedTopic.replace('/topic/', '');\n      return this.messages.filter(message => message.channel === currentChannel);\n    }\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n    this.loadForbiddenWords();\n\n    this.$nextTick(() => {\n      this.scrollToBottom();\n    });\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(\n          `${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`,\n          {\n            params: { since: this.loginTime }\n          }\n        );\n        this.messages = response.data;\n        this.scrollToBottom();\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    async loadForbiddenWords() {\n      try {\n        const response = await axios.get('/badwords.txt');\n        this.forbiddenWords = response.data\n          .split('\\n')\n          .map(word => word.trim())\n          .filter(word => word);\n        console.log('Loaded forbidden words:', this.forbiddenWords);\n      } catch (error) {\n        console.error('금지된 단어를 로드하는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect(\n        {},\n        frame => {\n          console.log('Connected: ' + frame);\n          this.subscribeToTopic(this.selectedTopic);\n        },\n        error => {\n          console.error('웹소켓 연결 실패:', error);\n        }\n      );\n    },\n    subscribeToTopic(topic) {\n      if (this.stompClient) {\n        this.stompClient.unsubscribe(this.selectedTopic);\n        this.selectedTopic = topic;\n        this.stompClient.subscribe(`/topic/${this.selectedTopic.replace('/topic/', '')}`, message => {\n          const receivedMessage = JSON.parse(message.body);\n          this.messages.push(receivedMessage);\n          this.scrollToBottom();  // 스크롤을 맨 아래로 이동\n        });\n      }\n    },\n    filterMessage(content) {\n      this.forbiddenWords.forEach(word => {\n        const regex = new RegExp(\n          word\n            .split('')\n            .map(char => `[${char}]+[^\\\\w\\\\s]*`)\n            .join(''),\n          'gi'\n        );\n        content = content.replace(regex, '*'.repeat(word.length));\n      });\n      return content;\n    },\n    sendMessage() {\n      if (!this.email) {\n        console.error('Email is not available');\n        return;\n      }\n\n      const channel = this.selectedTopic.replace('/topic/', '');\n      if (!channel) {\n        console.error('Channel is not set.');\n        alert('채널이 설정되지 않았습니다.');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const filteredContent = this.filterMessage(this.newMessage);\n        const message = {\n          content: filteredContent,\n          senderId: this.userId,\n          email: this.email,  // email을 메시지에 포함시킵니다.\n          channel: channel,\n          senderNickname: this.nickname,\n        };\n\n        // 서버로 메시지 전송\n        this.stompClient.send(`/app/chat.sendMessage`, {}, JSON.stringify(message));\n\n        this.newMessage = '';\n        this.scrollToBottom();\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBox = this.$el.querySelector('.chat-box');\n        if (chatBox) {\n          chatBox.scrollTop = chatBox.scrollHeight;\n        }\n      });\n    },\n    isMyMessage(message) {  \n        if (!message || typeof message.email === 'undefined') {\n            console.error('Message object or email is undefined:', message);\n            return false; \n        }\n        return message.email === this.email; \n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log('Chat closed');\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate,\n  }\n};\n</script>\n\n\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 800px;\n  width: 550px;\n  margin: 20px auto;\n  background: #f9f9f9;\n  border-radius: 8px;\n  overflow: hidden;\n  padding: 7px;\n  position: relative;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.chat-box {\n  flex-grow: 1;\n  padding: 10px;\n  background: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.message-item {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n}\n\n.report-button {\n  position: absolute;\n  right: -30px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 40px;\n  height: 20px;\n  font-size: 14px;\n  color: #f44336;\n}\n\n.message-input-wrapper {\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  background: #f9f9f9;\n  margin-bottom: 0px;\n}\n\n.message-input {\n  flex-grow: 1;\n  border: none;\n  padding: 10px;\n  margin-right: 10px;\n  height: 40px;\n  background: #f9f9f9;\n}\n\n.send-button {\n  width: auto;\n  height: 40px;\n  padding: 0 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-width: 50%;\n}\n\n.message-content {\n  font-size: 1rem;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  word-break: break-word;\n  max-width: 100%;\n}\n\n.my-message {\n  background-color: #ffeb3b;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #e5f1fb;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.message-sender {\n  font-size: 0.8em;\n  color: gray;\n  margin-bottom: 5px;\n}\n\n.message-timestamp {\n  font-size: 0.8em;\n  color: gray;\n  margin-top: 5px;\n  text-align: right;\n}\n\n.left-align {\n  text-align: left !important;\n  padding-left: 0;\n  margin-left: 0;\n}\n\n.topic-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding: 10px 0;\n  margin-top: 50px;\n  margin-bottom: 0px;\n  background: #f9f9f9;\n}\n\n.topic-button {\n  min-width: 80px;\n}\n\n.selected-topic {\n  background-color: #3f51b5 !important;\n  color: white !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}