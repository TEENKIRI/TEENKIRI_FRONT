{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      notifications: []\n    };\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      this.fetchNotifications(token);\n      this.setupSSE(token);\n    }\n  },\n  methods: {\n    fetchNotifications(token) {\n      // 서버에서 알림을 가져옵니다.\n      axios.get(`${process.env.VUE_APP_API_BASE_URL}/notifications`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        this.notifications = response.data;\n      }).catch(error => {\n        console.error('알림 가져오기 오류:', error);\n      });\n    },\n    setupSSE(token) {\n      // SSE 연결을 설정합니다.\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      eventSource.addEventListener('notification', event => {\n        console.log('알림 이벤트 수신:', event);\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n      eventSource.onerror = error => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    navigate(section) {\n      // 섹션별로 라우팅 처리\n      const routes = {\n        '공지사항': {\n          name: 'BoardList',\n          params: {\n            category: 'notice'\n          }\n        },\n        '자유게시판': {\n          name: 'BoardList',\n          params: {\n            category: 'post'\n          }\n        },\n        'QnA': {\n          name: 'QnaList',\n          params: {\n            category: 'qna'\n          }\n        }\n      };\n      if (routes[section]) {\n        this.$router.push(routes[section]);\n      }\n    },\n    goToMember() {\n      // 사용자 페이지로 이동\n      const route = this.isLogin ? '/user/edit-info' : '/login';\n      this.$router.push(route);\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      // 로그아웃 처리\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      console.log('Logged out');\n      window.location.reload();\n    }\n  }\n};","map":{"version":3,"names":["EventSourcePolyfill","axios","name","data","logo","require","isLogin","notifications","created","token","localStorage","getItem","fetchNotifications","setupSSE","methods","get","process","env","VUE_APP_API_BASE_URL","headers","Authorization","then","response","catch","error","console","eventSource","addEventListener","event","log","notification","JSON","parse","push","onerror","navigate","section","routes","params","category","$router","goToMember","route","goToMenu","doLogout","removeItem","window","location","reload"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <v-col cols=\"3\">\n          <v-toolbar-title>\n            <router-link to=\"/\" class=\"logo\">\n              <img :src=\"logo\" alt=\"로고\" class=\"logo-image\" />\n            </router-link>\n          </v-toolbar-title>\n        </v-col>\n        <v-col cols=\"6\">\n          <v-row justify=\"center\">\n            <v-btn text @click=\"navigate('강좌')\">강좌</v-btn>\n            <v-btn text @click=\"navigate('추천')\">추천</v-btn>\n            <v-btn text @click=\"navigate('이벤트')\">이벤트</v-btn>\n            <v-btn text @click=\"navigate('공지사항')\">공지사항</v-btn>\n            <v-btn text @click=\"navigate('자유게시판')\">자유게시판</v-btn>\n            <v-btn text @click=\"navigate('QnA')\">질문게시판</v-btn>\n          </v-row>\n        </v-col>\n        <v-col cols=\"3\" class=\"text-right\">\n          <v-btn icon @click=\"goToMember\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n          <v-btn v-if=\"isLogin\" @click=\"doLogout\">로그아웃</v-btn>\n          <v-btn icon @click=\"goToMenu\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n\n          <!-- 알림 아이콘 및 알림 목록 -->\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ props }\">\n              <v-btn icon v-bind=\"props\">\n                <v-badge\n                  color=\"red\"\n                  :content=\"notifications.length\"\n                  overlap\n                  v-if=\"notifications.length > 0\"\n                >\n                  <v-icon>mdi-bell</v-icon>\n                </v-badge>\n                <v-icon v-else>mdi-bell</v-icon>\n              </v-btn>\n            </template>\n            <v-list>\n              <v-list-item\n                v-for=\"(notification, index) in notifications\"\n                :key=\"index\"\n              >\n                <v-list-item-content>\n                  <v-list-item-title>{{ notification.message }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-menu>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-app-bar>\n</template>\n\n<script>\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\n\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      notifications: [],\n    };\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      this.fetchNotifications(token);\n      this.setupSSE(token);\n    }\n  },\n  methods: {\n    fetchNotifications(token) {\n      // 서버에서 알림을 가져옵니다.\n      axios.get(`${process.env.VUE_APP_API_BASE_URL}/notifications`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then(response => {\n        this.notifications = response.data;\n      })\n      .catch(error => {\n        console.error('알림 가져오기 오류:', error);\n      });\n    },\n    setupSSE(token) {\n      // SSE 연결을 설정합니다.\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      eventSource.addEventListener('notification', (event) => {\n        console.log('알림 이벤트 수신:', event);\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n\n      eventSource.onerror = (error) => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    navigate(section) {\n      // 섹션별로 라우팅 처리\n      const routes = {\n        '공지사항': { name: 'BoardList', params: { category: 'notice' } },\n        '자유게시판': { name: 'BoardList', params: { category: 'post' } },\n        'QnA': { name: 'QnaList', params: { category: 'qna' } },\n      };\n      if (routes[section]) {\n        this.$router.push(routes[section]);\n      }\n    },\n    goToMember() {\n      // 사용자 페이지로 이동\n      const route = this.isLogin ? '/user/edit-info' : '/login';\n      this.$router.push(route);\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      // 로그아웃 처리\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      console.log('Logged out');\n      window.location.reload();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%;\n}\n</style>\n"],"mappings":";AA+DA,SAASA,mBAAkB,QAAS,uBAAuB;AAC3D,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAEC,OAAO,CAAC,8BAA8B,CAAC;MAC7CC,OAAO,EAAE,KAAK;MACdC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACL,OAAM,GAAI,CAAC,CAACG,KAAK;IAEtB,IAAI,IAAI,CAACH,OAAO,EAAE;MAChB,IAAI,CAACM,kBAAkB,CAACH,KAAK,CAAC;MAC9B,IAAI,CAACI,QAAQ,CAACJ,KAAK,CAAC;IACtB;EACF,CAAC;EACDK,OAAO,EAAE;IACPF,kBAAkBA,CAACH,KAAK,EAAE;MACxB;MACAR,KAAK,CAACc,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,gBAAgB,EAAE;QAC7DC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUX,KAAK;QAChC;MACF,CAAC,EACAY,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACf,aAAY,GAAIe,QAAQ,CAACnB,IAAI;MACpC,CAAC,EACAoB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC;IACDX,QAAQA,CAACJ,KAAK,EAAE;MACd;MACA,MAAMiB,WAAU,GAAI,IAAI1B,mBAAmB,CAAC,GAAGgB,OAAO,CAACC,GAAG,CAACC,oBAAoB,YAAY,EAAE;QAC3FC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUX,KAAK;QAChC;MACF,CAAC,CAAC;MAEFiB,WAAW,CAACC,gBAAgB,CAAC,cAAc,EAAGC,KAAK,IAAK;QACtDH,OAAO,CAACI,GAAG,CAAC,YAAY,EAAED,KAAK,CAAC;QAChC,MAAME,YAAW,GAAIC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACzB,IAAI,CAAC;QAC3C,IAAI,CAACI,aAAa,CAAC0B,IAAI,CAACH,YAAY,CAAC;MACvC,CAAC,CAAC;MAEFJ,WAAW,CAACQ,OAAM,GAAKV,KAAK,IAAK;QAC/BC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACpC,CAAC;IACH,CAAC;IACDW,QAAQA,CAACC,OAAO,EAAE;MAChB;MACA,MAAMC,MAAK,GAAI;QACb,MAAM,EAAE;UAAEnC,IAAI,EAAE,WAAW;UAAEoC,MAAM,EAAE;YAAEC,QAAQ,EAAE;UAAS;QAAE,CAAC;QAC7D,OAAO,EAAE;UAAErC,IAAI,EAAE,WAAW;UAAEoC,MAAM,EAAE;YAAEC,QAAQ,EAAE;UAAO;QAAE,CAAC;QAC5D,KAAK,EAAE;UAAErC,IAAI,EAAE,SAAS;UAAEoC,MAAM,EAAE;YAAEC,QAAQ,EAAE;UAAM;QAAE;MACxD,CAAC;MACD,IAAIF,MAAM,CAACD,OAAO,CAAC,EAAE;QACnB,IAAI,CAACI,OAAO,CAACP,IAAI,CAACI,MAAM,CAACD,OAAO,CAAC,CAAC;MACpC;IACF,CAAC;IACDK,UAAUA,CAAA,EAAG;MACX;MACA,MAAMC,KAAI,GAAI,IAAI,CAACpC,OAAM,GAAI,iBAAgB,GAAI,QAAQ;MACzD,IAAI,CAACkC,OAAO,CAACP,IAAI,CAACS,KAAK,CAAC;IAC1B,CAAC;IACDC,QAAQA,CAAA,EAAG;MACTlB,OAAO,CAACI,GAAG,CAAC,YAAY,CAAC;IAC3B,CAAC;IACDe,QAAQA,CAAA,EAAG;MACT;MACAlC,YAAY,CAACmC,UAAU,CAAC,MAAM,CAAC;MAC/BnC,YAAY,CAACmC,UAAU,CAAC,OAAO,CAAC;MAChC,IAAI,CAACvC,OAAM,GAAI,KAAK;MACpBmB,OAAO,CAACI,GAAG,CAAC,YAAY,CAAC;MACzBiB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}