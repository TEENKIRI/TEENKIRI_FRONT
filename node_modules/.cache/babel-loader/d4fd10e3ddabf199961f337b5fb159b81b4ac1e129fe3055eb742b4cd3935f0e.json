{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null,\n      // 게시글 데이터를 저장할 객체\n      isAdmin: false,\n      // 관리자인지 여부\n      comments: [],\n      // 댓글 목록\n      newCommentContent: '',\n      // 새로운 댓글 내용\n      isLoggedIn: false,\n      // 로그인 여부\n      isFreeBoard: false,\n      // 자유게시판 여부\n      showReportModal: false,\n      // 신고 모달 창 표시 여부\n      reportData: {},\n      // 신고 모달에 전달할 데이터\n      userId: localStorage.getItem('userId'),\n      // 로그인된 사용자의 ID\n      deleteDialog: false,\n      // 삭제 확인 다이얼로그 표시 여부\n      error: null,\n      // 에러 메시지\n      userEmail: '' // 현재 로그인한 사용자의 이메일\n    };\n  },\n  computed: {\n    canEditPost() {\n      // 관리자는 모든 게시글을 수정 가능, 'post' 카테고리는 작성자도 수정 가능\n      return this.isAdmin || this.isFreeBoard && this.post && this.post.userEmail === this.userEmail;\n    },\n    canDeletePost() {\n      // 관리자는 모든 게시글을 삭제 가능, 'post' 카테고리는 작성자도 삭제 가능\n      return this.isAdmin || this.isFreeBoard && this.post && this.post.userEmail === this.userEmail;\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail();\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n        // console.log(this.userEmail)\n      } else {\n        this.$router.push('/login'); // 토큰이 없으면 로그인 페이지로 이동\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n      this.$router.push({\n        name: routeName,\n        params: {\n          category\n        }\n      });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id: this.post.id,\n          category\n        }\n      });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        commentId: comment.id,\n        commentContent: comment.content,\n        commentAuthor: comment.nickname,\n        postTitle: this.post.title,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","ReportCreate","components","data","post","isAdmin","comments","newCommentContent","isLoggedIn","isFreeBoard","showReportModal","reportData","userId","localStorage","getItem","deleteDialog","error","userEmail","computed","canEditPost","canDeletePost","created","decodeToken","checkAdminRole","checkLoginStatus","checkIfFreeBoard","fetchPostDetail","fetchComments","methods","token","decoded","parseJwt","sub","$router","push","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","role","category","$route","params","postId","id","apiUrl","process","env","VUE_APP_API_BASE_URL","Error","response","get","result","console","alert","submitComment","trim","newComment","content","deleteComment","commentId","confirmed","confirm","delete","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goBack","routeName","name","editPost","confirmDeletePost","deletePost","openPostReportModal","postTitle","title","postContent","authorEmail","nickname","postCategory","openCommentReportModal","comment","commentContent","commentAuthor","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card v-if=\"post\">\n      <v-card-title>\n        <h3>{{ post.title }}</h3>\n        <v-spacer></v-spacer>\n        <v-btn v-if=\"canEditPost\" color=\"warning\" @click=\"editPost\">수정</v-btn>\n        <v-btn v-if=\"canDeletePost\" color=\"error\" @click=\"confirmDeletePost\">삭제</v-btn>\n        <v-btn color=\"secondary\" @click=\"openPostReportModal\">신고하기</v-btn>\n      </v-card-title>\n\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\">\n            <p><strong>작성자:</strong> {{ post.nickname }}</p>\n            <p><strong>작성일:</strong> {{ formatDate(post.createdTime) }}</p>\n            <v-img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Post Image\" max-width=\"400\" class=\"my-3\"/>\n            <p><strong>내용:</strong></p>\n            <p>{{ post.content }}</p>\n          </v-col>\n        </v-row>\n\n        <!-- 자유게시판일 때만 댓글 섹션을 표시 -->\n        <v-row v-if=\"isFreeBoard\">\n          <v-col cols=\"12\">\n            <v-divider class=\"my-3\"></v-divider>\n            <h4>댓글</h4>\n            <v-list>\n              <v-list-item v-for=\"comment in comments\" :key=\"comment.id\">\n                <v-list-item-content>\n                  <v-list-item-title>{{ comment.nickname }} ({{ formatDate(comment.createdTime) }})</v-list-item-title>\n                  <v-list-item-subtitle>{{ comment.content }}</v-list-item-subtitle>\n                </v-list-item-content>\n                <v-list-item-action v-if=\"isAdmin || comment.user_id === parseInt(userId, 10)\">\n                  <v-btn icon @click=\"deleteComment(comment.id)\">\n                    <v-icon>mdi-delete</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n                <v-list-item-action>\n                  <v-btn icon @click=\"openCommentReportModal(comment)\">\n                    <v-icon>mdi-alert-circle-outline</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n              </v-list-item>\n            </v-list>\n\n            <v-form v-if=\"isLoggedIn\" @submit.prevent=\"submitComment\">\n              <v-textarea label=\"댓글 작성\" v-model=\"newCommentContent\" required />\n              <v-btn type=\"submit\" color=\"primary\">댓글 등록</v-btn>\n            </v-form>\n          </v-col>\n        </v-row>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-btn color=\"primary\" @click=\"goBack\">목록으로 돌아가기</v-btn>\n      </v-card-actions>\n    </v-card>\n\n    <v-alert type=\"error\" v-else-if=\"error\">{{ error }}</v-alert>\n    <v-progress-circular v-else indeterminate color=\"primary\"></v-progress-circular>\n\n    <!-- 게시글 삭제 확인 다이얼로그 -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title class=\"headline\">게시글 삭제</v-card-title>\n        <v-card-text>게시글을 정말 삭제하시겠습니까?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"deleteDialog = false\">취소</v-btn>\n          <v-btn color=\"error\" text @click=\"deletePost\">삭제</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 신고 모달 창 -->\n    <ReportCreate \n      v-if=\"showReportModal\" \n      :postId=\"reportData.postId\" \n      :postTitle=\"reportData.postTitle\" \n      :postContent=\"reportData.postContent\" \n      :authorEmail=\"reportData.authorEmail\" \n      :postCategory=\"reportData.postCategory\" \n      :commentId=\"reportData.commentId\" \n      :commentContent=\"reportData.commentContent\" \n      :commentAuthor=\"reportData.commentAuthor\" \n      @close=\"closeReportModal\" \n    />\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\n\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null, // 게시글 데이터를 저장할 객체\n      isAdmin: false, // 관리자인지 여부\n      comments: [], // 댓글 목록\n      newCommentContent: '', // 새로운 댓글 내용\n      isLoggedIn: false, // 로그인 여부\n      isFreeBoard: false, // 자유게시판 여부\n      showReportModal: false, // 신고 모달 창 표시 여부\n      reportData: {}, // 신고 모달에 전달할 데이터\n      userId: localStorage.getItem('userId'), // 로그인된 사용자의 ID\n      deleteDialog: false, // 삭제 확인 다이얼로그 표시 여부\n      error: null, // 에러 메시지\n      userEmail: '', // 현재 로그인한 사용자의 이메일\n    };\n  },\n  computed: {\n    canEditPost() {\n      // 관리자는 모든 게시글을 수정 가능, 'post' 카테고리는 작성자도 수정 가능\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    },\n    canDeletePost() {\n      // 관리자는 모든 게시글을 삭제 가능, 'post' 카테고리는 작성자도 삭제 가능\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail();\n\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n        // console.log(this.userEmail)\n      } else {\n        this.$router.push('/login'); // 토큰이 없으면 로그인 페이지로 이동\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(\n          atob(base64)\n            .split('')\n            .map(function(c) {\n              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n        );\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        commentId: comment.id,\n        commentContent: comment.content,\n        commentAuthor: comment.nickname,\n        postTitle: this.post.title,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 800px;\n  margin: 0 auto;\n}\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}