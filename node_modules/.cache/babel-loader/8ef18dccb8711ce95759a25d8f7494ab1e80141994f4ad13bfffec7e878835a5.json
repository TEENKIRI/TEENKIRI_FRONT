{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      // 초기값 설정\n      notifications: [] // 알림 목록을 저장할 배열\n    };\n  },\n  mounted() {\n    // 로컬 스토리지에서 토큰을 읽어 로그인 상태를 설정\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      const eventSource = new EventSource('/subscribe');\n      eventSource.onmessage = event => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n        console.log('새 알림:', notification.message);\n      };\n      eventSource.onerror = () => {\n        console.error('SSE 연결 오류');\n      };\n    }\n  },\n  methods: {\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({\n          name: 'SubjectList',\n          params: {\n            category: 'subject'\n          }\n        });\n      } else if (section === '이벤트') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'event'\n          }\n        });\n      } else if (section === '공지사항') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'notice'\n          }\n        });\n      } else if (section === '자유게시판') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'post'\n          }\n        });\n      } else if (section === 'QnA') {\n        this.$router.push({\n          name: 'QnaList',\n          params: {\n            category: 'qna'\n          }\n        });\n      } else {\n        console.log(section);\n        // 다른 섹션에 대한 처리 추가 가능\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        // 로그인된 상태에서 사용자가 클릭할 때\n        this.$router.push('/user/edit-info'); // 로그인 후 이동할 페이지\n      } else {\n        // 로그인되지 않은 상태에서 사용자가 클릭할 때\n        this.$router.push('/login'); // 로그인 페이지로 이동\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 삭제\n      this.isLogin = false; // 로그인 상태 업데이트\n      console.log('Logged out');\n      window.location.reload(); // 페이지 새로고침\n    }\n  }\n};","map":{"version":3,"names":["name","data","logo","require","isLogin","notifications","mounted","token","localStorage","getItem","eventSource","EventSource","onmessage","event","notification","JSON","parse","push","console","log","message","onerror","error","methods","navigate","section","$router","params","category","goToMember","goToMenu","doLogout","removeItem","window","location","reload"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <v-col cols=\"3\">\n          <v-toolbar-title>\n            <router-link to=\"/\" class=\"logo\">\n              <img :src=\"logo\" alt=\"로고\" class=\"logo-image\" />\n            </router-link>\n          </v-toolbar-title>\n        </v-col>\n        <v-col cols=\"6\">\n          <v-row justify=\"center\">\n            <v-btn text @click=\"navigate('강좌')\">강좌</v-btn>\n            <v-btn text @click=\"navigate('추천')\">추천</v-btn>\n            <v-btn text @click=\"navigate('이벤트')\">이벤트</v-btn>\n            <v-btn text @click=\"navigate('공지사항')\">공지사항</v-btn>\n            <v-btn text @click=\"navigate('자유게시판')\">자유게시판</v-btn>\n            <v-btn text @click=\"navigate('QnA')\">질문게시판</v-btn>\n          </v-row>\n        </v-col>\n        <v-col cols=\"3\" class=\"text-right\">\n          <v-btn icon @click=\"goToMember\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n          <v-btn v-if=\"isLogin\" @click=\"doLogout\">로그아웃</v-btn>\n          <v-btn icon @click=\"goToMenu\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <!-- 알림 아이콘 및 알림 목록 -->\n    <v-menu v-if=\"notifications.length > 0\" offset-y>\n      <template v-slot:activator=\"{ on, attrs }\">\n        <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n          <v-icon>mdi-bell</v-icon>\n          <v-badge color=\"red\" :content=\"notifications.length\" overlap></v-badge>\n        </v-btn>\n      </template>\n      <v-list>\n        <v-list-item v-for=\"(notification, index) in notifications\" :key=\"index\">\n          <v-list-item-content>\n            <v-list-item-title>{{ notification.message }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n    </v-menu>\n  </v-app-bar>\n</template>\n\n<script>\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false, // 초기값 설정\n      notifications: [], // 알림 목록을 저장할 배열\n    };\n  },\n  mounted() {\n    // 로컬 스토리지에서 토큰을 읽어 로그인 상태를 설정\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      const eventSource = new EventSource('/subscribe');\n\n      eventSource.onmessage = (event) => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n        console.log('새 알림:', notification.message);\n      };\n\n      eventSource.onerror = () => {\n        console.error('SSE 연결 오류');\n      };\n    }\n  },\n  methods: {\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({ name: 'SubjectList', params: { category: 'subject' } });\n      } else if (section === '이벤트') {\n        this.$router.push({ name: 'BoardList', params: { category: 'event' } });\n      } else if (section === '공지사항') {\n        this.$router.push({ name: 'BoardList', params: { category: 'notice' } });\n      } else if (section === '자유게시판') {\n        this.$router.push({ name: 'BoardList', params: { category: 'post' } });\n      } else if (section === 'QnA') {\n        this.$router.push({ name: 'QnaList', params: { category: 'qna' } });\n      } else {\n        console.log(section);\n        // 다른 섹션에 대한 처리 추가 가능\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        // 로그인된 상태에서 사용자가 클릭할 때\n        this.$router.push('/user/edit-info'); // 로그인 후 이동할 페이지\n      } else {\n        // 로그인되지 않은 상태에서 사용자가 클릭할 때\n        this.$router.push('/login'); // 로그인 페이지로 이동\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 삭제\n      this.isLogin = false; // 로그인 상태 업데이트\n      console.log('Logged out');\n      window.location.reload(); // 페이지 새로고침\n    }\n  }\n}\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%; \n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}