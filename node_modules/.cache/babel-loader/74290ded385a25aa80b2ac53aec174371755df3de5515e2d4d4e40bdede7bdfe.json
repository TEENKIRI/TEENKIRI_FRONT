{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      user: {},\n      courseId: this.$route.params.id,\n      routeName: this.$route.name,\n      courseData: {}\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      } else if (this.user.role !== \"ADMIN\") {\n        alert(\"관리자만 생성이 가능합니다!\");\n        location.href = -1;\n      } else {\n        this.courseId = this.courseId == undefined || this.courseId == \"\" ? \"\" : this.courseId;\n        console.log(\"courseId 아이디 >> \", this.courseId);\n        console.log(\"routeName 라우터 이름 >> \", this.routeName);\n        if (this.routeName === \"CourseEdit\") {\n          // 수정용 라우터\n          this.getCourseDetail();\n        }\n      }\n    } catch (error) {\n      console.error(\"사용자 정보를 가져오는 중 오류가 발생했습니다:\", error);\n    }\n  },\n  methods: {\n    async getCourseDetail() {\n      console.log(\"detail 불러오기~~~\");\n      if (this.courseId != \"\") {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/course/detail/${this.courseId}`);\n          this.courseData = response.data.result;\n          console.log(this.courseData);\n        } catch (error) {\n          console.error(\"과목 세부 정보 조회 실패:\", error);\n        }\n      }\n    },\n    async submitCourse() {\n      console.log(\"이얍~~\");\n      this.courseData.title = this.courseData.title.trim();\n      if (this.courseData.title != \"\") {\n        try {\n          const postData = {\n            title: this.courseData.title\n          };\n          let apiUrl = `${process.env.VUE_APP_API_BASE_URL}/course/create`;\n          if (this.routeName === \"CourseEdit\") {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/course/update/${this.courseId}`;\n            await axios.patch(apiUrl, postData);\n            alert(\"과목이 성공적으로 수정되었습니다!\");\n          } else {\n            await axios.post(apiUrl, postData);\n            alert(\"과목이 성공적으로 등록되었습니다!\");\n          }\n          history.go(-1);\n        } catch (error) {\n          console.error(\"Error details:\", error);\n        }\n      }\n    },\n    async deleteCourse() {\n      if (this.courseId != \"\") {\n        try {\n          const response = await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/course/delete/${this.courseId}`);\n          console.log(response);\n          alert(\"과목 삭제가 완료되었습니다.\");\n          history.go(-1);\n        } catch (error) {\n          console.error(\"Error details:\", error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user","courseId","$route","params","id","routeName","name","courseData","created","$store","dispatch","getters","getUserObj","token","alert","location","href","role","undefined","console","log","getCourseDetail","error","methods","response","get","process","env","VUE_APP_API_BASE_URL","result","submitCourse","title","trim","postData","apiUrl","patch","post","history","go","deleteCourse","delete"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/course/CourseCreate.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card>\n      <v-card-title>\n        <h3>과목 관리</h3>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" @submit.prevent=\"submitCourse\">\n          <!-- 과목 제목 -->\n          <v-text-field label=\"과목명\" v-model=\"this.courseData.title\" required />\n          <div class=\"mt-3\">\n            <v-btn type=\"submit\" color=\"primary\">저장</v-btn>\n            <v-btn color=\"red\" class=\"ml-3\" v-if=\"this.routeName === 'CourseEdit'\" @click=\"deleteCourse\"\n              >삭제</v-btn\n            >\n          </div>\n        </v-form>\n      </v-card-text>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      user: {},\n      courseId: this.$route.params.id,\n      routeName: this.$route.name,\n      courseData: {},\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      } else if (this.user.role !== \"ADMIN\") {\n        alert(\"관리자만 생성이 가능합니다!\");\n        location.href = -1;\n      } else {\n        this.courseId =\n          this.courseId == undefined || this.courseId == \"\" ? \"\" : this.courseId;\n        console.log(\"courseId 아이디 >> \", this.courseId);\n        console.log(\"routeName 라우터 이름 >> \", this.routeName);\n        if (this.routeName === \"CourseEdit\") {\n          // 수정용 라우터\n          this.getCourseDetail();\n        }\n      }\n    } catch (error) {\n      console.error(\"사용자 정보를 가져오는 중 오류가 발생했습니다:\", error);\n    }\n  },\n  methods: {\n    async getCourseDetail() {\n      console.log(\"detail 불러오기~~~\");\n      if (this.courseId != \"\") {\n        try {\n          const response = await axios.get(\n            `${process.env.VUE_APP_API_BASE_URL}/course/detail/${this.courseId}`\n          );\n          this.courseData = response.data.result;\n          console.log(this.courseData);\n        } catch (error) {\n          console.error(\"과목 세부 정보 조회 실패:\", error);\n        }\n      }\n    },\n    async submitCourse() {\n      console.log(\"이얍~~\");\n      this.courseData.title = this.courseData.title.trim();\n\n      if (this.courseData.title != \"\") {\n        try {\n          const postData = { title: this.courseData.title };\n          let apiUrl = `${process.env.VUE_APP_API_BASE_URL}/course/create`;\n          if (this.routeName === \"CourseEdit\") {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/course/update/${this.courseId}`;\n            await axios.patch(apiUrl, postData);\n            alert(\"과목이 성공적으로 수정되었습니다!\");\n          } else {\n            await axios.post(apiUrl, postData);\n            alert(\"과목이 성공적으로 등록되었습니다!\");\n          }\n          history.go(-1);\n        } catch (error) {\n          console.error(\"Error details:\", error);\n        }\n      }\n    },\n    async deleteCourse() {\n      if (this.courseId != \"\") {\n        try {\n          const response = await axios.delete(\n            `${process.env.VUE_APP_API_BASE_URL}/course/delete/${this.courseId}`\n          );\n          console.log(response)\n          alert(\"과목 삭제가 완료되었습니다.\")\n          history.go(-1);\n        }catch (error) {\n          console.error(\"Error details:\", error);\n        }\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}