{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, withKeys as _withKeys, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6f352605\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"message-input-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_ReportCreate = _resolveComponent(\"ReportCreate\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, {\n    class: \"chat-container\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" Close Button \"), _createVNode(_component_v_btn, {\n      icon: \"\",\n      onClick: $options.closeChat,\n      class: \"close-button\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\"mdi-close\")]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createCommentVNode(\" Chat Messages \"), _createVNode(_component_v_list, {\n      class: \"chat-box\"\n    }, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n        return _openBlock(), _createBlock(_component_v_list_item, {\n          key: message.id,\n          class: _normalizeClass([{\n            'my-message': $options.isMyMessage(message.senderId),\n            'other-message': !$options.isMyMessage(message.senderId)\n          }, \"message-item\"])\n        }, {\n          default: _withCtx(() => [_createCommentVNode(\" 자신이 보낸 메시지에는 신고 버튼을 숨김 \"), !$options.isMyMessage(message.senderId) ? (_openBlock(), _createBlock(_component_v_btn, {\n            key: 0,\n            icon: \"\",\n            small: \"\",\n            class: \"report-button\",\n            onClick: $event => $options.reportMessage(message)\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_icon, {\n              small: \"\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"mdi-alarm-light-outline\")]),\n              _: 1 /* STABLE */\n            })]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_list_item_content, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.senderNickname), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, {\n              class: \"message-content\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.content), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, {\n              class: _normalizeClass(['message-timestamp', {\n                'left-align': !$options.isMyMessage(message.senderId)\n              }])\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($options.formatTime(message.createdTime)), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\"])]),\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" Message Input and Send Button \"), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_v_text_field, {\n      modelValue: $data.newMessage,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n      label: \"메시지를 입력하세요...\",\n      \"hide-details\": \"\",\n      dense: \"\",\n      class: \"message-input\",\n      onKeyup: _withKeys($options.sendMessage, [\"enter\"])\n    }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_v_btn, {\n      onClick: $options.sendMessage,\n      class: \"send-button\",\n      color: \"primary\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"전송\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]), _createCommentVNode(\" Report Create Modal \"), $data.showReportModal ? (_openBlock(), _createBlock(_component_ReportCreate, {\n      key: 0,\n      chatMessageId: $data.selectedChatMessageId,\n      onClose: $options.closeReportModal\n    }, null, 8 /* PROPS */, [\"chatMessageId\", \"onClose\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","_createBlock","_component_v_container","default","_withCtx","_createCommentVNode","_createVNode","_component_v_btn","icon","onClick","$options","closeChat","_component_v_icon","_createTextVNode","_","_component_v_list","_createElementBlock","_Fragment","_renderList","$data","messages","message","_component_v_list_item","key","id","_normalizeClass","isMyMessage","senderId","small","$event","reportMessage","_component_v_list_item_content","_component_v_list_item_title","_toDisplayString","senderNickname","_component_v_list_item_subtitle","content","formatTime","createdTime","_createElementVNode","_hoisted_1","_component_v_text_field","modelValue","newMessage","_cache","label","dense","onKeyup","_withKeys","sendMessage","color","showReportModal","_component_ReportCreate","chatMessageId","selectedChatMessageId","onClose","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <!-- Close Button -->\n    <v-btn icon @click=\"closeChat\" class=\"close-button\">\n      <v-icon>mdi-close</v-icon>\n    </v-btn>\n\n    <!-- Chat Messages -->\n    <v-list class=\"chat-box\">\n      <v-list-item\n        v-for=\"message in messages\"\n        :key=\"message.id\"\n        :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        class=\"message-item\"\n      >\n        <!-- 자신이 보낸 메시지에는 신고 버튼을 숨김 -->\n        <v-btn v-if=\"!isMyMessage(message.senderId)\" icon small class=\"report-button\" @click=\"reportMessage(message)\">\n          <v-icon small>mdi-alarm-light-outline</v-icon>\n        </v-btn>\n        <v-list-item-content>\n          <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n          <v-list-item-subtitle class=\"message-content\">\n            {{ message.content }}\n          </v-list-item-subtitle>\n          <v-list-item-subtitle :class=\"['message-timestamp', { 'left-align': !isMyMessage(message.senderId) }]\">\n            {{ formatTime(message.createdTime) }}\n          </v-list-item-subtitle>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n\n    <!-- Message Input and Send Button -->\n    <div class=\"message-input-wrapper\">\n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        hide-details\n        dense\n        class=\"message-input\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n      <v-btn @click=\"sendMessage\" class=\"send-button\" color=\"primary\">전송</v-btn>\n    </div>\n\n    <!-- Report Create Modal -->\n    <ReportCreate v-if=\"showReportModal\" :chatMessageId=\"selectedChatMessageId\" @close=\"closeReportModal\" />\n  </v-container>\n</template>\n\n<script>\nimport ReportCreate from '@/views/report/ReportCreate.vue';  // 모달 컴포넌트 임포트\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: { since: this.loginTime },\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, (frame) => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', (tick) => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId,\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log(\"Chat closed\");\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate,\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 500px; /* 높이를 고정 */\n  width: 580px; /* 가로 크기를 고정 */\n  margin: 20px auto;\n  background: #f9f9f9;\n  border-radius: 8px;\n  overflow: hidden;\n  padding: 10px;\n  position: relative;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.chat-box {\n  flex-grow: 1;\n  padding: 10px;\n  background: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  overflow-y: auto;\n  overflow-x: hidden; /* 가로 스크롤 안보이게 설정 */\n}\n\n.message-item {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n}\n\n.report-button {\n  position: absolute;\n  right: -30px; /* 말풍선 오른쪽으로 이동 */\n  top: 50%;\n  transform: translateY(-50%);\n  width: 40px;\n  height: 20px;\n  font-size: 14px;\n  color: #f44336;\n}\n\n.message-input-wrapper {\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  background: #f9f9f9;\n}\n\n.message-input {\n  flex-grow: 1;\n  border: none;\n  padding: 10px;\n  margin-right: 10px;\n  height: 40px;\n  background: #f9f9f9;\n}\n\n.send-button {\n  width: auto;\n  height: 40px;\n  padding: 0 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-width: 50%; /* 말풍선 가로 크기를 줄임 */\n}\n\n.message-content {\n  font-size: 1rem;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  word-break: break-word;\n  max-width: 100%;\n}\n\n.my-message {\n  background-color: #ffeb3b;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #e5f1fb;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.message-sender {\n  font-size: 0.8em;\n  color: gray;\n  margin-bottom: 5px;\n}\n\n.message-timestamp {\n  font-size: 0.8em;\n  color: gray;\n  margin-top: 5px;\n  text-align: right;\n}\n\n.left-align {\n  text-align: left !important; /* 왼쪽 정렬을 강제로 적용 */\n  padding-left: 0; /* 왼쪽으로 붙이기 위해 패딩 제거 */\n  margin-left: 0; /* 왼쪽으로 붙이기 위해 마진 제거 */\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}