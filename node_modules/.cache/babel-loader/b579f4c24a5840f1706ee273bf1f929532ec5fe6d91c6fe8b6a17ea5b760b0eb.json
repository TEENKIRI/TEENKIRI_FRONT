{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      formData: {\n        title: '',\n        questionText: '',\n        qImage: null // 파일 첨부\n      },\n      previewImageSrc: null\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      const files = event.target.files || event.dataTransfer.files;\n      if (files && files.length > 0) {\n        this.formData.qImage = files[0];\n        this.previewImage();\n      } else {\n        this.formData.qImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.formData.qImage) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.formData.qImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const formData = new FormData();\n      formData.append('title', this.formData.title);\n      formData.append('questionText', this.formData.questionText);\n      if (this.formData.qImage) {\n        formData.append('image', this.formData.qImage);\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        alert('질문이 성공적으로 작성되었습니다!');\n        this.resetForm();\n        this.$router.push({\n          name: 'QnaList'\n        }); // 질문 목록 페이지로 이동\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : '질문 작성에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error); // 전체 오류 출력\n      }\n    },\n    resetForm() {\n      this.formData.title = '';\n      this.formData.questionText = '';\n      this.formData.qImage = null;\n      this.previewImageSrc = null;\n      if (this.$refs.form) {\n        this.$refs.form.reset(); // 폼 초기화\n      }\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.reset(); // 파일 입력 초기화\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","formData","title","questionText","qImage","previewImageSrc","methods","onFileChange","event","files","target","dataTransfer","length","previewImage","reader","FileReader","onload","e","result","readAsDataURL","submitForm","FormData","append","response","post","process","env","VUE_APP_API_BASE_URL","headers","console","log","alert","resetForm","$router","push","name","error","errorMessage","message","$refs","form","reset","fileInput"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/CreateQuestion.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-form ref=\"form\" @submit.prevent=\"submitForm\">\n      <v-text-field\n        v-model=\"formData.title\"\n        label=\"제목\"\n        required\n      ></v-text-field>\n\n      <v-textarea\n        v-model=\"formData.questionText\"\n        label=\"내용\"\n        required\n      ></v-textarea>\n\n      <v-file-input\n        ref=\"fileInput\"\n        @change=\"onFileChange\"\n        label=\"이미지 업로드\"\n        accept=\"image/*\"\n      ></v-file-input>\n\n      <v-img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" max-width=\"200\"></v-img>\n\n      <v-btn color=\"primary\" type=\"submit\">저장</v-btn>\n    </v-form>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      formData: {\n        title: '',\n        questionText: '',\n        qImage: null, // 파일 첨부\n      },\n      previewImageSrc: null,\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      const files = event.target.files || event.dataTransfer.files;\n      if (files && files.length > 0) {\n        this.formData.qImage = files[0];\n        this.previewImage();\n      } else {\n        this.formData.qImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.formData.qImage) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.formData.qImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const formData = new FormData();\n      formData.append('title', this.formData.title);\n      formData.append('questionText', this.formData.questionText);\n      if (this.formData.qImage) {\n        formData.append('image', this.formData.qImage);\n      }\n\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        console.log(response.data);\n        alert('질문이 성공적으로 작성되었습니다!');\n        this.resetForm();\n        this.$router.push({ name: 'QnaList' });  // 질문 목록 페이지로 이동\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : '질문 작성에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error);  // 전체 오류 출력\n      }\n    },\n    resetForm() {\n      this.formData.title = '';\n      this.formData.questionText = '';\n      this.formData.qImage = null;\n      this.previewImageSrc = null;\n      if (this.$refs.form) {\n        this.$refs.form.reset();  // 폼 초기화\n      }\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.reset();  // 파일 입력 초기화\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}