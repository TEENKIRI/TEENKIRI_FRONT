{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      boardItems: [],\n      // 게시글 목록 데이터\n      currentPage: 1,\n      // 현재 페이지 번호\n      totalPages: 1,\n      // 총 페이지 수\n      itemsPerPage: 10,\n      // 페이지당 항목 수\n      isAdmin: false,\n      // 관리자인지 여부\n      userId: null,\n      // 현재 로그인된 사용자의 ID\n      role: null,\n      // 현재 로그인된 사용자의 역할\n      category: '',\n      // 현재 게시판 종류\n      boardTitle: '',\n      // 게시판 제목\n      activeItem: null,\n      // 현재 열려있는 conLayer의 아이템 ID\n\n      // 검색 필드 추가\n      searchType: 'all',\n      searchQuery: '',\n      searchOptions: [{\n        text: \"전체\",\n        value: \"all\"\n      }, {\n        text: \"제목\",\n        value: \"title\"\n      }, {\n        text: \"작성자\",\n        value: \"userNickname\"\n      }]\n    };\n  },\n  watch: {\n    '$route.params.category': 'updateCategoryAndFetchItems' // category가 변경될 때마다 호출\n  },\n  created() {\n    this.checkUserRole();\n    this.updateCategoryAndFetchItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkUserRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n      this.role = role;\n    },\n    updateCategoryAndFetchItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n      this.fetchBoardItems();\n    },\n    async fetchBoardItems() {\n      try {\n        const params = {\n          page: this.currentPage - 1,\n          size: this.itemsPerPage,\n          searchType: this.searchType,\n          searchQuery: this.searchQuery\n        };\n\n        // 이 부분은 검색 카테고리에 따라 'all'을 처리하는 로직입니다.\n        if (this.searchType === 'all' && this.searchQuery) {\n          params.searchType = 'all';\n        }\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.category}/list`, {\n          params\n        });\n        const result = response.data.result;\n        if (result && result.content) {\n          this.boardItems = result.content;\n          this.totalPages = result.totalPages;\n        } else {\n          console.error('올바르지 않은 데이터 형식입니다:', response.data);\n        }\n      } catch (error) {\n        console.error('목록을 가져오는 중 오류가 발생했습니다:', error);\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      if (page !== this.currentPage) {\n        this.currentPage = page;\n        this.fetchBoardItems();\n      }\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({\n        name: 'BoardCreate',\n        params: {\n          category: this.category\n        }\n      });\n    },\n    goToDetail(id) {\n      this.$router.push({\n        name: 'BoardDetail',\n        params: {\n          id,\n          category: this.category\n        }\n      });\n    },\n    canEditOrDelete(item) {\n      return this.isAdmin || item.userId === this.userId;\n    },\n    toggleConLayer(itemId) {\n      this.activeItem = this.activeItem === itemId ? null : itemId;\n    },\n    modifyPost(id) {\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id,\n          category: this.category\n        }\n      });\n    },\n    async deletePost(id) {\n      if (confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n        let apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/${this.category}/delete/${id}`;\n        try {\n          await axios.delete(apiUrl);\n          this.fetchBoardItems();\n          alert('게시글이 삭제되었습니다.');\n        } catch (error) {\n          console.error('게시글을 삭제하는 데 실패했습니다:', error);\n          alert('게시글 삭제에 실패했습니다.');\n        }\n      }\n    },\n    performSearch() {\n      this.currentPage = 1; // 검색할 때 첫 페이지로 초기화\n      this.fetchBoardItems();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","boardItems","currentPage","totalPages","itemsPerPage","isAdmin","userId","role","category","boardTitle","activeItem","searchType","searchQuery","searchOptions","text","value","watch","created","checkUserRole","updateCategoryAndFetchItems","localStorage","getItem","methods","$route","params","setBoardTitle","fetchBoardItems","page","size","response","get","process","env","VUE_APP_API_BASE_URL","result","content","console","error","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goToPreviousPage","goToNextPage","goToPage","createNewPost","alert","$router","push","name","goToDetail","id","canEditOrDelete","item","toggleConLayer","itemId","modifyPost","deletePost","confirm","apiUrl","delete","performSearch"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"inner\">\n      <h1 class=\"board-title\">{{ boardTitle }}</h1>\n\n      <v-form ref=\"form\" class=\"d-flex mb-4\">\n        <v-col cols=\"12\" md=\"2\"> \n          <v-select\n            v-model=\"searchType\"\n            :items=\"searchOptions\"\n            item-title=\"text\"\n            item-value=\"value\"\n            label=\"검색 범위\"\n            required\n          ></v-select>\n        </v-col>\n        <v-col cols=\"12\" md=\"10.5\"> \n          <v-text-field\n            v-model=\"searchQuery\"\n            label=\"검색어를 입력하세요.\"\n            append-icon=\"mdi-magnify\"\n            @click:append=\"performSearch\"\n            required\n          ></v-text-field>\n        </v-col>\n      </v-form>\n\n      <!-- 게시글 목록 테이블 -->\n      <table class=\"tbl_list\">\n        <caption></caption>\n        <colgroup>\n          <col width=\"80\" />\n          <col width=\"\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th scope=\"col\">번호</th>\n            <th scope=\"col\">제목</th>\n            <th scope=\"col\">작성자</th>\n            <th scope=\"col\">작성일</th>\n            <th scope=\"col\">관리</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n            <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n            <td @click=\"goToDetail(item.id, category)\" class=\"text_left subject\">{{ item.title }}</td>\n            <td>{{ item.nickname }}</td>\n            <td>{{ formatDate(item.createdTime) }}</td>\n            <td>\n              <button\n                type=\"button\"\n                class=\"btn_adm_control\"\n                v-if=\"canEditOrDelete(item)\"\n                @click=\"toggleConLayer(item.id)\"\n              >•••</button>\n              <div class=\"conLayer\" v-if=\"activeItem === item.id\">\n                <a href=\"javascript:void(0)\" class=\"btn_board_modify\" @click=\"modifyPost(item.id)\">수정</a>\n                <a href=\"javascript:void(0)\" class=\"btn_board_del btn_del\" @click=\"deletePost(item.id)\">삭제</a>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <!-- 작성하기 버튼 -->\n      <div class=\"btnWrap\">\n        <button @click=\"createNewPost\" class=\"btn_write\">작성하기</button>\n      </div>\n\n      <!-- 페이지네이션 -->\n      <div class=\"pagingWrap\">\n        <ul>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(1)\" class=\"btn_paging_start\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPreviousPage\" class=\"btn_paging_prev\"></a></li>\n          <li v-for=\"page in totalPages\" :key=\"page\">\n            <a href=\"javascript:void(0)\" @click=\"goToPage(page)\" :class=\"{ btn_paging: true, active: currentPage === page }\">{{ page }}</a>\n          </li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToNextPage\" class=\"btn_paging_next\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(totalPages)\" class=\"btn_paging_end\"></a></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      userId: null, // 현재 로그인된 사용자의 ID\n      role: null, // 현재 로그인된 사용자의 역할\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n      activeItem: null, // 현재 열려있는 conLayer의 아이템 ID\n\n      // 검색 필드 추가\n      searchType: 'all',\n      searchQuery: '',\n      searchOptions: [\n        { text: \"전체\", value: \"all\" },\n        { text: \"제목\", value: \"title\" },\n        { text: \"작성자\", value: \"userNickname\" },\n      ], \n    };\n  },\n  watch: {\n    '$route.params.category': 'updateCategoryAndFetchItems', // category가 변경될 때마다 호출\n  },\n  created() {\n    this.checkUserRole();\n    this.updateCategoryAndFetchItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkUserRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n      this.role = role;\n    },\n    updateCategoryAndFetchItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n      this.fetchBoardItems();\n    },\n    async fetchBoardItems() {\n        try {\n            const params = {\n                page: this.currentPage - 1,\n                size: this.itemsPerPage,\n                searchType: this.searchType,\n                searchQuery: this.searchQuery,\n            };\n\n            // 이 부분은 검색 카테고리에 따라 'all'을 처리하는 로직입니다.\n            if (this.searchType === 'all' && this.searchQuery) {\n                params.searchType = 'all';\n            }\n\n            const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.category}/list`, { params });\n\n            const result = response.data.result;\n            if (result && result.content) {\n                this.boardItems = result.content;\n                this.totalPages = result.totalPages;\n            } else {\n                console.error('올바르지 않은 데이터 형식입니다:', response.data);\n            }\n        } catch (error) {\n            console.error('목록을 가져오는 중 오류가 발생했습니다:', error);\n        }\n    },\n\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      if (page !== this.currentPage) {\n        this.currentPage = page;\n        this.fetchBoardItems();\n      }\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id) {\n      this.$router.push({ name: 'BoardDetail', params: { id, category: this.category } });\n    },\n    canEditOrDelete(item) {\n      return this.isAdmin || item.userId === this.userId;\n    },\n    toggleConLayer(itemId) {\n      this.activeItem = this.activeItem === itemId ? null : itemId;\n    },\n    modifyPost(id) {\n      this.$router.push({ name: 'BoardUpdate', params: { id, category: this.category } });\n    },\n    async deletePost(id) {\n      if (confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n        let apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/${this.category}/delete/${id}`;\n\n        try {\n          await axios.delete(apiUrl);\n          this.fetchBoardItems();\n          alert('게시글이 삭제되었습니다.');\n        } catch (error) {\n          console.error('게시글을 삭제하는 데 실패했습니다:', error);\n          alert('게시글 삭제에 실패했습니다.');\n        }\n      }\n    },\n    performSearch() {\n      this.currentPage = 1; // 검색할 때 첫 페이지로 초기화\n      this.fetchBoardItems();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n\n.inner {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.tbl_list {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_list th,\n.tbl_list td {\n  border: none; /* 모든 테두리 제거 */\n  padding: 10px;\n  text-align: left;\n}\n\n/* 테두리 스타일을 유지하려면 아래 코드 사용 */\n.tbl_list th {\n  background-color: #f4f4f4;\n}\n\n.tbl_list tr:not(:last-child) td {\n  border-bottom: 1px solid #ccc; /* 하단 선만 유지 */\n}\n\n.text_left {\n  text-align: left;\n}\n\n.subject {\n  cursor: pointer;\n  color: #333;\n  text-decoration: none;\n}\n\n.subject:hover {\n  text-decoration: underline;\n}\n\n.btn_adm_control {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 4px;\n  transition: background-color 0.3s, color 0.3s;\n  border-radius: 8px;\n}\n\n.btn_adm_control:hover {\n  background-color: #ccc;\n}\n\n.btn_board_modify {\n  background-color: #6cb1ff;\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 4px;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.btn_board_modify:hover {\n  background-color: #007bff;\n}\n\n.btn_board_del {\n  background-color: #f57380;\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 4px;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.btn_board_del:hover {\n  background-color: #dc3545;\n}\n\n.conLayer {\n  display: inline-block;\n  background-color: white;\n  border: 1px solid #ccc;\n  position: absolute;\n  z-index: 1;\n  right: 0;\n  padding: 5px;\n}\n\n.btnWrap {\n  text-align: right;\n  margin-top: 20px;\n}\n\n.btn_write {\n  padding: 10px 20px;\n  background-color: #f27885;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.btn_write:hover {\n  background-color: #fa5263;\n}\n\n.pagingWrap ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.pagingWrap li {\n  display: inline-block;\n}\n\n.pagingWrap li a {\n  margin: 0 5px;\n  text-decoration: none;\n  color: black;\n  cursor: pointer;\n}\n\n.pagingWrap li a.active {\n  font-weight: bold;\n  color: blue;\n}\n\n.pagingWrap .btn_paging_start:before {\n  content: \"<<\";\n}\n\n.pagingWrap .btn_paging_prev:before {\n  content: \"<\";\n}\n\n.pagingWrap .btn_paging_next:before {\n  content: \">\";\n}\n\n.pagingWrap .btn_paging_end:before {\n  content: \">>\";\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}