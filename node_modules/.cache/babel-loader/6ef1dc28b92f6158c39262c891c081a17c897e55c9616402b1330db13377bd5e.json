{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a09f8938\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"작성자:\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"작성일:\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"내용:\")], -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", null, \"댓글\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_img = _resolveComponent(\"v-img\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_divider = _resolveComponent(\"v-divider\");\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_list_item_action = _resolveComponent(\"v-list-item-action\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_textarea = _resolveComponent(\"v-textarea\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_alert = _resolveComponent(\"v-alert\");\n  const _component_v_progress_circular = _resolveComponent(\"v-progress-circular\");\n  const _component_v_dialog = _resolveComponent(\"v-dialog\");\n  const _component_ReportCreate = _resolveComponent(\"ReportCreate\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, {\n    class: \"mt-5\"\n  }, {\n    default: _withCtx(() => [$data.post ? (_openBlock(), _createBlock(_component_v_card, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n        default: _withCtx(() => [_createElementVNode(\"h3\", null, _toDisplayString($data.post.title), 1 /* TEXT */), _createVNode(_component_v_spacer), $options.canEditPost ? (_openBlock(), _createBlock(_component_v_btn, {\n          key: 0,\n          color: \"warning\",\n          onClick: $options.editPost\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"수정\")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true), $options.canDeletePost ? (_openBlock(), _createBlock(_component_v_btn, {\n          key: 1,\n          color: \"error\",\n          onClick: $options.confirmDeletePost\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"삭제\")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_btn, {\n          color: \"secondary\",\n          onClick: $options.openPostReportModal\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"신고하기\")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_text, null, {\n        default: _withCtx(() => [_createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"p\", null, [_hoisted_1, _createTextVNode(\" \" + _toDisplayString($data.post.nickname), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_hoisted_2, _createTextVNode(\" \" + _toDisplayString($options.formatDate($data.post.createdTime)), 1 /* TEXT */)]), $data.post.imageUrl ? (_openBlock(), _createBlock(_component_v_img, {\n              key: 0,\n              src: $data.post.imageUrl,\n              alt: \"Post Image\",\n              \"max-width\": \"400\",\n              class: \"my-3\"\n            }, null, 8 /* PROPS */, [\"src\"])) : _createCommentVNode(\"v-if\", true), _hoisted_3, _createElementVNode(\"p\", null, _toDisplayString($data.post.content), 1 /* TEXT */)]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        }), _createCommentVNode(\" 자유게시판일 때만 댓글 섹션을 표시 \"), $data.isFreeBoard ? (_openBlock(), _createBlock(_component_v_row, {\n          key: 0\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_divider, {\n              class: \"my-3\"\n            }), _hoisted_4, _createVNode(_component_v_list, null, {\n              default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n                return _openBlock(), _createBlock(_component_v_list_item, {\n                  key: comment.id\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n                    default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString(comment.nickname) + \" (\" + _toDisplayString($options.formatDate(comment.createdTime)) + \")\", 1 /* TEXT */)]),\n                      _: 2 /* DYNAMIC */\n                    }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString(comment.content), 1 /* TEXT */)]),\n                      _: 2 /* DYNAMIC */\n                    }, 1024 /* DYNAMIC_SLOTS */)]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */), $data.isAdmin || comment.user_id === parseInt($data.userId, 10) ? (_openBlock(), _createBlock(_component_v_list_item_action, {\n                    key: 0\n                  }, {\n                    default: _withCtx(() => [_createVNode(_component_v_btn, {\n                      icon: \"\",\n                      onClick: $event => $options.deleteComment(comment.id)\n                    }, {\n                      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n                        default: _withCtx(() => [_createTextVNode(\"mdi-delete\")]),\n                        _: 1 /* STABLE */\n                      })]),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_list_item_action, null, {\n                    default: _withCtx(() => [_createVNode(_component_v_btn, {\n                      icon: \"\",\n                      onClick: $event => $options.openCommentReportModal(comment)\n                    }, {\n                      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n                        default: _withCtx(() => [_createTextVNode(\"mdi-alert-circle-outline\")]),\n                        _: 1 /* STABLE */\n                      })]),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n                    _: 2 /* DYNAMIC */\n                  }, 1024 /* DYNAMIC_SLOTS */)]),\n                  _: 2 /* DYNAMIC */\n                }, 1024 /* DYNAMIC_SLOTS */);\n              }), 128 /* KEYED_FRAGMENT */))]),\n              _: 1 /* STABLE */\n            }), $data.isLoggedIn ? (_openBlock(), _createBlock(_component_v_form, {\n              key: 0,\n              onSubmit: _withModifiers($options.submitComment, [\"prevent\"])\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_textarea, {\n                label: \"댓글 작성\",\n                modelValue: $data.newCommentContent,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newCommentContent = $event),\n                required: \"\"\n              }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_btn, {\n                type: \"submit\",\n                color: \"primary\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"댓글 등록\")]),\n                _: 1 /* STABLE */\n              })]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onSubmit\"])) : _createCommentVNode(\"v-if\", true)]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })) : _createCommentVNode(\"v-if\", true)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_card_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          color: \"primary\",\n          onClick: $options.goBack\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"목록으로 돌아가기\")]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })) : $data.error ? (_openBlock(), _createBlock(_component_v_alert, {\n      key: 1,\n      type: \"error\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.error), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    })) : (_openBlock(), _createBlock(_component_v_progress_circular, {\n      key: 2,\n      indeterminate: \"\",\n      color: \"primary\"\n    })), _createCommentVNode(\" 게시글 삭제 확인 다이얼로그 \"), _createVNode(_component_v_dialog, {\n      modelValue: $data.deleteDialog,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.deleteDialog = $event),\n      \"max-width\": \"500px\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card, null, {\n        default: _withCtx(() => [_createVNode(_component_v_card_title, {\n          class: \"headline\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"게시글 삭제\")]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_createTextVNode(\"게시글을 정말 삭제하시겠습니까?\")]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_actions, null, {\n          default: _withCtx(() => [_createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n            color: \"primary\",\n            text: \"\",\n            onClick: _cache[1] || (_cache[1] = $event => $data.deleteDialog = false)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"취소\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_btn, {\n            color: \"error\",\n            text: \"\",\n            onClick: $options.deletePost\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"삭제\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"])]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"]), _createCommentVNode(\" 신고 모달 창 \"), $data.showReportModal ? (_openBlock(), _createBlock(_component_ReportCreate, {\n      key: 3,\n      postId: $data.reportData.postId,\n      postTitle: $data.reportData.postTitle,\n      postContent: $data.reportData.postContent,\n      authorEmail: $data.reportData.authorEmail,\n      postCategory: $data.reportData.postCategory,\n      commentId: $data.reportData.commentId,\n      commentContent: $data.reportData.commentContent,\n      commentAuthor: $data.reportData.commentAuthor,\n      onClose: $options.closeReportModal\n    }, null, 8 /* PROPS */, [\"postId\", \"postTitle\", \"postContent\", \"authorEmail\", \"postCategory\", \"commentId\", \"commentContent\", \"commentAuthor\", \"onClose\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createElementVNode","_createBlock","_component_v_container","class","default","_withCtx","$data","post","_component_v_card","key","_createVNode","_component_v_card_title","_toDisplayString","title","_component_v_spacer","$options","canEditPost","_component_v_btn","color","onClick","editPost","_createTextVNode","_","_createCommentVNode","canDeletePost","confirmDeletePost","openPostReportModal","_component_v_card_text","_component_v_row","_component_v_col","cols","_hoisted_1","nickname","_hoisted_2","formatDate","createdTime","imageUrl","_component_v_img","src","alt","_hoisted_3","content","isFreeBoard","_component_v_divider","_hoisted_4","_component_v_list","_createElementBlock","_Fragment","_renderList","comments","comment","_component_v_list_item","id","_component_v_list_item_content","_component_v_list_item_title","_component_v_list_item_subtitle","isAdmin","user_id","parseInt","userId","_component_v_list_item_action","icon","$event","deleteComment","_component_v_icon","openCommentReportModal","isLoggedIn","_component_v_form","onSubmit","_withModifiers","submitComment","_component_v_textarea","label","modelValue","newCommentContent","_cache","required","type","_component_v_card_actions","goBack","error","_component_v_alert","_component_v_progress_circular","indeterminate","_component_v_dialog","deleteDialog","text","deletePost","showReportModal","_component_ReportCreate","postId","reportData","postTitle","postContent","authorEmail","postCategory","commentId","commentContent","commentAuthor","onClose","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card v-if=\"post\">\n      <v-card-title>\n        <h3>{{ post.title }}</h3>\n        <v-spacer></v-spacer>\n        <v-btn v-if=\"canEditPost\" color=\"warning\" @click=\"editPost\">수정</v-btn>\n        <v-btn v-if=\"canDeletePost\" color=\"error\" @click=\"confirmDeletePost\">삭제</v-btn>\n        <v-btn color=\"secondary\" @click=\"openPostReportModal\">신고하기</v-btn>\n      </v-card-title>\n\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\">\n            <p><strong>작성자:</strong> {{ post.nickname }}</p>\n            <p><strong>작성일:</strong> {{ formatDate(post.createdTime) }}</p>\n            <v-img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Post Image\" max-width=\"400\" class=\"my-3\"/>\n            <p><strong>내용:</strong></p>\n            <p>{{ post.content }}</p>\n          </v-col>\n        </v-row>\n\n        <!-- 자유게시판일 때만 댓글 섹션을 표시 -->\n        <v-row v-if=\"isFreeBoard\">\n          <v-col cols=\"12\">\n            <v-divider class=\"my-3\"></v-divider>\n            <h4>댓글</h4>\n            <v-list>\n              <v-list-item v-for=\"comment in comments\" :key=\"comment.id\">\n                <v-list-item-content>\n                  <v-list-item-title>{{ comment.nickname }} ({{ formatDate(comment.createdTime) }})</v-list-item-title>\n                  <v-list-item-subtitle>{{ comment.content }}</v-list-item-subtitle>\n                </v-list-item-content>\n                <v-list-item-action v-if=\"isAdmin || comment.user_id === parseInt(userId, 10)\">\n                  <v-btn icon @click=\"deleteComment(comment.id)\">\n                    <v-icon>mdi-delete</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n                <v-list-item-action>\n                  <v-btn icon @click=\"openCommentReportModal(comment)\">\n                    <v-icon>mdi-alert-circle-outline</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n              </v-list-item>\n            </v-list>\n\n            <v-form v-if=\"isLoggedIn\" @submit.prevent=\"submitComment\">\n              <v-textarea label=\"댓글 작성\" v-model=\"newCommentContent\" required />\n              <v-btn type=\"submit\" color=\"primary\">댓글 등록</v-btn>\n            </v-form>\n          </v-col>\n        </v-row>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-btn color=\"primary\" @click=\"goBack\">목록으로 돌아가기</v-btn>\n      </v-card-actions>\n    </v-card>\n\n    <v-alert type=\"error\" v-else-if=\"error\">{{ error }}</v-alert>\n    <v-progress-circular v-else indeterminate color=\"primary\"></v-progress-circular>\n\n    <!-- 게시글 삭제 확인 다이얼로그 -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title class=\"headline\">게시글 삭제</v-card-title>\n        <v-card-text>게시글을 정말 삭제하시겠습니까?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"deleteDialog = false\">취소</v-btn>\n          <v-btn color=\"error\" text @click=\"deletePost\">삭제</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 신고 모달 창 -->\n    <ReportCreate \n      v-if=\"showReportModal\" \n      :postId=\"reportData.postId\" \n      :postTitle=\"reportData.postTitle\" \n      :postContent=\"reportData.postContent\" \n      :authorEmail=\"reportData.authorEmail\" \n      :postCategory=\"reportData.postCategory\" \n      :commentId=\"reportData.commentId\" \n      :commentContent=\"reportData.commentContent\" \n      :commentAuthor=\"reportData.commentAuthor\" \n      @close=\"closeReportModal\" \n    />\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\n\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null, \n      isAdmin: false, // 관리자인지 여부\n      comments: [], // 댓글 목록\n      newCommentContent: '', // 새로운 댓글 내용\n      isLoggedIn: false, // 로그인 여부\n      isFreeBoard: false, // 자유게시판 여부\n      showReportModal: false, // 신고 모달 창 표시 여부\n      reportData: {}, // 신고 모달에 전달할 데이터\n      userId: localStorage.getItem('userId'), // 로그인된 사용자의 ID\n      deleteDialog: false, // 삭제 확인 다이얼로그 표시 여부\n      error: null, // 에러 메시지\n      userEmail: '', // 현재 로그인한 사용자의 이메일\n    };\n  },\n  computed: {\n    canEditPost() {\n      // 관리자는 모든 게시글을 수정 가능, 'post' 카테고리는 작성자도 수정 가능\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    },\n    canDeletePost() {\n      // 관리자는 모든 게시글을 삭제 가능, 'post' 카테고리는 작성자도 삭제 가능\n      console.log(this.post.userEmail);\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail();\n\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n        // console.log(this.userEmail)\n      } else {\n        this.$router.push('/login'); // 토큰이 없으면 로그인 페이지로 이동\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(\n          atob(base64)\n            .split('')\n            .map(function(c) {\n              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n        );\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        commentId: comment.id,\n        commentContent: comment.content,\n        commentAuthor: comment.nickname,\n        postTitle: this.post.title,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 800px;\n  margin: 0 auto;\n}\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}