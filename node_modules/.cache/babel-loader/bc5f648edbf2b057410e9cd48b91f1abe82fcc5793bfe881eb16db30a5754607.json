{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      selectedSubject: null,\n      subjects: [],\n      // 강좌 목록을 저장할 배열\n      questionTitle: '',\n      questionText: '',\n      questionImage: null,\n      previewImageSrc: null\n    };\n  },\n  mounted() {\n    this.fetchSubjects(); // 컴포넌트가 마운트될 때 강좌 목록을 불러옵니다.\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = Array.isArray(response.data) ? response.data : []; // 데이터가 배열인지 확인 후 할당\n        console.log(response);\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n        this.subjects = []; // 오류 시 빈 배열로 초기화\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.questionImage = files[0];\n        this.previewImage();\n      } else {\n        this.questionImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.questionImage) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.questionImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitQuestion() {\n      if (!this.selectedSubject) {\n        alert('강좌를 선택해주세요.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('title', this.questionTitle);\n      formData.append('questionText', this.questionText);\n      formData.append('subjectId', this.selectedSubject); // 선택한 강좌 ID를 추가\n      if (this.questionImage) {\n        formData.append('image', this.questionImage);\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response);\n        alert('질문이 성공적으로 등록되었습니다!');\n        this.$router.push({\n          name: 'QnaList'\n        });\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : '질문 등록에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","selectedSubject","subjects","questionTitle","questionText","questionImage","previewImageSrc","mounted","fetchSubjects","methods","response","get","process","env","VUE_APP_API_BASE_URL","Array","isArray","console","log","error","onFileChange","event","files","target","dataTransfer","length","previewImage","reader","FileReader","onload","e","result","readAsDataURL","submitQuestion","alert","formData","FormData","append","post","headers","$router","push","name","errorMessage","message"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/CreateQuestion.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card>\n      <v-card-title>\n        <h3>QnA 질문 등록하기</h3>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" @submit.prevent=\"submitQuestion\">\n          <!-- 강좌 선택 -->\n          <v-select\n            v-model=\"selectedSubject\"\n            :items=\"subjects\"\n            item-text=\"title\"\n            item-value=\"id\"\n            label=\"강좌 선택\"\n            required\n          ></v-select>\n\n          <!-- 질문 제목 -->\n          <v-text-field\n            label=\"제목\"\n            v-model=\"questionTitle\"\n            required\n          />\n\n          <!-- 질문 내용 -->\n          <v-textarea\n            label=\"질문 내용\"\n            v-model=\"questionText\"\n            rows=\"5\"\n            required\n          />\n\n          <!-- 질문 이미지 (선택사항) -->\n          <v-file-input\n            ref=\"fileInput\"\n            @change=\"onFileChange\"\n            label=\"질문 이미지 (선택사항)\"\n            accept=\"image/*\"\n          />\n          <v-img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" max-width=\"200\" class=\"my-3\"/>\n\n          <v-btn type=\"submit\" color=\"primary\" class=\"mt-3\">질문 제출</v-btn>\n        </v-form>\n      </v-card-text>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      selectedSubject: null,\n      subjects: [], // 강좌 목록을 저장할 배열\n      questionTitle: '',\n      questionText: '',\n      questionImage: null,\n      previewImageSrc: null,\n    };\n  },\n  mounted() {\n    this.fetchSubjects(); // 컴포넌트가 마운트될 때 강좌 목록을 불러옵니다.\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = Array.isArray(response.data) ? response.data : []; // 데이터가 배열인지 확인 후 할당\n        console.log(response)\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n        this.subjects = []; // 오류 시 빈 배열로 초기화\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.questionImage = files[0];\n        this.previewImage();\n      } else {\n        this.questionImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.questionImage) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.questionImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitQuestion() {\n      if (!this.selectedSubject) {\n        alert('강좌를 선택해주세요.');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append('title', this.questionTitle);\n      formData.append('questionText', this.questionText);\n      formData.append('subjectId', this.selectedSubject); // 선택한 강좌 ID를 추가\n      if (this.questionImage) {\n        formData.append('image', this.questionImage);\n      }\n\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_BASE_URL}/qna/create`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n        console.log(response);\n        alert('질문이 성공적으로 등록되었습니다!');\n        this.$router.push({ name: 'QnaList' });\n      } catch (error) {\n        const errorMessage =\n          error.response && error.response.data\n            ? error.response.data.message\n            : '질문 등록에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 600px;\n  margin: auto;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}