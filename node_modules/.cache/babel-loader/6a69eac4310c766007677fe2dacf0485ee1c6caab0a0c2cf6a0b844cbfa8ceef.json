{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a09f8938\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"board-detail-container\"\n};\nconst _hoisted_2 = {\n  class: \"board-detail-title\"\n};\nconst _hoisted_3 = {\n  class: \"board-detail-info\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"board-detail-image\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"board-detail-content\"\n};\nconst _hoisted_7 = {\n  class: \"board-detail-actions\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"comments-section\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"댓글\", -1 /* HOISTED */));\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.post.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", null, \"작성자: \" + _toDisplayString($data.post.nickname), 1 /* TEXT */), _createElementVNode(\"span\", null, \"작성일: \" + _toDisplayString($options.formatDate($data.post.createdTime)), 1 /* TEXT */)]), $data.post.imageUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [$data.post.imageUrl ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $data.post.imageUrl,\n    alt: \"Post Image\"\n  }, null, 8 /* PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"p\", null, _toDisplayString($data.post.content), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \"목록으로 돌아가기\"), $data.isAdmin ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.editPost && $options.editPost(...args))\n  }, \"수정\")) : _createCommentVNode(\"v-if\", true), $data.isAdmin ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.deletePost && $options.deletePost(...args))\n  }, \"삭제\")) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 자유게시판일 때만 댓글 섹션을 표시 \"), $data.isFreeBoard ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: comment.id\n    }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(comment.nickname), 1 /* TEXT */), _createTextVNode(\": \" + _toDisplayString(comment.content), 1 /* TEXT */)]), _createElementVNode(\"small\", null, _toDisplayString($options.formatDate(comment.createdTime)), 1 /* TEXT */), $data.isAdmin ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.deleteComment(comment.id)\n    }, \"삭제\", 8 /* PROPS */, _hoisted_10)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 관리자만 삭제 가능 \")]);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.isLoggedIn ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.newCommentContent = $event),\n    placeholder: \"댓글을 작성하세요\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newCommentContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.submitComment && $options.submitComment(...args))\n  }, \"댓글 작성\")])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","post","title","_hoisted_3","nickname","$options","formatDate","createdTime","imageUrl","_hoisted_4","src","alt","_hoisted_5","_createCommentVNode","_hoisted_6","content","_hoisted_7","onClick","_cache","args","goBack","isAdmin","editPost","deletePost","isFreeBoard","_hoisted_8","_hoisted_9","_Fragment","_renderList","comments","comment","id","_createTextVNode","$event","deleteComment","_hoisted_10","isLoggedIn","_hoisted_11","newCommentContent","placeholder","submitComment"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"board-detail-container\">\n    <h1 class=\"board-detail-title\">{{ post.title }}</h1>\n    <div class=\"board-detail-info\">\n      <span>작성자: {{ post.nickname }}</span>\n      <span>작성일: {{ formatDate(post.createdTime) }}</span>\n    </div>\n    <div v-if=\"post.imageUrl\" class=\"board-detail-image\">\n      <img :src=\"post.imageUrl\" alt=\"Post Image\" v-if=\"post.imageUrl\" />\n    </div>\n    <div class=\"board-detail-content\">\n      <p>{{ post.content }}</p>\n    </div>\n    <div class=\"board-detail-actions\">\n      <button @click=\"goBack\">목록으로 돌아가기</button>\n      <button v-if=\"isAdmin\" @click=\"editPost\">수정</button>\n      <button v-if=\"isAdmin\" @click=\"deletePost\">삭제</button>\n    </div>\n    \n    <!-- 자유게시판일 때만 댓글 섹션을 표시 -->\n    <div v-if=\"isFreeBoard\" class=\"comments-section\">\n      <h2>댓글</h2>\n      <ul>\n        <li v-for=\"comment in comments\" :key=\"comment.id\">\n          <p><strong>{{ comment.nickname }}</strong>: {{ comment.content }}</p>\n          <small>{{ formatDate(comment.createdTime) }}</small>\n          <button v-if=\"isAdmin\" @click=\"deleteComment(comment.id)\">삭제</button> <!-- 관리자만 삭제 가능 -->\n        </li>\n      </ul>\n\n      <div v-if=\"isLoggedIn\">\n        <textarea v-model=\"newCommentContent\" placeholder=\"댓글을 작성하세요\"></textarea>\n        <button @click=\"submitComment\">댓글 작성</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      post: {}, // 게시글 데이터를 저장할 객체\n      isAdmin: false, // 관리자인지 여부\n      comments: [], // 댓글 목록\n      newCommentContent: '', // 새로운 댓글 내용\n      isLoggedIn: false, // 로그인 여부\n      nickname: '', // 현재 사용자 닉네임\n      isFreeBoard: false, // 자유게시판 여부\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail(); // 컴포넌트가 생성될 때 게시글 상세 정보를 가져옴\n\n    if (this.isFreeBoard) {\n      this.fetchComments(); // 자유게시판일 때만 댓글 목록 가져오기\n    }\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    checkLoginStatus() {\n      // 로그인 상태와 현재 사용자 이메일을 확인하는 로직\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n      this.userEmail = localStorage.getItem('email'); // 로그인된 사용자의 이메일\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post'; // 'post'를 자유게시판 카테고리로 간주\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const category = this.$route.params.category;\n\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result; // 서버에서 받아온 데이터를 post 객체에 저장\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result; // 서버에서 받아온 댓글 목록을 comments 배열에 저장\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n    try {\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');  // 로컬 스토리지에서 userId를 가져옵니다.\n        const newComment = {\n            content: this.newCommentContent,\n            postId: postId,\n            userId: userId  // userId를 포함시킵니다.\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = ''; // 입력 필드 초기화\n        this.fetchComments(); // 댓글 목록 새로고침\n    } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n    }\n},\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments(); // 댓글 목록 새로고침\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack(); // 삭제 후 목록으로 돌아가기\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-detail-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-detail-title {\n  font-size: 32px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-detail-info {\n  font-size: 14px;\n  color: #777;\n  margin-bottom: 20px;\n}\n\n.board-detail-image {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.board-detail-image img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 8px;\n}\n\n.board-detail-content {\n  font-size: 18px;\n  line-height: 1.6;\n  margin-bottom: 40px;\n}\n\n.board-detail-actions {\n  text-align: right;\n}\n\n.board-detail-actions button {\n  padding: 10px 20px;\n  margin-left: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.board-detail-actions button:hover {\n  background-color: #0056b3;\n}\n\n.comments-section {\n  margin-top: 40px;\n}\n\n.comments-section h2 {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n.comments-section ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.comments-section li {\n  margin-bottom: 20px;\n}\n\n.comments-section textarea {\n  width: 100%;\n  height: 100px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.comments-section button {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.comments-section button:hover {\n  background-color: #218838;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}