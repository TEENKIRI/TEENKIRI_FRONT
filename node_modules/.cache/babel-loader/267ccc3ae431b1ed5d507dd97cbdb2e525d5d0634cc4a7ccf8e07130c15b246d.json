{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, withKeys as _withKeys, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6f352605\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"message-input-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"topic-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_ReportCreate = _resolveComponent(\"ReportCreate\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, {\n    class: \"chat-container\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_btn, {\n      icon: \"\",\n      onClick: $options.closeChat,\n      class: \"close-button\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\"mdi-close\")]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_list, {\n      class: \"chat-box\"\n    }, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredMessages, message => {\n        return _openBlock(), _createBlock(_component_v_list_item, {\n          key: message.id,\n          class: _normalizeClass([{\n            'my-message': $options.isMyMessage(message),\n            'other-message': !$options.isMyMessage(message)\n          }, \"message-item\"])\n        }, {\n          default: _withCtx(() => [!$options.isMyMessage(message) ? (_openBlock(), _createBlock(_component_v_btn, {\n            key: 0,\n            icon: \"\",\n            small: \"\",\n            class: \"report-button\",\n            onClick: $event => $options.reportMessage(message)\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_icon, {\n              small: \"\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"mdi-alarm-light-outline\")]),\n              _: 1 /* STABLE */\n            })]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_list_item_content, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.senderNickname), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, {\n              class: \"message-content\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($options.filterMessage(message.content)), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, {\n              class: _normalizeClass(['message-timestamp', {\n                'left-align': !$options.isMyMessage(message.senderId)\n              }])\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($options.formatTime(message.createdTime)), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\"])]),\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"class\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_v_text_field, {\n      modelValue: $data.newMessage,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n      label: \"메시지를 입력하세요...\",\n      \"hide-details\": \"\",\n      dense: \"\",\n      class: \"message-input\",\n      onKeyup: _withKeys($options.sendMessage, [\"enter\"])\n    }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"]), _createVNode(_component_v_btn, {\n      onClick: $options.sendMessage,\n      class: \"send-button\",\n      color: \"primary\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"전송\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.topics, topic => {\n      return _openBlock(), _createBlock(_component_v_btn, {\n        key: topic,\n        onClick: $event => $options.subscribeToTopic(topic),\n        class: _normalizeClass([{\n          'selected-topic': $data.selectedTopic === topic\n        }, \"topic-button\"])\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.topicNames[topic]), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\", \"class\"]);\n    }), 128 /* KEYED_FRAGMENT */))]), $data.showReportModal ? (_openBlock(), _createBlock(_component_ReportCreate, {\n      key: 0,\n      chatMessageId: $data.selectedChatMessageId,\n      onClose: $options.closeReportModal\n    }, null, 8 /* PROPS */, [\"chatMessageId\", \"onClose\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","_createBlock","_component_v_container","default","_withCtx","_createVNode","_component_v_btn","icon","onClick","$options","closeChat","_component_v_icon","_createTextVNode","_","_component_v_list","_createElementBlock","_Fragment","_renderList","filteredMessages","message","_component_v_list_item","key","id","_normalizeClass","isMyMessage","small","$event","reportMessage","_createCommentVNode","_component_v_list_item_content","_component_v_list_item_title","_toDisplayString","senderNickname","_component_v_list_item_subtitle","filterMessage","content","senderId","formatTime","createdTime","_createElementVNode","_hoisted_1","_component_v_text_field","modelValue","$data","newMessage","_cache","label","dense","onKeyup","_withKeys","sendMessage","color","_hoisted_2","topics","topic","subscribeToTopic","selectedTopic","topicNames","showReportModal","_component_ReportCreate","chatMessageId","selectedChatMessageId","onClose","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <v-btn icon @click=\"closeChat\" class=\"close-button\">\n      <v-icon>mdi-close</v-icon>\n    </v-btn>\n\n    <v-list class=\"chat-box\">\n      <v-list-item\n        v-for=\"message in filteredMessages\"\n        :key=\"message.id\"\n        :class=\"{\n          'my-message': isMyMessage(message),\n          'other-message': !isMyMessage(message)\n        }\"\n        class=\"message-item\"\n      >\n        <v-btn\n          v-if=\"!isMyMessage(message)\"\n          icon\n          small\n          class=\"report-button\"\n          @click=\"reportMessage(message)\"\n        >\n          <v-icon small>mdi-alarm-light-outline</v-icon>\n        </v-btn>\n        <v-list-item-content>\n          <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n          <v-list-item-subtitle class=\"message-content\">\n            {{ filterMessage(message.content) }}\n          </v-list-item-subtitle>\n          <v-list-item-subtitle\n            :class=\"['message-timestamp', { 'left-align': !isMyMessage(message.senderId) }]\"\n          >\n            {{ formatTime(message.createdTime) }}\n          </v-list-item-subtitle>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n\n    <div class=\"message-input-wrapper\">\n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        hide-details\n        dense\n        class=\"message-input\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n      <v-btn @click=\"sendMessage\" class=\"send-button\" color=\"primary\">전송</v-btn>\n    </div>\n\n    <div class=\"topic-buttons\">\n      <v-btn\n        v-for=\"topic in topics\"\n        :key=\"topic\"\n        @click=\"subscribeToTopic(topic)\"\n        :class=\"{ 'selected-topic': selectedTopic === topic }\"\n        class=\"topic-button\"\n      >\n        {{ topicNames[topic] }}\n      </v-btn>\n    </div>\n\n    <ReportCreate\n      v-if=\"showReportModal\"\n      :chatMessageId=\"selectedChatMessageId\"\n      @close=\"closeReportModal\"\n    />\n  </v-container>\n</template>\n\n<script>\nimport ReportCreate from '@/views/report/ReportCreate.vue';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      email: localStorage.getItem('email'),  \n      userId: localStorage.getItem('userId'),\n      nickname: localStorage.getItem('nickname'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n      topics: [\n        '/topic/korean',\n        '/topic/english',\n        '/topic/math',\n        '/topic/social',\n        '/topic/science'\n      ],\n      topicNames: {\n        '/topic/korean': '국어',\n        '/topic/english': '영어',\n        '/topic/math': '수학',\n        '/topic/social': '사회',\n        '/topic/science': '과학'\n      },\n      selectedTopic: '/topic/korean',\n      forbiddenWords: []\n    };\n  },\n  computed: {\n    filteredMessages() {\n      const currentChannel = this.selectedTopic.replace('/topic/', '');\n      return this.messages.filter(message => message.channel === currentChannel);\n    }\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n    this.loadForbiddenWords();\n\n    this.$nextTick(() => {\n      this.scrollToBottom();\n    });\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(\n          `${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`,\n          {\n            params: { since: this.loginTime }\n          }\n        );\n        this.messages = response.data;\n        this.scrollToBottom();\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    async loadForbiddenWords() {\n      try {\n        const response = await axios.get('/badwords.txt');\n        this.forbiddenWords = response.data\n          .split('\\n')\n          .map(word => word.trim())\n          .filter(word => word);\n        console.log('Loaded forbidden words:', this.forbiddenWords);\n      } catch (error) {\n        console.error('금지된 단어를 로드하는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect(\n        {},\n        frame => {\n          console.log('Connected: ' + frame);\n          this.subscribeToTopic(this.selectedTopic);\n        },\n        error => {\n          console.error('웹소켓 연결 실패:', error);\n        }\n      );\n    },\n    subscribeToTopic(topic) {\n      if (this.stompClient) {\n        this.stompClient.unsubscribe(this.selectedTopic);\n        this.selectedTopic = topic;\n        this.stompClient.subscribe(`/topic/${this.selectedTopic.replace('/topic/', '')}`, message => {\n          const receivedMessage = JSON.parse(message.body);\n          this.messages.push(receivedMessage);\n          this.scrollToBottom();  // 스크롤을 맨 아래로 이동\n        });\n      }\n    },\n    filterMessage(content) {\n      this.forbiddenWords.forEach(word => {\n        const regex = new RegExp(\n          word\n            .split('')\n            .map(char => `[${char}]+[^\\\\w\\\\s]*`)\n            .join(''),\n          'gi'\n        );\n        content = content.replace(regex, '*'.repeat(word.length));\n      });\n      return content;\n    },\n    sendMessage() {\n      if (!this.email) {\n        console.error('Email is not available');\n        return;\n      }\n\n      const channel = this.selectedTopic.replace('/topic/', '');\n      if (!channel) {\n        console.error('Channel is not set.');\n        alert('채널이 설정되지 않았습니다.');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const filteredContent = this.filterMessage(this.newMessage);\n        const message = {\n          content: filteredContent,\n          senderId: this.userId,\n          email: this.email,  // email을 메시지에 포함시킵니다.\n          channel: channel,\n          senderNickname: this.nickname,\n        };\n\n        // 서버로 메시지 전송\n        this.stompClient.send(`/app/chat.sendMessage`, {}, JSON.stringify(message));\n\n        this.newMessage = '';\n        this.scrollToBottom();\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBox = this.$el.querySelector('.chat-box');\n        if (chatBox) {\n          chatBox.scrollTop = chatBox.scrollHeight;\n        }\n      });\n    },\n    isMyMessage(message) {  \n        if (!message || typeof message.email === 'undefined') {\n            console.error('Message object or email is undefined:', message);\n            return false; \n        }\n        return message.email === this.email; \n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log('Chat closed');\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate,\n  }\n};\n</script>\n\n\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 800px;\n  width: 550px;\n  margin: 20px auto;\n  background: #f9f9f9;\n  border-radius: 8px;\n  overflow: hidden;\n  padding: 7px;\n  position: relative;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.chat-box {\n  flex-grow: 1;\n  padding: 10px;\n  background: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.message-item {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n}\n\n.report-button {\n  position: absolute;\n  right: -30px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 40px;\n  height: 20px;\n  font-size: 14px;\n  color: #f44336;\n}\n\n.message-input-wrapper {\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  background: #f9f9f9;\n  margin-bottom: 0px;\n}\n\n.message-input {\n  flex-grow: 1;\n  border: none;\n  padding: 10px;\n  margin-right: 10px;\n  height: 40px;\n  background: #f9f9f9;\n}\n\n.send-button {\n  width: auto;\n  height: 40px;\n  padding: 0 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-width: 50%;\n}\n\n.message-content {\n  font-size: 1rem;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  word-break: break-word;\n  max-width: 100%;\n}\n\n.my-message {\n  background-color: #ffeb3b;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #e5f1fb;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.message-sender {\n  font-size: 0.8em;\n  color: gray;\n  margin-bottom: 5px;\n}\n\n.message-timestamp {\n  font-size: 0.8em;\n  color: gray;\n  margin-top: 5px;\n  text-align: right;\n}\n\n.left-align {\n  text-align: left !important;\n  padding-left: 0;\n  margin-left: 0;\n}\n\n.topic-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding: 10px 0;\n  margin-top: 50px;\n  margin-bottom: 0px;\n  background: #f9f9f9;\n}\n\n.topic-button {\n  min-width: 80px;\n}\n\n.selected-topic {\n  background-color: #3f51b5 !important;\n  color: white !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}