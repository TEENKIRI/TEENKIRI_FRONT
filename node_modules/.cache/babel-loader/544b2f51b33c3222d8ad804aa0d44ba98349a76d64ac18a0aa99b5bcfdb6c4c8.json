{"ast":null,"code":"// import VideoPlayer from '@/components/Lecture/videoPlayer.vue';\nimport axios from \"axios\";\nimport videojs from \"video.js\";\nexport default {\n  // name: 'VideoExample',\n  name: \"VideoPlayer\",\n  // components: {\n  //   VideoPlayer\n  // },\n  data() {\n    return {\n      user: {\n        token: \"\",\n        id: \"\",\n        email: \"\"\n      },\n      lectureId: \"\",\n      lectureData: {},\n      // 영상 진행률 체크를 위한 코드\n      isVideoPlay: false,\n      currentVideoTime: 0,\n      mostWatchedTime: 0,\n      userProgress: 0,\n      // 유저 진행률 표시용\n\n      player: null,\n      videoOptions: {\n        autoplay: true,\n        controls: true,\n        sources: [{\n          src: \"\",\n          type: \"video/mp4\"\n        }]\n      },\n      // 인터벌 ID를 저장할 변수\n      checkInterval: null,\n      updateUserProgressInterval: null\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      }\n      this.lectureId = this.$route.params.id;\n\n      // 강의 세부 정보를 가져옵니다.\n      await this.getLectureDetail();\n\n      // 강의 세부 정보에서 비디오 URL을 설정하고 VideoPlayer 컴포넌트를 렌더링합니다.\n      this.setLectureDetail();\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n  },\n  mounted() {\n    // player를 초기화합니다.\n    this.initPlayer();\n  },\n  watch: {\n    \"videoOptions.sources\": {\n      handler(newSources) {\n        const newSrc = newSources[0].src;\n        if (newSrc) {\n          if (this.player) {\n            this.player.src(newSrc);\n          } else {\n            this.initPlayer();\n          }\n        }\n      },\n      deep: true // 깊은 변경 감지\n    }\n  },\n  methods: {\n    async getLectureDetail() {\n      console.log(\"강의 불러오기\");\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/lecture/detail/${this.lectureId}`);\n        const additionalData = response.data.result;\n        this.lectureData = additionalData;\n\n        // 시간용 변수 적용\n        this.mostWatchedTime = this.lectureData.userLectureDuration;\n        if (this.lectureData.isCompleted) {\n          this.currentVideoTime = 0; //이미 시청이 완료된 경우는처음부터 다시 시청\n        } else {\n          this.currentVideoTime = this.lectureData.userLectureDuration;\n        }\n        this.updateUserProgress(); // 유저 표시용도의 퍼센트 계산\n\n        // lectureData에서 videoUrl을 가져와 videoOptions를 업데이트합니다.\n        this.videoOptions.sources[0].src = this.lectureData.videoUrl;\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(\"수강신청이 되지 않았습니다.\");\n          history.go(-1);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n    setLectureDetail() {\n      // videoOptions가 업데이트된 후 loadVideo를 true로 설정하여 VideoPlayer를 렌더링합니다.\n      this.loadVideo = true;\n    },\n    initPlayer() {\n      if (this.videoOptions.sources[0].src) {\n        this.player = videojs(this.$refs.videoPlayer, this.videoOptions, () => {\n          // 영상 시작 시간을 설정하는 이벤트\n          this.player.on(\"loadstart\", () => {\n            this.setStartTime();\n          });\n\n          // 영상이 시작될 때\n          this.player.on(\"play\", () => {\n            this.onVideoPlay();\n          });\n\n          // 영상이 일시정지될 때\n          this.player.on(\"pause\", () => {\n            this.onVideoPause();\n          });\n\n          // 영상이 끝날 때\n          this.player.on(\"ended\", () => {\n            this.onVideoEnded();\n          });\n        });\n      }\n    },\n    setStartTime() {\n      // 영상의 시작 시간을 설정\n      this.player.currentTime(this.currentVideoTime);\n      console.log(\"영상의 시작 시간이 설정되었습니다.\");\n    },\n    onVideoPlay() {\n      console.log(\"영상이 시작되었습니다.\");\n      if (!this.lectureData.isCompleted) {\n        //시청 완료가 false인 경우만 check 시작\n        this.checkInterval = setInterval(() => {\n          // 3초마다 플레이된 시간 체크 시작\n          this.checkPlayTime();\n        }, 3000);\n        this.updateUserProgressInterval = setInterval(() => {\n          this.updateUserProgress();\n        }, 1000);\n      }\n    },\n    onVideoPause() {\n      console.log(\"영상이 일시정지되었습니다.\");\n      // 3초마다 플레이된 시간 체크 중지\n      if (this.checkInterval) {\n        clearInterval(this.checkInterval);\n        this.checkInterval = null;\n      }\n\n      // 퍼센트 계산하던 것 체크 중지\n      if (this.updateUserProgressInterval) {\n        clearInterval(this.updateUserProgressInterval);\n        this.updateUserProgressInterval = null;\n      }\n    },\n    onVideoEnded() {\n      console.log(\"영상이 끝났습니다.\");\n      if (!this.lectureData.isCompleted) {\n        //기존에 시청완료가 되지 않았던 것만 보냄\n        this.currentVideoTime = this.lectureData.videoDuration;\n        this.updateUserProgress(); //완료된 것을 통해 100%로 다시 진행률 업데이트\n        this.postUserVideoEndedStatus(); // 비디오 끝 함수 호츨\n      }\n      clearInterval(this.checkInterval); // 영상이 끝나면 인터벌을 정리합니다.\n      clearInterval(this.updateUserProgressInterval); // 영상이 끝나면 인터벌을 정리합니다.\n    },\n    checkPlayTime() {\n      this.currentVideoTime = Math.floor(this.player.currentTime()); // 소수점 내림으로 고정. (비디오 전체시간때문에!)\n      this.postUserDurationVideoTime();\n      console.log(\"현재 플레이된 시간: \", this.currentVideoTime, \"초\");\n    },\n    updateUserProgress() {\n      let progressTime = this.currentVideoTime;\n      if (this.currentVideoTime <= this.mostWatchedTime) {\n        progressTime = this.mostWatchedTime;\n      }\n      const percentage = progressTime / this.lectureData.videoDuration * 100; //현재 시간을 기준으로 퍼센트 계산\n      let roundPercent = Math.round(percentage * 10) / 10; // 소수점 첫 번째 자리까지만 존재하도록 반올림\n      roundPercent = roundPercent >= 100 && !this.lectureData.isCompleted ? 99 : roundPercent >= 100 ? 100 : roundPercent; // isCompleted true 여야 100\n      this.userProgress = roundPercent;\n    },\n    async postUserDurationVideoTime() {\n      if (this.currentVideoTime >= this.mostWatchedTime) {\n        try {\n          const userLectureDuration = {\n            userLectureDuration: this.currentVideoTime\n          };\n          const response = await axios.patch(`${process.env.VUE_APP_API_BASE_URL}/enroll/update/duration/${this.lectureData.enrollmentId}`, userLectureDuration);\n          console.log(\"update response:\", response); // error 해결용 log 추가\n        } catch (e) {\n          if (e.response.data.status_code === 404) {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            history.go(-1);\n          } else {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            console.error(e);\n          }\n        }\n      }\n    },\n    async postUserVideoEndedStatus() {\n      if (this.currentVideoTime > this.lectureData.videoDuration) {\n        this.currentVideoTime = this.lectureData.videoDuration; // 더 큰값이 들어가면 초기화\n      }\n      try {\n        const isCompleted = {\n          isCompleted: true\n        };\n        const response = await axios.patch(`${process.env.VUE_APP_API_BASE_URL}/enroll/update/complete/${this.lectureData.enrollmentId}`, isCompleted);\n        console.log(\"update response:\", response); // error 해결용 log 추가\n        this.lectureData.isCompleted = true;\n        this.updateUserProgress();\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          history.go(-1);\n        } else {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          console.error(e);\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n    }\n    if (this.updateUserProgressInterval) {\n      clearInterval(this.updateUserProgressInterval);\n    }\n  }\n};","map":{"version":3,"names":["axios","videojs","name","data","user","token","id","email","lectureId","lectureData","isVideoPlay","currentVideoTime","mostWatchedTime","userProgress","player","videoOptions","autoplay","controls","sources","src","type","checkInterval","updateUserProgressInterval","created","$store","dispatch","getters","getUserObj","alert","location","href","$route","params","getLectureDetail","setLectureDetail","error","console","mounted","initPlayer","watch","handler","newSources","newSrc","deep","methods","log","response","get","process","env","VUE_APP_API_BASE_URL","additionalData","result","userLectureDuration","isCompleted","updateUserProgress","videoUrl","e","status_code","history","go","loadVideo","$refs","videoPlayer","on","setStartTime","onVideoPlay","onVideoPause","onVideoEnded","currentTime","setInterval","checkPlayTime","clearInterval","videoDuration","postUserVideoEndedStatus","Math","floor","postUserDurationVideoTime","progressTime","percentage","roundPercent","round","patch","enrollmentId","status_message","beforeUnmount","dispose"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/lecture/LectureDetail.vue"],"sourcesContent":["<template>\n  <v-container>\n    <div class=\"mt-5\">\n      <h1>{{ lectureData.title }}</h1>\n      <div>\n        나의 진행률 : <span>{{ userProgress }}</span\n        >%\n        <v-progress-linear v-model=\"userProgress\" color=\"amber\" height=\"25\">\n          <template v-slot:default>\n            <strong>{{ userProgress }}%</strong>\n          </template>\n        </v-progress-linear>\n      </div>\n      <div class=\"d-flex justify-center mt-5\">\n        <video\n          ref=\"videoPlayer\"\n          class=\"video-js vjs-theme-city vjs-16-9 vjs-big-play-centered\"\n        ></video>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\n// import VideoPlayer from '@/components/Lecture/videoPlayer.vue';\nimport axios from \"axios\";\nimport videojs from \"video.js\";\n\nexport default {\n  // name: 'VideoExample',\n  name: \"VideoPlayer\",\n  // components: {\n  //   VideoPlayer\n  // },\n  data() {\n    return {\n      user: {\n        token: \"\",\n        id: \"\",\n        email: \"\",\n      },\n      lectureId: \"\",\n      lectureData: {},\n\n      // 영상 진행률 체크를 위한 코드\n      isVideoPlay: false,\n      currentVideoTime: 0,\n      mostWatchedTime: 0,\n      userProgress: 0, // 유저 진행률 표시용\n\n      player: null,\n\n      videoOptions: {\n        autoplay: true,\n        controls: true,\n        sources: [\n          {\n            src: \"\",\n            type: \"video/mp4\",\n          },\n        ],\n      },\n\n      // 인터벌 ID를 저장할 변수\n      checkInterval: null,\n      updateUserProgressInterval: null,\n    };\n  },\n  async created() {\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n\n      if (this.user.token === \"\") {\n        alert(\"로그인이 필요합니다.\");\n        location.href = -1;\n      }\n\n      this.lectureId = this.$route.params.id;\n\n      // 강의 세부 정보를 가져옵니다.\n      await this.getLectureDetail();\n\n      // 강의 세부 정보에서 비디오 URL을 설정하고 VideoPlayer 컴포넌트를 렌더링합니다.\n      this.setLectureDetail();\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n  },\n  mounted() {\n    // player를 초기화합니다.\n    this.initPlayer();\n  },\n  watch: {\n    \"videoOptions.sources\": {\n      handler(newSources) {\n        const newSrc = newSources[0].src;\n        if (newSrc) {\n          if (this.player) {\n            this.player.src(newSrc);\n          } else {\n            this.initPlayer();\n          }\n        }\n      },\n      deep: true, // 깊은 변경 감지\n    },\n  },\n  methods: {\n    async getLectureDetail() {\n      console.log(\"강의 불러오기\");\n      try {\n        const response = await axios.get(\n          `${process.env.VUE_APP_API_BASE_URL}/user/lecture/detail/${this.lectureId}`\n        );\n        const additionalData = response.data.result;\n        this.lectureData = additionalData;\n\n        // 시간용 변수 적용\n        this.mostWatchedTime = this.lectureData.userLectureDuration;\n        if (this.lectureData.isCompleted) {\n          this.currentVideoTime = 0; //이미 시청이 완료된 경우는처음부터 다시 시청\n        } else {\n          this.currentVideoTime = this.lectureData.userLectureDuration;\n        }\n        this.updateUserProgress(); // 유저 표시용도의 퍼센트 계산\n\n        // lectureData에서 videoUrl을 가져와 videoOptions를 업데이트합니다.\n        this.videoOptions.sources[0].src = this.lectureData.videoUrl;\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(\"수강신청이 되지 않았습니다.\");\n          history.go(-1);\n        } else {\n          console.error(e);\n        }\n      }\n    },\n    setLectureDetail() {\n      // videoOptions가 업데이트된 후 loadVideo를 true로 설정하여 VideoPlayer를 렌더링합니다.\n      this.loadVideo = true;\n    },\n    initPlayer() {\n      if (this.videoOptions.sources[0].src) {\n        this.player = videojs(this.$refs.videoPlayer, this.videoOptions, () => {\n          // 영상 시작 시간을 설정하는 이벤트\n          this.player.on(\"loadstart\", () => {\n            this.setStartTime();\n          });\n\n          // 영상이 시작될 때\n          this.player.on(\"play\", () => {\n            this.onVideoPlay();\n          });\n\n          // 영상이 일시정지될 때\n          this.player.on(\"pause\", () => {\n            this.onVideoPause();\n          });\n\n          // 영상이 끝날 때\n          this.player.on(\"ended\", () => {\n            this.onVideoEnded();\n          });\n        });\n      }\n    },\n    setStartTime() {\n      // 영상의 시작 시간을 설정\n      this.player.currentTime(this.currentVideoTime);\n      console.log(\"영상의 시작 시간이 설정되었습니다.\");\n    },\n    onVideoPlay() {\n      console.log(\"영상이 시작되었습니다.\");\n\n      if (!this.lectureData.isCompleted) {\n        //시청 완료가 false인 경우만 check 시작\n        this.checkInterval = setInterval(() => {\n          // 3초마다 플레이된 시간 체크 시작\n          this.checkPlayTime();\n        }, 3000);\n\n        this.updateUserProgressInterval = setInterval(() => {\n          this.updateUserProgress();\n        }, 1000);\n      }\n    },\n    onVideoPause() {\n      console.log(\"영상이 일시정지되었습니다.\");\n      // 3초마다 플레이된 시간 체크 중지\n      if (this.checkInterval) {\n        clearInterval(this.checkInterval);\n        this.checkInterval = null;\n      }\n\n      // 퍼센트 계산하던 것 체크 중지\n      if (this.updateUserProgressInterval) {\n        clearInterval(this.updateUserProgressInterval);\n        this.updateUserProgressInterval = null;\n      }\n    },\n    onVideoEnded() {\n      console.log(\"영상이 끝났습니다.\");\n      \n\n      if (!this.lectureData.isCompleted) {\n        //기존에 시청완료가 되지 않았던 것만 보냄\n        this.currentVideoTime = this.lectureData.videoDuration\n        this.updateUserProgress(); //완료된 것을 통해 100%로 다시 진행률 업데이트\n        this.postUserVideoEndedStatus(); // 비디오 끝 함수 호츨\n      }\n      clearInterval(this.checkInterval); // 영상이 끝나면 인터벌을 정리합니다.\n      clearInterval(this.updateUserProgressInterval); // 영상이 끝나면 인터벌을 정리합니다.\n    },\n    checkPlayTime() {\n      this.currentVideoTime = Math.floor(this.player.currentTime()); // 소수점 내림으로 고정. (비디오 전체시간때문에!)\n      this.postUserDurationVideoTime();\n      console.log(\"현재 플레이된 시간: \", this.currentVideoTime, \"초\");\n    },\n    updateUserProgress() {\n      let progressTime = this.currentVideoTime;\n      if (this.currentVideoTime <= this.mostWatchedTime) {\n        progressTime = this.mostWatchedTime;\n      }\n      const percentage = (progressTime / this.lectureData.videoDuration) * 100; //현재 시간을 기준으로 퍼센트 계산\n      let roundPercent = Math.round(percentage * 10) / 10; // 소수점 첫 번째 자리까지만 존재하도록 반올림\n      roundPercent =\n        roundPercent >= 100 && !this.lectureData.isCompleted\n          ? 99\n          : roundPercent >= 100\n          ? 100\n          : roundPercent; // isCompleted true 여야 100\n      this.userProgress = roundPercent;\n    },\n\n    async postUserDurationVideoTime() {\n      if (this.currentVideoTime >= this.mostWatchedTime) {\n        try {\n          const userLectureDuration = {\n            userLectureDuration: this.currentVideoTime,\n          };\n          const response = await axios.patch(\n            `${process.env.VUE_APP_API_BASE_URL}/enroll/update/duration/${this.lectureData.enrollmentId}`,\n            userLectureDuration\n          );\n          console.log(\"update response:\", response); // error 해결용 log 추가\n        } catch (e) {\n          if (e.response.data.status_code === 404) {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            history.go(-1);\n          } else {\n            alert(e.response.data.status_code.e.response.data.status_message);\n            console.error(e);\n          }\n        }\n      }\n    },\n    async postUserVideoEndedStatus() {\n      if (this.currentVideoTime > this.lectureData.videoDuration) {\n        this.currentVideoTime = this.lectureData.videoDuration; // 더 큰값이 들어가면 초기화\n      }\n      try {\n        const isCompleted = {\n          isCompleted: true,\n        };\n        const response = await axios.patch(\n          `${process.env.VUE_APP_API_BASE_URL}/enroll/update/complete/${this.lectureData.enrollmentId}`,\n          isCompleted\n        );\n        console.log(\"update response:\", response); // error 해결용 log 추가\n        this.lectureData.isCompleted = true;\n        this.updateUserProgress();\n      } catch (e) {\n        if (e.response.data.status_code === 404) {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          history.go(-1);\n        } else {\n          alert(e.response.data.status_code.e.response.data.status_message);\n          console.error(e);\n        }\n      }\n    },\n  },\n  beforeUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n    }\n\n    if (this.updateUserProgressInterval) {\n      clearInterval(this.updateUserProgressInterval);\n    }\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}