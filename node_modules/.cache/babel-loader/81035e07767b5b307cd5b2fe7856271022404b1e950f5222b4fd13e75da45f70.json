{"ast":null,"code":"// main.js는 vue 애플리케이션의 시작점\nimport { createApp } from 'vue';\nimport App from './App.vue';\n// src/router/index.js 파일의 router를 사용하겠다 선언\nimport router from '@/router/index.js';\nimport vuetify from './plugins/vuetify';\nimport '@mdi/font/css/materialdesignicons.css';\nimport axios from 'axios';\nimport \"@/assets/css/font.css\";\nimport store from './store/index.js';\n// import VueVideoPlayer from '@videojs-player/vue'\nimport 'video.js/dist/video-js.css';\nimport '@mdi/font/css/materialdesignicons.css';\n\n// createApp(App).mount('#app')\nconst app = createApp(App);\n\n// axios 요청 인터셉터를 설정하여 모든 요청에 엑세스 토큰을 요청(전역적으로 setting 됐는지 test)\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('token11111', token);\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // 해당 인터셉터 무시되고, 사용자의 본래 요청인 화면으로 라우팅\n  console.log('에러다에러에러에러');\n  return Promise.reject(error);\n});\n\n// 401응답을 받을 경우에 interceptor 통해 전역적으로 rt를 통한 at 재발급\n// 만약 rt도 401 응답을 받을 경우에 token 제거 후 login화면으로 리다이렉트\n\naxios.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    const refreshToken = localStorage.getItem('refreshToken');\n    try {\n      localStorage.removeItem('token');\n      const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/member/refresh-token`, {\n        refreshToken\n      });\n      localStorage.setItem('token', response.data.result.token);\n      window.location.reload();\n    } catch (e) {\n      localStorage.clear();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// app.use(VueVideoPlayer)\napp.use(store);\napp.use(router);\napp.use(vuetify);\napp.mount('#app');","map":{"version":3,"names":["createApp","App","router","vuetify","axios","store","app","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","error","Promise","reject","response","status","refreshToken","removeItem","post","process","env","VUE_APP_API_BASE_URL","setItem","data","result","window","location","reload","e","clear","href","mount"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/main.js"],"sourcesContent":["// main.js는 vue 애플리케이션의 시작점\nimport { createApp } from 'vue'\nimport App from './App.vue'\n// src/router/index.js 파일의 router를 사용하겠다 선언\nimport router from '@/router/index.js'\nimport vuetify from './plugins/vuetify';\nimport '@mdi/font/css/materialdesignicons.css';\nimport axios from 'axios';\nimport \"@/assets/css/font.css\";\nimport store from './store/index.js';\n// import VueVideoPlayer from '@videojs-player/vue'\nimport 'video.js/dist/video-js.css'\n\nimport '@mdi/font/css/materialdesignicons.css';\n\n\n// createApp(App).mount('#app')\nconst app = createApp(App);\n\n\n// axios 요청 인터셉터를 설정하여 모든 요청에 엑세스 토큰을 요청(전역적으로 setting 됐는지 test)\naxios.interceptors.request.use(\n    config => {\n        const token = localStorage.getItem('token');\n        console.log('token11111',token)\n        if(token){\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n        return config;\n    },\n    error => {\n        // 해당 인터셉터 무시되고, 사용자의 본래 요청인 화면으로 라우팅\n        console.log('에러다에러에러에러')\n\n        return Promise.reject(error );\n    }\n)\n\n// 401응답을 받을 경우에 interceptor 통해 전역적으로 rt를 통한 at 재발급\n// 만약 rt도 401 응답을 받을 경우에 token 제거 후 login화면으로 리다이렉트\n\naxios.interceptors.response.use(\n    response => response,\n    async error => {\n        if(error.response && error.response.status === 401){\n            const refreshToken = localStorage.getItem('refreshToken');\n\n            try{\n                localStorage.removeItem('token');\n                const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/member/refresh-token`, {refreshToken});\n                localStorage.setItem('token',response.data.result.token);\n                window.location.reload();\n            }catch(e){\n\n                localStorage.clear();\n                window.location.href='/login';\n            }\n        }\n        return Promise.reject(error);\n    }\n)\n\n// app.use(VueVideoPlayer)\napp.use(store);\napp.use(router);\napp.use(vuetify);\napp.mount('#app');\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B;AACA,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAO,uCAAuC;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB;AAC9B,OAAOC,KAAK,MAAM,kBAAkB;AACpC;AACA,OAAO,4BAA4B;AAEnC,OAAO,uCAAuC;;AAG9C;AACA,MAAMC,GAAG,GAAGN,SAAS,CAACC,GAAG,CAAC;;AAG1B;AACAG,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,YAAY,EAACJ,KAAK,CAAC;EAC/B,IAAGA,KAAK,EAAC;IACLD,MAAM,CAACM,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDO,KAAK,IAAI;EACL;EACAH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAExB,OAAOG,OAAO,CAACC,MAAM,CAACF,KAAM,CAAC;AACjC,CACJ,CAAC;;AAED;AACA;;AAEAb,KAAK,CAACG,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC3BW,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EACX,IAAGA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;IAC/C,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEzD,IAAG;MACCD,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;MAChC,MAAMH,QAAQ,GAAG,MAAMhB,KAAK,CAACoB,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,uBAAuB,EAAE;QAACL;MAAY,CAAC,CAAC;MAC7GV,YAAY,CAACgB,OAAO,CAAC,OAAO,EAACR,QAAQ,CAACS,IAAI,CAACC,MAAM,CAACnB,KAAK,CAAC;MACxDoB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC5B,CAAC,QAAMC,CAAC,EAAC;MAELtB,YAAY,CAACuB,KAAK,CAAC,CAAC;MACpBJ,MAAM,CAACC,QAAQ,CAACI,IAAI,GAAC,QAAQ;IACjC;EACJ;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAX,GAAG,CAACG,GAAG,CAACJ,KAAK,CAAC;AACdC,GAAG,CAACG,GAAG,CAACP,MAAM,CAAC;AACfI,GAAG,CAACG,GAAG,CAACN,OAAO,CAAC;AAChBG,GAAG,CAAC+B,KAAK,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}