{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      selectedSubject: null,\n      subjects: [],\n      // 강좌 목록을 저장할 배열\n      questionTitle: '',\n      questionText: '',\n      questionImage: null,\n      previewImageSrc: null\n    };\n  },\n  mounted() {\n    this.fetchSubjects(); // 컴포넌트가 마운트될 때 강좌 목록을 불러옵니다.\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = response.data.result.content; // 강좌 목록을 subjects 배열에 저장\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n        this.subjects = []; // 오류 발생 시 빈 배열로 초기화\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.questionImage = files[0];\n        this.previewImage();\n      } else {\n        this.questionImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.questionImage) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.questionImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitQuestion() {\n      if (!this.selectedSubject) {\n        alert('강좌를 선택해주세요.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('title', this.questionTitle);\n      formData.append('questionText', this.questionText);\n      formData.append('subjectId', this.selectedSubject); // 선택한 강좌 ID를 추가\n      if (this.questionImage) {\n        formData.append('image', this.questionImage);\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response);\n        alert('질문이 성공적으로 등록되었습니다!');\n        this.$router.push({\n          name: 'QnaList'\n        });\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : '질문 등록에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","selectedSubject","subjects","questionTitle","questionText","questionImage","previewImageSrc","mounted","fetchSubjects","methods","response","get","process","env","VUE_APP_API_BASE_URL","result","content","error","console","onFileChange","event","files","target","dataTransfer","length","previewImage","reader","FileReader","onload","e","readAsDataURL","submitQuestion","alert","formData","FormData","append","post","headers","log","$router","push","name","errorMessage","message"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/CreateQuestion.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"boardWrap\">\n      <div class=\"inner\">\n        <h1>QnA 질문 등록하기</h1>\n        <div class=\"tbl_form\">\n          <form @submit.prevent=\"submitQuestion\">\n            <div class=\"col\">\n              <label for=\"subject\" class=\"label\">강좌 선택</label>\n              <select\n                v-model=\"selectedSubject\"\n                class=\"select\"\n                required\n              >\n                <option v-for=\"subject in subjects\" :key=\"subject.id\" :value=\"subject.id\">\n                  {{ subject.title }}\n                </option>\n              </select>\n            </div>\n\n            <div class=\"col\">\n              <label for=\"title\" class=\"label\">제목</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                v-model=\"questionTitle\"\n                class=\"frm_input\"\n                placeholder=\"제목을 입력하세요.\"\n                required\n              />\n            </div>\n\n            <div class=\"col\">\n              <label for=\"content\" class=\"label\">질문 내용</label>\n              <textarea\n                id=\"content\"\n                v-model=\"questionText\"\n                class=\"frm_textarea\"\n                placeholder=\"내용을 입력하세요.\"\n                style=\"height:350px\"\n                required\n              ></textarea>\n            </div>\n\n            <div class=\"col\">\n              <label for=\"file\" class=\"label\">질문 이미지 (선택사항)</label>\n              <div class=\"filebox\">\n                <input\n                  class=\"upload-name\"\n                  placeholder=\"첨부파일\"\n                  readonly\n                  :value=\"questionImage ? questionImage.name : '첨부파일'\"\n                />\n                <label for=\"file\">파일찾기</label>\n                <input\n                  type=\"file\"\n                  id=\"file\"\n                  @change=\"onFileChange\"\n                  accept=\"image/*\"\n                />\n              </div>\n              <img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" class=\"preview-image\" />\n            </div>\n\n            <div class=\"btnWrap\">\n              <a href=\"javascript:void(0)\" class=\"btn_solid\">취소</a>\n              <button type=\"submit\" class=\"btn_write\">저장</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      selectedSubject: null,\n      subjects: [], // 강좌 목록을 저장할 배열\n      questionTitle: '',\n      questionText: '',\n      questionImage: null,\n      previewImageSrc: null,\n    };\n  },\n  mounted() {\n    this.fetchSubjects(); // 컴포넌트가 마운트될 때 강좌 목록을 불러옵니다.\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = response.data.result.content; // 강좌 목록을 subjects 배열에 저장\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n        this.subjects = []; // 오류 발생 시 빈 배열로 초기화\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.questionImage = files[0];\n        this.previewImage();\n      } else {\n        this.questionImage = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.questionImage) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.questionImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitQuestion() {\n      if (!this.selectedSubject) {\n        alert('강좌를 선택해주세요.');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append('title', this.questionTitle);\n      formData.append('questionText', this.questionText);\n      formData.append('subjectId', this.selectedSubject); // 선택한 강좌 ID를 추가\n      if (this.questionImage) {\n        formData.append('image', this.questionImage);\n      }\n\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_BASE_URL}/qna/create`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n        console.log(response);\n        alert('질문이 성공적으로 등록되었습니다!');\n        this.$router.push({ name: 'QnaList' });\n      } catch (error) {\n        const errorMessage =\n          error.response && error.response.data\n            ? error.response.data.message\n            : '질문 등록에 실패했습니다.';\n        alert(errorMessage);\n        console.error('Error details:', error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  width: 90%;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n\n.inner {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.boardWrap h1 {\n  font-size: 26px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.tbl_form {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_form .col {\n  margin-bottom: 20px;\n}\n\n.label {\n  display: block;\n  margin-bottom: 10px;\n  font-weight: bold;\n}\n\n.frm_input,\n.frm_textarea,\n.select {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.filebox {\n  display: flex;\n  align-items: center;\n}\n\n.upload-name {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.filebox label {\n  padding: 10px 20px;\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.filebox label:hover {\n  background-color: #555;\n}\n\n.preview-image {\n  margin-top: 10px;\n  max-width: 100%;\n}\n\n.btnWrap {\n  text-align: right;\n  margin-top: 20px;\n}\n\n.btn_solid,\n.btn_write {\n  padding: 12px 25px;\n  background-color: #333;\n  color: #fff;\n  text-decoration: none;\n  border-radius: 4px;\n  cursor: pointer;\n  display: inline-block;\n}\n\n.btn_write {\n  background-color: #007bff;\n}\n\n.btn_solid:hover,\n.btn_write:hover {\n  background-color: #0056b3;\n}\n\n.btn_solid:hover {\n  background-color: #555;\n}\n</style>\n"],"mappings":";AA4EA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,IAAI;MACrBC,QAAQ,EAAE,EAAE;MAAE;MACdC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,IAAI;MACnBC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,eAAe,CAAC;QACpF,IAAI,CAACZ,QAAO,GAAIQ,QAAQ,CAACV,IAAI,CAACe,MAAM,CAACC,OAAO,EAAE;MAChD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACf,QAAO,GAAI,EAAE,EAAE;MACtB;IACF,CAAC;IACDiB,YAAYA,CAACC,KAAK,EAAE;MAClB,MAAMC,KAAI,GAAID,KAAK,EAAEE,MAAM,EAAED,KAAI,IAAKD,KAAK,EAAEG,YAAY,EAAEF,KAAK;MAChE,IAAIA,KAAI,IAAKA,KAAK,CAACG,MAAK,GAAI,CAAC,EAAE;QAC7B,IAAI,CAACnB,aAAY,GAAIgB,KAAK,CAAC,CAAC,CAAC;QAC7B,IAAI,CAACI,YAAY,CAAC,CAAC;MACrB,OAAO;QACL,IAAI,CAACpB,aAAY,GAAI,IAAI;QACzB,IAAI,CAACC,eAAc,GAAI,IAAI;MAC7B;IACF,CAAC;IACDmB,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACpB,aAAa,EAAE;QACtB,MAAMqB,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;UACrB,IAAI,CAACvB,eAAc,GAAIuB,CAAC,CAACP,MAAM,CAACP,MAAM;QACxC,CAAC;QACDW,MAAM,CAACI,aAAa,CAAC,IAAI,CAACzB,aAAa,CAAC;MAC1C,OAAO;QACL,IAAI,CAACC,eAAc,GAAI,IAAI;MAC7B;IACF,CAAC;IACD,MAAMyB,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAAC9B,eAAe,EAAE;QACzB+B,KAAK,CAAC,aAAa,CAAC;QACpB;MACF;MAEA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAChC,aAAa,CAAC;MAC5C8B,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC/B,YAAY,CAAC;MAClD6B,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAE,IAAI,CAAClC,eAAe,CAAC,EAAE;MACpD,IAAI,IAAI,CAACI,aAAa,EAAE;QACtB4B,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC9B,aAAa,CAAC;MAC9C;MAEA,IAAI;QACF,MAAMK,QAAO,GAAI,MAAMX,KAAK,CAACqC,IAAI,CAC/B,GAAGxB,OAAO,CAACC,GAAG,CAACC,oBAAoB,aAAa,EAChDmB,QAAQ,EACR;UACEI,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF,CAAC;QACDnB,OAAO,CAACoB,GAAG,CAAC5B,QAAQ,CAAC;QACrBsB,KAAK,CAAC,oBAAoB,CAAC;QAC3B,IAAI,CAACO,OAAO,CAACC,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC;MACxC,EAAE,OAAOxB,KAAK,EAAE;QACd,MAAMyB,YAAW,GACfzB,KAAK,CAACP,QAAO,IAAKO,KAAK,CAACP,QAAQ,CAACV,IAAG,GAChCiB,KAAK,CAACP,QAAQ,CAACV,IAAI,CAAC2C,OAAM,GAC1B,gBAAgB;QACtBX,KAAK,CAACU,YAAY,CAAC;QACnBxB,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACxC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}