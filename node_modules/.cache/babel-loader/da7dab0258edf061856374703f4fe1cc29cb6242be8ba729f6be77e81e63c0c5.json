{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ReportCreate from '@/views/report/ReportCreate.vue'; // 모달 컴포넌트 임포트\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n      topics: ['/topic/korean', '/topic/english', '/topic/math', '/topic/social', '/topic/science'],\n      topicNames: {\n        '/topic/korean': '국어',\n        '/topic/english': '영어',\n        '/topic/math': '수학',\n        '/topic/social': '사회',\n        '/topic/science': '과학'\n      },\n      selectedTopic: '/topic/korean',\n      // 기본 선택 주제\n      forbiddenWords: [] // 필터링할 금지된 단어 목록\n    };\n  },\n  computed: {\n    filteredMessages() {\n      // 현재 선택된 주제에 맞는 메시지만 필터링\n      const currentChannel = this.selectedTopic.replace('/topic/', '');\n      return this.messages.filter(message => message.channel === currentChannel);\n    }\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n    this.loadForbiddenWords(); // 금지된 단어 목록 로드\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: {\n            since: this.loginTime\n          }\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    async loadForbiddenWords() {\n      try {\n        const response = await axios.get('/badwords.txt'); // 로컬 경로에서 badwords.txt 파일을 불러옵니다.\n        this.forbiddenWords = response.data.split('\\n').map(word => word.trim()).filter(word => word); // 줄바꿈을 기준으로 단어를 분리하고, 공백을 제거\n\n        // 금지된 단어 목록을 콘솔에 출력하여 확인\n        console.log('Loaded forbidden words:', this.forbiddenWords);\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          console.error('Error 404: Resource not found. Please check the file path.');\n        } else {\n          console.error('An unexpected error occurred:', error.message);\n        }\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n\n        // 기본 주제를 구독합니다.\n        this.subscribeToTopic(this.selectedTopic);\n      }, error => {\n        console.error('웹소켓 연결 실패:', error);\n      });\n    },\n    subscribeToTopic(topic) {\n      if (this.stompClient) {\n        // 기존 구독을 해제합니다.\n        if (this.selectedTopic) {\n          this.stompClient.unsubscribe(this.selectedTopic);\n        }\n\n        // 새로운 주제에 대해서만 구독합니다.\n        this.selectedTopic = topic;\n        this.stompClient.subscribe(topic, message => {\n          const receivedMessage = JSON.parse(message.body);\n\n          // 메시지를 모두 추가합니다. 필터링은 computed 속성에서 수행\n          this.messages.push(receivedMessage);\n        });\n      }\n    },\n    filterMessage(content) {\n      this.forbiddenWords.forEach(word => {\n        // 각 문자의 사이에 다양한 특수 문자가 올 수 있도록 허용하는 정규식\n        const regex = new RegExp(word.split('').map(char => `[${char}]+[^\\\\w\\\\s]*`) // 각 글자 사이에 어떤 문자가 오든 필터링 되도록 처리\n        .join(''), 'gi');\n        content = content.replace(regex, '*'.repeat(word.length));\n      });\n\n      // 필터링된 내용을 콘솔에 출력하여 확인\n      console.log('Filtered content:', content);\n      return content;\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n\n      // 채널이 올바르게 설정되어 있는지 확인\n      const channel = this.selectedTopic ? this.selectedTopic.replace('/topic/', '') : '';\n      if (!channel) {\n        console.error('Channel is not set.');\n        alert('채널이 설정되지 않았습니다.');\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        // 사용자가 입력한 메시지 내용을 필터링\n        const filteredContent = this.filterMessage(this.newMessage);\n        const message = {\n          content: filteredContent,\n          // 필터링된 내용을 사용\n          senderId: this.userId,\n          channel: channel\n        };\n        this.stompClient.send(`/app/chat.sendMessage`, {}, JSON.stringify(message));\n        this.newMessage = ''; // 메시지를 전송한 후 입력창을 비웁니다.\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log(\"Chat closed\");\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate\n  }\n};","map":{"version":3,"names":["ReportCreate","axios","SockJS","Stomp","data","messages","newMessage","stompClient","userId","localStorage","getItem","loginTime","Date","toISOString","slice","showReportModal","selectedChatMessageId","topics","topicNames","selectedTopic","forbiddenWords","computed","filteredMessages","currentChannel","replace","filter","message","channel","mounted","loadChatHistory","connectWebSocket","loadForbiddenWords","methods","response","get","process","env","VUE_APP_API_BASE_URL","params","since","error","console","split","map","word","trim","log","status","socket","over","connect","frame","subscribeToTopic","topic","unsubscribe","subscribe","receivedMessage","JSON","parse","body","push","filterMessage","content","forEach","regex","RegExp","char","join","repeat","length","sendMessage","alert","connected","filteredContent","senderId","send","stringify","isMyMessage","formatTime","datetime","date","getHours","String","getMinutes","padStart","closeChat","reportMessage","id","closeReportModal","components"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <!-- 닫기 버튼 -->\n    <v-btn icon @click=\"closeChat\" class=\"close-button\">\n      <v-icon>mdi-close</v-icon>\n    </v-btn>\n\n    <!-- 채팅 메시지 -->\n    <v-list class=\"chat-box\">\n      <v-list-item\n        v-for=\"message in filteredMessages\"\n        :key=\"message.id\"\n        :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        class=\"message-item\"\n      >\n        <!-- 자신이 보낸 메시지에는 신고 버튼을 숨김 -->\n        <v-btn v-if=\"!isMyMessage(message.senderId)\" icon small class=\"report-button\" @click=\"reportMessage(message)\">\n          <v-icon small>mdi-alarm-light-outline</v-icon>\n        </v-btn>\n        <v-list-item-content>\n          <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n          <v-list-item-subtitle class=\"message-content\">\n            {{ filterMessage(message.content) }} <!-- 필터링된 메시지 표시 -->\n          </v-list-item-subtitle>\n          <v-list-item-subtitle :class=\"['message-timestamp', { 'left-align': !isMyMessage(message.senderId) }]\">\n            {{ formatTime(message.createdTime) }}\n          </v-list-item-subtitle>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n\n    <!-- 메시지 입력 및 전송 버튼 -->\n    <div class=\"message-input-wrapper\">\n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        hide-details\n        dense\n        class=\"message-input\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n      <v-btn @click=\"sendMessage\" class=\"send-button\" color=\"primary\">전송</v-btn>\n    </div>\n\n    <!-- 주제 선택 버튼 -->\n    <div class=\"topic-buttons\">\n      <v-btn\n        v-for=\"topic in topics\"\n        :key=\"topic\"\n        @click=\"subscribeToTopic(topic)\"\n        :class=\"{'selected-topic': selectedTopic === topic}\"\n        class=\"topic-button\"\n      >\n        {{ topicNames[topic] }}\n      </v-btn>\n    </div>\n\n    <!-- 신고 작성 모달 -->\n    <ReportCreate v-if=\"showReportModal\" :chatMessageId=\"selectedChatMessageId\" @close=\"closeReportModal\" />\n  </v-container>\n</template>\n\n<script>\nimport ReportCreate from '@/views/report/ReportCreate.vue'; // 모달 컴포넌트 임포트\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\n\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n      topics: ['/topic/korean', '/topic/english', '/topic/math', '/topic/social', '/topic/science'],\n      topicNames: {\n        '/topic/korean': '국어',\n        '/topic/english': '영어',\n        '/topic/math': '수학',\n        '/topic/social': '사회',\n        '/topic/science': '과학',\n      },\n      selectedTopic: '/topic/korean', // 기본 선택 주제\n      forbiddenWords: [], // 필터링할 금지된 단어 목록\n    };\n  },\n  computed: {\n    filteredMessages() {\n      // 현재 선택된 주제에 맞는 메시지만 필터링\n      const currentChannel = this.selectedTopic.replace('/topic/', '');\n      return this.messages.filter(message => message.channel === currentChannel);\n    }\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n    this.loadForbiddenWords(); // 금지된 단어 목록 로드\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: { since: this.loginTime },\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    async loadForbiddenWords() {\n      try {\n        const response = await axios.get('/badwords.txt'); // 로컬 경로에서 badwords.txt 파일을 불러옵니다.\n        this.forbiddenWords = response.data.split('\\n').map(word => word.trim()).filter(word => word); // 줄바꿈을 기준으로 단어를 분리하고, 공백을 제거\n        \n        // 금지된 단어 목록을 콘솔에 출력하여 확인\n        console.log('Loaded forbidden words:', this.forbiddenWords);\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          console.error('Error 404: Resource not found. Please check the file path.');\n        } else {\n          console.error('An unexpected error occurred:', error.message);\n        }\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, (frame) => {\n        console.log('Connected: ' + frame);\n\n        // 기본 주제를 구독합니다.\n        this.subscribeToTopic(this.selectedTopic);\n      }, (error) => {\n        console.error('웹소켓 연결 실패:', error);\n      });\n    },\n    subscribeToTopic(topic) {\n      if (this.stompClient) {\n        // 기존 구독을 해제합니다.\n        if (this.selectedTopic) {\n          this.stompClient.unsubscribe(this.selectedTopic);\n        }\n\n        // 새로운 주제에 대해서만 구독합니다.\n        this.selectedTopic = topic;\n        this.stompClient.subscribe(topic, (message) => {\n          const receivedMessage = JSON.parse(message.body);\n\n          // 메시지를 모두 추가합니다. 필터링은 computed 속성에서 수행\n          this.messages.push(receivedMessage);\n        });\n      }\n    },\n    filterMessage(content) {\n  this.forbiddenWords.forEach(word => {\n    // 각 문자의 사이에 다양한 특수 문자가 올 수 있도록 허용하는 정규식\n    const regex = new RegExp(\n      word\n        .split('')\n        .map(char => `[${char}]+[^\\\\w\\\\s]*`)  // 각 글자 사이에 어떤 문자가 오든 필터링 되도록 처리\n        .join(''),\n      'gi'\n    );\n    content = content.replace(regex, '*'.repeat(word.length));\n  });\n\n  // 필터링된 내용을 콘솔에 출력하여 확인\n  console.log('Filtered content:', content);\n  return content;\n},\n\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n\n      // 채널이 올바르게 설정되어 있는지 확인\n      const channel = this.selectedTopic ? this.selectedTopic.replace('/topic/', '') : '';\n      if (!channel) {\n        console.error('Channel is not set.');\n        alert('채널이 설정되지 않았습니다.');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        // 사용자가 입력한 메시지 내용을 필터링\n        const filteredContent = this.filterMessage(this.newMessage);\n\n        const message = {\n          content: filteredContent,  // 필터링된 내용을 사용\n          senderId: this.userId,\n          channel: channel\n        };\n\n        this.stompClient.send(`/app/chat.sendMessage`, {}, JSON.stringify(message));\n        this.newMessage = '';  // 메시지를 전송한 후 입력창을 비웁니다.\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log(\"Chat closed\");\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate,\n  }\n};\n</script>\n\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 800px; /* 높이를 약간 더 늘려서 버튼이 들어갈 공간을 확보 */\n  width: 550px; /* 가로 크기를 고정 */\n  margin: 20px auto;\n  background: #f9f9f9;\n  border-radius: 8px;\n  overflow: hidden;\n  padding: 7px;\n  position: relative;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.chat-box {\n  flex-grow: 1;\n  padding: 10px;\n  background: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  overflow-y: auto;\n  overflow-x: hidden; /* 가로 스크롤 안보이게 설정 */\n}\n\n.message-item {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n}\n\n.report-button {\n  position: absolute;\n  right: -30px; /* 말풍선 오른쪽으로 이동 */\n  top: 50%;\n  transform: translateY(-50%);\n  width: 40px;\n  height: 20px;\n  font-size: 14px;\n  color: #f44336;\n}\n\n.message-input-wrapper {\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  background: #f9f9f9;\n  margin-bottom: 0px; /* 메시지 입력 창과 버튼 사이의 간격 */\n}\n\n.message-input {\n  flex-grow: 1;\n  border: none;\n  padding: 10px;\n  margin-right: 10px;\n  height: 40px;\n  background: #f9f9f9;\n}\n\n.send-button {\n  width: auto;\n  height: 40px;\n  padding: 0 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-width: 50%; /* 말풍선 가로 크기를 줄임 */\n}\n\n.message-content {\n  font-size: 1rem;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  word-break: break-word;\n  max-width: 100%;\n}\n\n.my-message {\n  background-color: #ffeb3b;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #e5f1fb;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.message-sender {\n  font-size: 0.8em;\n  color: gray;\n  margin-bottom: 5px;\n}\n\n.message-timestamp {\n  font-size: 0.8em;\n  color: gray;\n  margin-top: 5px;\n  text-align: right;\n}\n\n.left-align {\n  text-align: left !important; /* 왼쪽 정렬을 강제로 적용 */\n  padding-left: 0; /* 왼쪽으로 붙이기 위해 패딩 제거 */\n  margin-left: 0; /* 왼쪽으로 붙이기 위해 마진 제거 */\n}\n\n.topic-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding: 10px 0;\n  margin-top: 50px; /* 메시지 입력 창과 버튼 사이의 간격 */\n  margin-bottom: 0px;\n  background: #f9f9f9; /* 버튼 배경 색상 */\n}\n\n.topic-button {\n  min-width: 80px;\n}\n\n.selected-topic {\n  background-color: #3f51b5 !important;\n  color: white !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}