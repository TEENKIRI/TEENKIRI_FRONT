{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ReportCreate from '@/views/report/ReportCreate.vue'; // 모달 컴포넌트 임포트\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: {\n            since: this.loginTime\n          }\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log(\"Chat closed\");\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate\n  }\n};","map":{"version":3,"names":["ReportCreate","axios","SockJS","Stomp","data","messages","newMessage","stompClient","userId","localStorage","getItem","loginTime","Date","toISOString","slice","showReportModal","selectedChatMessageId","mounted","loadChatHistory","connectWebSocket","methods","response","get","process","env","VUE_APP_API_BASE_URL","params","since","error","console","socket","over","connect","frame","log","subscribe","tick","message","JSON","parse","body","push","sendMessage","connected","content","senderId","send","stringify","isMyMessage","formatTime","datetime","date","getHours","String","getMinutes","padStart","closeChat","reportMessage","id","closeReportModal","components"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <!-- Close Button -->\n    <v-btn icon @click=\"closeChat\" class=\"close-button\">\n      <v-icon>mdi-close</v-icon>\n    </v-btn>\n\n    <!-- Chat Messages -->\n    <v-list class=\"chat-box\">\n      <v-list-item\n        v-for=\"message in messages\"\n        :key=\"message.id\"\n        :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        class=\"message-item\"\n      >\n        <!-- 자신이 보낸 메시지에는 신고 버튼을 숨김 -->\n        <v-btn v-if=\"!isMyMessage(message.senderId)\" icon small class=\"report-button\" @click=\"reportMessage(message)\">\n          <v-icon small>mdi-alarm-light-outline</v-icon>\n        </v-btn>\n        <v-list-item-content>\n          <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n          <v-list-item-subtitle class=\"message-content\">\n            {{ message.content }}\n          </v-list-item-subtitle>\n          <v-list-item-subtitle :class=\"['message-timestamp', { 'left-align': !isMyMessage(message.senderId) }]\">\n            {{ formatTime(message.createdTime) }}\n          </v-list-item-subtitle>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n\n    <!-- Message Input and Send Button -->\n    <div class=\"message-input-wrapper\">\n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        hide-details\n        dense\n        class=\"message-input\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n      <v-btn @click=\"sendMessage\" class=\"send-button\" color=\"primary\">전송</v-btn>\n    </div>\n\n    <!-- Report Create Modal -->\n    <ReportCreate v-if=\"showReportModal\" :chatMessageId=\"selectedChatMessageId\" @close=\"closeReportModal\" />\n  </v-container>\n</template>\n\n<script>\nimport ReportCreate from '@/views/report/ReportCreate.vue';  // 모달 컴포넌트 임포트\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19),\n      showReportModal: false,\n      selectedChatMessageId: null,\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: { since: this.loginTime },\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, (frame) => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', (tick) => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId,\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatTime(datetime) {\n      const date = new Date(datetime);\n      return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    closeChat() {\n      console.log(\"Chat closed\");\n    },\n    reportMessage(message) {\n      this.selectedChatMessageId = message.id;\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  },\n  components: {\n    ReportCreate,\n  }\n};\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 500px; /* 높이를 고정 */\n  width: 580px; /* 가로 크기를 고정 */\n  margin: 20px auto;\n  background: #f9f9f9;\n  border-radius: 8px;\n  overflow: hidden;\n  padding: 10px;\n  position: relative;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.chat-box {\n  flex-grow: 1;\n  padding: 10px;\n  background: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  overflow-y: auto;\n  overflow-x: hidden; /* 가로 스크롤 안보이게 설정 */\n}\n\n.message-item {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n}\n\n.report-button {\n  position: absolute;\n  right: -30px; /* 말풍선 오른쪽으로 이동 */\n  top: 50%;\n  transform: translateY(-50%);\n  width: 40px;\n  height: 20px;\n  font-size: 14px;\n  color: #f44336;\n}\n\n.message-input-wrapper {\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  background: #f9f9f9;\n}\n\n.message-input {\n  flex-grow: 1;\n  border: none;\n  padding: 10px;\n  margin-right: 10px;\n  height: 40px;\n  background: #f9f9f9;\n}\n\n.send-button {\n  width: auto;\n  height: 40px;\n  padding: 0 15px;\n}\n\n.message-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  max-width: 50%; /* 말풍선 가로 크기를 줄임 */\n}\n\n.message-content {\n  font-size: 1rem;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  word-break: break-word;\n  max-width: 100%;\n}\n\n.my-message {\n  background-color: #ffeb3b;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #e5f1fb;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.message-sender {\n  font-size: 0.8em;\n  color: gray;\n  margin-bottom: 5px;\n}\n\n.message-timestamp {\n  font-size: 0.8em;\n  color: gray;\n  margin-top: 5px;\n  text-align: right;\n}\n\n.left-align {\n  text-align: left !important; /* 왼쪽 정렬을 강제로 적용 */\n  padding-left: 0; /* 왼쪽으로 붙이기 위해 패딩 제거 */\n  margin-left: 0; /* 왼쪽으로 붙이기 위해 마진 제거 */\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}