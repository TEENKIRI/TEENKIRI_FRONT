{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      email: \"\",\n      verificationCode: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n      name: \"\",\n      nickname: \"\",\n      phone: \"\",\n      birthDate: \"\",\n      city: \"\",\n      street: \"\",\n      zipcode: \"\",\n      // 추가된 우편번호 필드\n      agree1: false,\n      agree2: false,\n      showPassword: false,\n      showPasswordConfirm: false,\n      verificationSent: false,\n      emailVerified: false,\n      nicknameChecked: false\n    };\n  },\n  methods: {\n    async sendVerificationCode() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/send-verification-code`, {\n          email: this.email\n        });\n        this.verificationSent = true;\n        alert(\"인증 코드가 전송되었습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async verifyEmailCode() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/verify-email`, {\n          email: this.email,\n          code: this.verificationCode\n        });\n        this.emailVerified = true;\n        alert(\"이메일 인증이 완료되었습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async checkNickname() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/check-nickname`, {\n          nickname: this.nickname\n        });\n        this.nicknameChecked = true;\n        alert(\"닉네임을 사용할 수 있습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async register() {\n      if (!this.nicknameChecked) {\n        alert(\"닉네임 중복 확인을 해주세요.\");\n        return;\n      }\n      if (this.password !== this.passwordConfirm) {\n        alert(\"비밀번호가 일치하지 않습니다.\");\n        return;\n      }\n      try {\n        const registerData = {\n          email: this.email,\n          password: this.password,\n          name: this.name,\n          nickname: this.nickname,\n          phone: this.phone,\n          birthDate: this.birthDate,\n          address: {\n            city: this.city,\n            street: this.street,\n            zipcode: this.zipcode\n          },\n          agree1: this.agree1,\n          agree2: this.agree2\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/register`, registerData);\n        alert(\"회원가입이 완료되었습니다.\");\n        this.$router.push(\"/login\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","email","verificationCode","password","passwordConfirm","nickname","phone","birthDate","city","street","zipcode","agree1","agree2","showPassword","showPasswordConfirm","verificationSent","emailVerified","nicknameChecked","methods","sendVerificationCode","post","process","env","VUE_APP_API_BASE_URL","alert","e","error_message","response","console","log","verifyEmailCode","code","checkNickname","register","registerData","address","$router","push"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/user/UserCreate.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" sm=\"6\" md=\"8\">\n        <v-card>\n          <v-card-title class=\"text-h5 text-center\">회원가입</v-card-title>\n          <v-card-text>\n            <p class=\"info\"><span class=\"required\">*</span>표시는 필수입력사항입니다.</p>\n            <v-form @submit.prevent=\"register\">\n              <v-text-field\n                label=\"아이디(이메일)\"\n                v-model=\"email\"\n                type=\"email\"\n                prepend-icon=\"mdi-email\"\n                required\n              >\n                <template v-slot:append>\n                  <v-btn @click=\"sendVerificationCode\" :disabled=\"verificationSent\">인증 코드 전송</v-btn>\n                </template>\n              </v-text-field>\n              <v-text-field\n                v-if=\"verificationSent\"\n                label=\"이메일 인증 코드\"\n                v-model=\"verificationCode\"\n                type=\"text\"\n                prepend-icon=\"mdi-check-circle\"\n                required\n              >\n                <template v-slot:append>\n                  <v-btn @click=\"verifyEmailCode\">확인</v-btn>\n                </template>\n              </v-text-field>\n              <v-text-field\n                :type=\"showPassword ? 'text' : 'password'\"\n                label=\"비밀번호\"\n                v-model=\"password\"\n                prepend-icon=\"mdi-lock\"\n                required\n              >\n                <template v-slot:append>\n                  <v-btn icon @click=\"showPassword = !showPassword\">\n                    <v-icon>{{ showPassword ? 'mdi-eye-off' : 'mdi-eye' }}</v-icon>\n                  </v-btn>\n                </template>\n              </v-text-field>\n              <v-text-field\n                :type=\"showPasswordConfirm ? 'text' : 'password'\"\n                label=\"비밀번호 확인\"\n                v-model=\"passwordConfirm\"\n                prepend-icon=\"mdi-lock\"\n                required\n              >\n                <template v-slot:append>\n                  <v-btn icon @click=\"showPasswordConfirm = !showPasswordConfirm\">\n                    <v-icon>{{ showPasswordConfirm ? 'mdi-eye-off' : 'mdi-eye' }}</v-icon>\n                  </v-btn>\n                </template>\n              </v-text-field>\n              <v-text-field\n                label=\"이름\"\n                v-model=\"name\"\n                prepend-icon=\"mdi-account\"\n                required\n              ></v-text-field>\n              <v-text-field\n                label=\"닉네임\"\n                v-model=\"nickname\"\n                prepend-icon=\"mdi-tag\"\n                required\n              >\n                <template v-slot:append>\n                  <v-btn @click=\"checkNickname\">중복 확인</v-btn>\n                </template>\n              </v-text-field>\n              <v-text-field\n                label=\"핸드폰번호\"\n                v-model=\"phone\"\n                prepend-icon=\"mdi-phone\"\n                required\n              ></v-text-field>\n              <v-text-field\n                label=\"생년월일\"\n                v-model=\"birthDate\"\n                prepend-icon=\"mdi-cake\"\n                required\n              ></v-text-field>\n              <v-text-field\n                label=\"주소\"\n                v-model=\"city\"\n                prepend-icon=\"mdi-home\"\n              ></v-text-field>\n              <v-text-field\n                label=\"상세주소\"\n                v-model=\"street\"\n                prepend-icon=\"mdi-home-outline\"\n              ></v-text-field>\n              <v-text-field\n                label=\"우편번호\"\n                v-model=\"zipcode\"\n                prepend-icon=\"mdi-home-outline\"\n              ></v-text-field>\n              <v-checkbox\n                v-model=\"agree1\"\n                label=\"개인정보 수집 활용 동의\"\n                required\n              ></v-checkbox>\n              <v-checkbox\n                v-model=\"agree2\"\n                label=\"이용약관 동의\"\n                required\n              ></v-checkbox>\n              <v-btn block type=\"submit\" color=\"primary\" :disabled=\"!emailVerified || !nicknameChecked\">회원가입</v-btn>\n            </v-form>\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      email: \"\",\n      verificationCode: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n      name: \"\",\n      nickname: \"\",\n      phone: \"\",\n      birthDate: \"\",\n      city: \"\",\n      street: \"\",\n      zipcode: \"\",        // 추가된 우편번호 필드\n      agree1: false,\n      agree2: false,\n      showPassword: false,\n      showPasswordConfirm: false,\n      verificationSent: false,\n      emailVerified: false,\n      nicknameChecked: false,\n    };\n  },\n  methods: {\n    async sendVerificationCode() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/send-verification-code`, { email: this.email });\n        this.verificationSent = true;\n        alert(\"인증 코드가 전송되었습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async verifyEmailCode() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/verify-email`, { email: this.email, code: this.verificationCode });\n        this.emailVerified = true;\n        alert(\"이메일 인증이 완료되었습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async checkNickname() {\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/check-nickname`, { nickname: this.nickname });\n        this.nicknameChecked = true;\n        alert(\"닉네임을 사용할 수 있습니다.\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    },\n    async register() {\n      if (!this.nicknameChecked) {\n        alert(\"닉네임 중복 확인을 해주세요.\");\n        return;\n      }\n      if (this.password !== this.passwordConfirm) {\n        alert(\"비밀번호가 일치하지 않습니다.\");\n        return;\n      }\n\n      try {\n        const registerData = {\n          email: this.email,\n          password: this.password,\n          name: this.name,\n          nickname: this.nickname,\n          phone: this.phone,\n          birthDate: this.birthDate,\n          address: {\n            city: this.city,\n            street: this.street,\n            zipcode: this.zipcode\n          },      \n          agree1: this.agree1,\n          agree2: this.agree2,\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/register`, registerData);\n        alert(\"회원가입이 완료되었습니다.\");\n        this.$router.push(\"/login\");\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 회원가입 페이지 관련 스타일 */\n.info {\n  font-size: 14px;\n  margin-bottom: 20px;\n}\n\n.required {\n  color: red;\n}\n\n.v-input__control {\n  margin-bottom: 16px;\n}\n\n.btn_value_view {\n  margin-left: -40px;\n}\n\n.btn_submit_primary {\n  background-color: #1976D2;\n  color: white;\n  width: 100%;\n}\n\n.btn_submit_primary:hover {\n  background-color: #1565C0;\n}\n\n.chkBoxIco {\n  display: flex;\n  align-items: center;\n}\n\n.chkBoxIco label {\n  margin-left: 8px;\n}\n\n.mt20 {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}