{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      questions: [],\n      currentPage: 1,\n      totalPages: 1,\n      itemsPerPage: 10,\n      userRole: '',\n      searchCategory: '전체',\n      searchQuery: '',\n      selectedSubject: '',\n      subjects: [],\n      searchCategories: ['전체', '제목', '작성자']\n    };\n  },\n  created() {\n    this.fetchSubjects();\n    this.fetchQuestions();\n    this.userRole = localStorage.getItem('role');\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = [{\n          id: '',\n          title: '전체'\n        }, ...response.data.result.content.map(subject => ({\n          id: subject.id,\n          title: subject.title\n        }))];\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n      }\n    },\n    async fetchQuestions() {\n      try {\n        const params = {\n          page: this.currentPage - 1,\n          size: this.itemsPerPage,\n          searchCategory: this.searchCategory,\n          searchQuery: this.searchQuery\n        };\n        if (this.selectedSubject !== '') {\n          params.subjectId = this.selectedSubject;\n        }\n\n        // 검색 범위가 전체인 경우, 제목, 작성자, 강좌명 모두 검색하도록 처리\n        if (this.searchCategory === '전체' && this.searchQuery) {\n          params.searchCategory = 'all';\n        }\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/list`, {\n          params\n        });\n        const result = response.data.result;\n        if (result && result.content) {\n          this.questions = result.content;\n          this.totalPages = result.totalPages;\n        } else {\n          console.error('올바르지 않은 데이터 형식입니다:', response.data);\n        }\n      } catch (error) {\n        console.error('질문 목록을 불러오는 중 오류가 발생했습니다:', error);\n      }\n    },\n    formatDate(date) {\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      return `${year}년.${month}월.${day}일`;\n    },\n    createNewQuestion() {\n      this.$router.push('/qna/create');\n    },\n    viewDetail(id) {\n      this.$router.push(`/qna/detail/${id}`);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchQuestions();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchQuestions();\n      }\n    },\n    goToPage(page) {\n      if (page !== this.currentPage) {\n        this.currentPage = page;\n        this.fetchQuestions();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","questions","currentPage","totalPages","itemsPerPage","userRole","searchCategory","searchQuery","selectedSubject","subjects","searchCategories","created","fetchSubjects","fetchQuestions","localStorage","getItem","methods","response","get","process","env","VUE_APP_API_BASE_URL","id","title","result","content","map","subject","error","console","params","page","size","subjectId","formatDate","date","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","createNewQuestion","$router","push","viewDetail","goToPreviousPage","goToNextPage","goToPage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/QnaList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"inner\">\n      <h1 class=\"board-title\">QnA 목록</h1>\n\n      <div class=\"filters\">\n        <v-row>\n          <v-col cols=\"12\" md=\"3\">\n            <v-select\n              v-model=\"selectedSubject\"\n              :items=\"subjects\"\n              label=\"강좌 분류\"\n              item-text=\"title\"\n              item-value=\"id\"\n              @change=\"fetchQuestions\"\n            ></v-select>\n          </v-col>\n          <v-col cols=\"12\" md=\"3\">\n            <v-select\n              v-model=\"searchCategory\"\n              :items=\"searchCategories\"\n              label=\"검색 범위\"\n            ></v-select>\n          </v-col>\n          <v-col cols=\"12\" md=\"6\">\n            <v-text-field\n              v-model=\"searchQuery\"\n              label=\"검색어\"\n              append-icon=\"mdi-magnify\"\n              @click:append=\"fetchQuestions\" \n            ></v-text-field>\n          </v-col>\n        </v-row>\n      </div>\n\n      <table class=\"tbl_list\">\n        <caption></caption>\n        <colgroup>\n          <col width=\"80\" />\n          <col width=\"auto\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>번호</th>\n            <th>제목</th>\n            <th>강좌명</th>\n            <th>작성자</th>\n            <th>작성일</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(question, index) in questions\" :key=\"question.id\">\n            <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n            <td @click=\"viewDetail(question.id)\" class=\"text_left subject\">{{ question.title }}</td>\n            <td>{{ question.subjectTitle }}</td>\n            <td>{{ question.questionUserName }}</td>\n            <td>{{ formatDate(question.createdTime) }}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"btnWrap\">\n        <button @click=\"createNewQuestion\" class=\"btn_write\">질문 작성하기</button>\n      </div>\n\n      <div class=\"pagingWrap\">\n        <ul>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(1)\" class=\"btn_paging_start\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPreviousPage\" class=\"btn_paging_prev\"></a></li>\n          <li v-for=\"page in totalPages\" :key=\"page\">\n            <a href=\"javascript:void(0)\" @click=\"goToPage(page)\" :class=\"{ btn_paging: true, active: currentPage === page }\">{{ page }}</a>\n          </li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToNextPage\" class=\"btn_paging_next\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(totalPages)\" class=\"btn_paging_end\"></a></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      questions: [],\n      currentPage: 1,\n      totalPages: 1,\n      itemsPerPage: 10,\n      userRole: '',\n      searchCategory: '전체',\n      searchQuery: '',\n      selectedSubject: '',\n      subjects: [],\n      searchCategories: ['전체', '제목', '작성자'],\n    };\n  },\n  created() {\n    this.fetchSubjects();\n    this.fetchQuestions();\n    this.userRole = localStorage.getItem('role');\n  },\n  methods: {\n    async fetchSubjects() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/list`);\n        this.subjects = [{ id: '', title: '전체' }, ...response.data.result.content.map(subject => ({\n          id: subject.id,\n          title: subject.title,\n        }))];\n      } catch (error) {\n        console.error('강좌 목록을 불러오는 중 오류가 발생했습니다:', error);\n      }\n    },\n    async fetchQuestions() {\n      try {\n        const params = {\n          page: this.currentPage - 1,\n          size: this.itemsPerPage,\n          searchCategory: this.searchCategory,\n          searchQuery: this.searchQuery,\n        };\n\n        if (this.selectedSubject !== '') {\n          params.subjectId = this.selectedSubject;\n        }\n\n        // 검색 범위가 전체인 경우, 제목, 작성자, 강좌명 모두 검색하도록 처리\n        if (this.searchCategory === '전체' && this.searchQuery) {\n          params.searchCategory = 'all';\n        }\n\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/list`, { params });\n\n        const result = response.data.result;\n        if (result && result.content) {\n          this.questions = result.content;\n          this.totalPages = result.totalPages;\n        } else {\n          console.error('올바르지 않은 데이터 형식입니다:', response.data);\n        }\n      } catch (error) {\n        console.error('질문 목록을 불러오는 중 오류가 발생했습니다:', error);\n      }\n    },\n    formatDate(date) {\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      return `${year}년.${month}월.${day}일`;\n    },\n    createNewQuestion() {\n      this.$router.push('/qna/create');\n    },\n    viewDetail(id) {\n      this.$router.push(`/qna/detail/${id}`);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchQuestions();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchQuestions();\n      }\n    },\n    goToPage(page) {\n      if (page !== this.currentPage) {\n        this.currentPage = page;\n        this.fetchQuestions();\n      }\n    },\n  }\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 90%;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n\n.inner {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.board-title {\n  font-size: 26px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.filters {\n  margin-bottom: 20px;\n}\n\n.tbl_list {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_list th,\n.tbl_list td {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: left;\n}\n\n.tbl_list th {\n  background-color: #f4f4f4;\n}\n\n.text_left {\n  text-align: left;\n}\n\n.subject {\n  cursor: pointer;\n  color: #333;\n  text-decoration: none;\n}\n\n.subject:hover {\n  text-decoration: underline;\n}\n\n.btnWrap {\n  text-align: right;\n  margin-top: 20px;\n}\n\n.btn_write {\n  padding: 12px 25px;\n  background-color: #333;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n}\n\n.btn_write:hover {\n  background-color: #555;\n}\n\n.pagingWrap ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.pagingWrap li {\n  display: inline-block;\n}\n\n.pagingWrap li a {\n  margin: 0 5px;\n  text-decoration: none;\n  color: black;\n  cursor: pointer;\n}\n\n.pagingWrap li a.active {\n  font-weight: bold;\n  color: blue;\n}\n\n.pagingWrap .btn_paging_start:before {\n  content: \"<<\";\n}\n\n.pagingWrap .btn_paging_prev:before {\n  content: \"<\";\n}\n\n.pagingWrap .btn_paging_next:before {\n  content: \">\";\n}\n\n.pagingWrap .btn_paging_end:before {\n  content: \">>\";\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}