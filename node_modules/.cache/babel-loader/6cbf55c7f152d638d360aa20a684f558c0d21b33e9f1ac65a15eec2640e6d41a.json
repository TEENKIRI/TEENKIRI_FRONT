{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\nimport ChatComponent from '@/components/ChatComponent.vue'; // 채팅 컴포넌트 추가\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nexport default {\n  name: 'HeaderComponent',\n  components: {\n    ChatComponent // ChatComponent를 components에 추가\n  },\n  data() {\n    return {\n      showChatModal: false,\n      // 채팅 모달 제어를 위한 데이터\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false,\n      notifications: [],\n      loginSnackbar: false,\n      // 로그인 안내 스낵바 상태\n      stompClient: null,\n      // WebSocket 클라이언트\n      connected: false // WebSocket 연결 상태\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter(notification => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter(notification => notification.delYN === 'N');\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN';\n      this.fetchNotifications();\n      this.initEventSource(token);\n      this.connectWebSocket(); // WebSocket 연결 설정\n    }\n  },\n  methods: {\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, () => {\n        this.connected = true;\n        this.stompClient.subscribe(\"/topic/logout\", message => {\n          const email = message.body;\n          if (email === this.getUserEmail()) {\n            alert(\"누적 신고 횟수가 5회 이상이므로 계정이 영구 정지 되었습니다.\");\n            this.logout();\n          }\n        });\n      }, error => {\n        console.error('WebSocket 연결 오류:', error);\n        this.connected = false;\n      });\n    },\n    getUserEmail() {\n      return localStorage.getItem(\"email\");\n    },\n    logout() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"email\");\n      localStorage.removeItem(\"role\");\n      this.$router.push(\"/login\");\n    },\n    initEventSource(token) {\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      eventSource.addEventListener('notification', event => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n      eventSource.onerror = error => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    async fetchNotifications() {\n      if (this.isLogin) {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          this.notifications = response.data.sort((a, b) => b.id - a.id);\n        } catch (error) {\n          console.error('알림 목록을 가져오는 중 오류 발생:', error);\n        }\n      }\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          this.notifications[index].delYN = 'Y';\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId) {\n            window.location.href = `/report/list`;\n          } else {\n            console.log('error!!!!!!!!!!!');\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({\n          name: 'SubjectList',\n          params: {\n            category: 'subject'\n          }\n        });\n      } else if (section === '추천') {\n        this.$router.push({\n          name: 'SubjectRecommendList',\n          params: {\n            category: 'subjectRecommend'\n          }\n        });\n      } else if (section === '이벤트') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'event'\n          }\n        });\n      } else if (section === '공지사항') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'notice'\n          }\n        });\n      } else if (section === '자유게시판') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'post'\n          }\n        });\n      } else if (section === 'QnA') {\n        this.$router.push({\n          name: 'QnaList',\n          params: {\n            category: 'qna'\n          }\n        });\n      } else if (section === '신고리스트') {\n        if (this.isAdmin) {\n          this.$router.push({\n            name: 'ReportList',\n            params: {\n              category: 'report'\n            }\n          });\n        } else {\n          console.log('관리자만 접근할 수 있습니다.');\n        }\n      } else {\n        console.log(section);\n      }\n    },\n    goToDeleteAccountPage() {\n      this.$router.push({\n        name: 'DeleteAccount'\n      });\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    handleAccountClick() {\n      if (this.isLogin) {\n        this.$emit('open-sidebar');\n      } else {\n        this.loginSnackbar = true; // 로그인 안내 스낵바 열기\n      }\n    },\n    closeLoginSnackbar() {\n      this.loginSnackbar = false;\n    },\n    goToLoginPage() {\n      this.loginSnackbar = false;\n      this.$router.push('/login');\n    }\n  }\n};","map":{"version":3,"names":["EventSourcePolyfill","axios","ChatComponent","SockJS","Stomp","name","components","data","showChatModal","logo","require","isLogin","isAdmin","notifications","loginSnackbar","stompClient","connected","computed","unreadNotificationsCount","filter","notification","delYN","length","unreadNotifications","mounted","token","localStorage","getItem","fetchNotifications","initEventSource","connectWebSocket","methods","socket","process","env","VUE_APP_API_BASE_URL","over","connect","subscribe","message","email","body","getUserEmail","alert","logout","error","console","removeItem","$router","push","eventSource","headers","Authorization","addEventListener","event","JSON","parse","onerror","response","get","sort","a","b","id","markAsReadAndNavigate","index","postId","window","location","href","qnaId","reportId","log","navigate","section","params","category","goToDeleteAccountPage","goToMember","handleAccountClick","$emit","closeLoginSnackbar","goToLoginPage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <v-col>\n          <v-toolbar-title>\n            <router-link to=\"/\" class=\"logo\">\n              <img :src=\"logo\" alt=\"로고\" class=\"logo-image\" style=\"max-width:100%;\" />\n            </router-link>\n          </v-toolbar-title>\n        </v-col>\n        <v-col>\n          <v-row class=\"menu flex-nowrap\">\n            <v-btn text @click=\"navigate('강좌')\">강좌</v-btn>\n            <v-btn text @click=\"navigate('추천')\">추천</v-btn>\n            <v-btn text @click=\"navigate('이벤트')\">이벤트</v-btn>\n            <v-btn text @click=\"navigate('공지사항')\">공지사항</v-btn>\n            <v-btn text @click=\"navigate('자유게시판')\">자유게시판</v-btn>\n            <v-btn text @click=\"navigate('QnA')\">질문게시판</v-btn>\n            <v-btn v-if=\"isAdmin\" text @click=\"navigate('신고리스트')\">신고리스트</v-btn>\n          </v-row>\n        </v-col>\n        <v-col class=\"text-right\">\n          <v-btn icon @click=\"handleAccountClick\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n\n          <v-btn icon class=\"teen_red_font\">\n            <v-badge\n              color=\"red\"\n              :content=\"unreadNotificationsCount\"\n              overlap\n              v-if=\"unreadNotificationsCount > 0\"\n            >\n              <v-icon>mdi-bell</v-icon>\n            </v-badge>\n            <v-icon v-else>mdi-bell</v-icon>\n\n            <v-menu activator=\"parent\" offset-y>\n              <!-- 알림 목록 -->\n              <v-list max-width=\"300\" max-height=\"400\" style=\"overflow-y: auto;\">\n                <template v-if=\"unreadNotifications.length > 0\">\n                  <v-list-item\n                    v-for=\"(notification, index) in unreadNotifications\"\n                    :key=\"index\"\n                    :class=\"{'unread-notification': notification.delYN === 'N'}\"\n                    @click=\"markAsReadAndNavigate(notification, index)\"\n                  >\n                    <v-list-item-content>\n                      <v-list-item-title>{{ notification.message }}</v-list-item-title>\n                    </v-list-item-content>\n                  </v-list-item>\n                </template>\n                <template v-else>\n                  <v-list-item>\n                    <v-list-item-content>\n                      <v-list-item-title>알림이 없습니다</v-list-item-title>\n                    </v-list-item-content>\n                  </v-list-item>\n                </template>\n              </v-list>\n            </v-menu>\n          </v-btn>\n\n          <v-btn icon @click=\"showChatModal = true\">\n            <v-icon>mdi-chat</v-icon>\n          </v-btn>\n\n          <v-dialog v-model=\"showChatModal\" max-width=\"600px\">\n            <v-card>\n              <v-card-title class=\"headline\">채팅</v-card-title>\n              <v-card-text>\n                <ChatComponent />\n              </v-card-text>\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn color=\"primary\" @click=\"showChatModal = false\">닫기</v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-dialog>\n\n\n          <v-btn icon @click=\"goToDeleteAccountPage\" v-if=\"isLogin\" class=\"mr-2\">\n            <v-icon>mdi-account-remove</v-icon>\n          </v-btn>\n\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-app-bar>\n\n  <!-- 로그인 안내 스낵바 (중앙 모달 스타일) -->\n  <v-snackbar color=\"white\"\n    v-model=\"loginSnackbar\" \n    :timeout=\"3000\"\n    class=\"custom-snackbar\"\n    top\n  >\n    <div class=\"snackbar-content\">\n      로그인을 하셔야 해당 기능을 사용할 수 있습니다.\n      <v-btn color=\"#6fc8b8\" text @click=\"goToLoginPage\">로그인</v-btn>\n      <v-btn color=\"#6fc8b8\" text @click=\"closeLoginSnackbar\">닫기</v-btn>\n    </div>\n  </v-snackbar>\n</template>\n\n<script>\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\nimport ChatComponent from '@/components/ChatComponent.vue'; // 채팅 컴포넌트 추가\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\n\nexport default {\n  name: 'HeaderComponent',\n  components: {\n    ChatComponent, // ChatComponent를 components에 추가\n  },\n  data() {\n    return {\n      showChatModal: false, // 채팅 모달 제어를 위한 데이터\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false,\n      notifications: [],\n      loginSnackbar: false, // 로그인 안내 스낵바 상태\n      stompClient: null,    // WebSocket 클라이언트\n      connected: false,     // WebSocket 연결 상태\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter((notification) => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter((notification) => notification.delYN === 'N');\n    },\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN';\n      this.fetchNotifications();\n      this.initEventSource(token);\n      this.connectWebSocket();  // WebSocket 연결 설정\n    }\n  },\n  methods: {\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, () => {\n        this.connected = true;\n        this.stompClient.subscribe(\"/topic/logout\", (message) => {\n          const email = message.body;\n          if (email === this.getUserEmail()) {  \n            alert(\"누적 신고 횟수가 5회 이상이므로 계정이 영구 정지 되었습니다.\");\n            this.logout();\n          }\n        });\n      }, (error) => {\n        console.error('WebSocket 연결 오류:', error);\n        this.connected = false;\n      });\n    },\n    getUserEmail() {\n      return localStorage.getItem(\"email\");\n    },\n    logout() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"email\");\n      localStorage.removeItem(\"role\");\n      this.$router.push(\"/login\");\n    },\n    initEventSource(token) {\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      eventSource.addEventListener('notification', (event) => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n\n      eventSource.onerror = (error) => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    async fetchNotifications() {\n      if (this.isLogin) {\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n\n          this.notifications = response.data.sort((a, b) => b.id - a.id);\n        } catch (error) {\n          console.error('알림 목록을 가져오는 중 오류 발생:', error);\n        }\n      }\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n          this.notifications[index].delYN = 'Y';\n\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId) {\n            window.location.href = `/report/list`;\n          } else {\n            console.log('error!!!!!!!!!!!');\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({ name: 'SubjectList', params: { category: 'subject' } });\n      } else if (section === '추천') {\n        this.$router.push({ name: 'SubjectRecommendList', params: { category: 'subjectRecommend' } });\n      } else if (section === '이벤트') {\n        this.$router.push({ name: 'BoardList', params: { category: 'event' } });\n      } else if (section === '공지사항') {\n        this.$router.push({ name: 'BoardList', params: { category: 'notice' } });\n      } else if (section === '자유게시판') {\n        this.$router.push({ name: 'BoardList', params: { category: 'post' } });\n      } else if (section === 'QnA') {\n        this.$router.push({ name: 'QnaList', params: { category: 'qna' } });\n      } else if (section === '신고리스트') {\n        if (this.isAdmin) {\n          this.$router.push({ name: 'ReportList', params: { category: 'report' } });\n        } else {\n          console.log('관리자만 접근할 수 있습니다.');\n        }\n      } else {\n        console.log(section);\n      }\n    },\n    goToDeleteAccountPage() {\n        this.$router.push({ name: 'DeleteAccount' });\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    handleAccountClick() {\n      if (this.isLogin) {\n        this.$emit('open-sidebar');\n      } else {\n        this.loginSnackbar = true; // 로그인 안내 스낵바 열기\n      }\n    },\n    closeLoginSnackbar() {\n      this.loginSnackbar = false;\n    },\n    goToLoginPage() {\n      this.loginSnackbar =false\n      this.$router.push('/login');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%;\n}\n\n.unread-notification {\n  background-color: white;\n}\n\n.v-list-item {\n  background-color: white;\n}\n\n.custom-snackbar {\n  color:#ffdb69 !important;\n  margin: auto;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 8px;\n\n}\n\n.v-snackbar--variant-elevated, \n.v-snackbar--variant-flat {\n  background-color: white !important; /* 흰색 배경 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}