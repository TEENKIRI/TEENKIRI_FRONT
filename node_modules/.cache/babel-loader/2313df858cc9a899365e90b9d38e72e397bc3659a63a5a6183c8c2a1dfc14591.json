{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nexport default {\n  name: \"LoginPage\",\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      rememberEmail: false,\n      autoLogin: false\n    };\n  },\n  mounted() {\n    const savedEmail = localStorage.getItem('savedEmail');\n    if (savedEmail) {\n      this.email = savedEmail;\n      this.rememberEmail = true;\n    }\n  },\n  methods: {\n    async doLogin() {\n      try {\n        const loginData = {\n          email: this.email,\n          password: this.password,\n          rememberEmail: this.rememberEmail,\n          autoLogin: this.autoLogin\n        };\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/login`, loginData);\n        console.log('로그인 성공');\n        const token = response.data.result;\n        const decodedToken = jwtDecode(token);\n        const role = decodedToken.role;\n        const userId = decodedToken.userId;\n        localStorage.setItem('token', token);\n        localStorage.setItem('role', role);\n        localStorage.setItem('userId', userId); // user.id 저장\n        localStorage.setItem('email', this.email); // email 저장\n\n        if (this.rememberEmail) {\n          localStorage.setItem('savedEmail', this.email); // 이메일 저장\n        } else {\n          localStorage.removeItem('savedEmail'); // 이메일 삭제\n        }\n        window.location.href = \"/\";\n      } catch (e) {\n        alert('로그인 실패');\n        console.error(e);\n        const error_message = e.response?.data?.status_message || \"로그인에 실패했습니다.\";\n        alert(error_message);\n      }\n    },\n    googleLogin() {\n      window.location.href = 'http://localhost:8088/oauth2/authorization/google';\n    },\n    findId() {\n      this.$router.push(\"/user/find-id\");\n    },\n    findPassword() {\n      this.$router.push(\"/user/find-password\");\n    },\n    signUp() {\n      this.$router.push(\"/user/create\");\n    }\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","name","data","email","password","rememberEmail","autoLogin","mounted","savedEmail","localStorage","getItem","methods","doLogin","loginData","response","post","process","env","VUE_APP_API_BASE_URL","console","log","token","result","decodedToken","role","userId","setItem","removeItem","window","location","href","e","alert","error","error_message","status_message","googleLogin","findId","$router","push","findPassword","signUp"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/user/LoginPage.vue"],"sourcesContent":["<template>\n  <v-container>\n      <v-row justify=\"center\">\n          <v-col cols=\"12\" sm=\"6\" md=\"8\">\n              <v-card>\n                  <v-card-title class=\"text-h5 text-center\">로그인</v-card-title>\n                  <v-card-text>\n                      <v-form @submit.prevent=\"doLogin\">\n                          <v-text-field\n                              label=\"아이디(이메일)\"\n                              v-model=\"email\"\n                              type=\"email\"\n                              prepend-icon=\"mdi-email\"\n                              required\n                          ></v-text-field>\n                          <v-text-field\n                              label=\"비밀번호\"\n                              v-model=\"password\"\n                              type=\"password\"\n                              prepend-icon=\"mdi-lock\"\n                              required\n                          ></v-text-field>\n                          <v-checkbox\n                              v-model=\"rememberEmail\"\n                              label=\"ID 저장\"\n                          ></v-checkbox>\n                          <v-checkbox\n                              v-model=\"autoLogin\"\n                              label=\"자동로그인\"\n                          ></v-checkbox>\n                          <v-btn block type=\"submit\" color=\"primary\">로그인</v-btn>\n                          <v-divider class=\"my-4\"></v-divider>\n                          <v-btn block color=\"warning\" @click=\"googleLogin\">구글 로그인</v-btn>\n                          <v-divider class=\"my-4\"></v-divider>\n                          <v-list>\n                              <v-list-item @click=\"findId\">\n                                  <v-list-item-title>아이디 찾기</v-list-item-title>\n                              </v-list-item>\n                              <v-list-item @click=\"findPassword\">\n                                  <v-list-item-title>비밀번호 찾기</v-list-item-title>\n                              </v-list-item>\n                              <v-list-item @click=\"signUp\">\n                                <v-img :src=\"require('../assets/images/google.png')\"></v-img>\n                              </v-list-item>\n                          </v-list>\n                      </v-form>\n                  </v-card-text>\n              </v-card>\n          </v-col>\n      </v-row>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport {jwtDecode} from 'jwt-decode';\n\nexport default {\n    name: \"LoginPage\",\n    data() {\n        return {\n            email: \"\",\n            password: \"\",\n            rememberEmail: false,\n            autoLogin: false,\n        };\n    },\n    mounted() {\n        const savedEmail = localStorage.getItem('savedEmail');\n        if (savedEmail) {\n            this.email = savedEmail;\n            this.rememberEmail = true;\n        }\n    },\n    methods: {\n        async doLogin() {\n            try {\n                const loginData = {\n                    email: this.email,\n                    password: this.password,\n                    rememberEmail: this.rememberEmail,\n                    autoLogin: this.autoLogin,\n                };\n                const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/user/login`, loginData);\n                console.log('로그인 성공');\n                const token = response.data.result;\n                const decodedToken = jwtDecode(token);\n                const role = decodedToken.role;\n                const userId = decodedToken.userId;\n\n              localStorage.setItem('token', token);\n              localStorage.setItem('role', role);\n              localStorage.setItem('userId', userId);  // user.id 저장\n              localStorage.setItem('email', this.email);  // email 저장\n\n                if (this.rememberEmail) {\n                    localStorage.setItem('savedEmail', this.email);  // 이메일 저장\n                } else {\n                    localStorage.removeItem('savedEmail');  // 이메일 삭제\n                }\n\n                window.location.href = \"/\";\n            } catch (e) {\n                alert('로그인 실패');\n                console.error(e);\n                const error_message = e.response?.data?.status_message || \"로그인에 실패했습니다.\";\n                alert(error_message);\n            }\n        },\n        googleLogin() {\n            window.location.href = 'http://localhost:8088/oauth2/authorization/google';\n    },\n        findId() {\n            this.$router.push(\"/user/find-id\");\n        },\n        findPassword() {\n            this.$router.push(\"/user/find-password\");\n        },\n        signUp() {\n            this.$router.push(\"/user/create\");\n        },\n    },\n};\n</script>\n"],"mappings":";AAsDA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAAQC,SAAS,QAAO,YAAY;AAEpC,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,KAAK;MACpBC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,MAAMC,UAAS,GAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,IAAIF,UAAU,EAAE;MACZ,IAAI,CAACL,KAAI,GAAIK,UAAU;MACvB,IAAI,CAACH,aAAY,GAAI,IAAI;IAC7B;EACJ,CAAC;EACDM,OAAO,EAAE;IACL,MAAMC,OAAOA,CAAA,EAAG;MACZ,IAAI;QACA,MAAMC,SAAQ,GAAI;UACdV,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,aAAa,EAAE,IAAI,CAACA,aAAa;UACjCC,SAAS,EAAE,IAAI,CAACA;QACpB,CAAC;QACD,MAAMQ,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,aAAa,EAAEL,SAAS,CAAC;QAC9FM,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB,MAAMC,KAAI,GAAIP,QAAQ,CAACZ,IAAI,CAACoB,MAAM;QAClC,MAAMC,YAAW,GAAIvB,SAAS,CAACqB,KAAK,CAAC;QACrC,MAAMG,IAAG,GAAID,YAAY,CAACC,IAAI;QAC9B,MAAMC,MAAK,GAAIF,YAAY,CAACE,MAAM;QAEpChB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;QACpCZ,YAAY,CAACiB,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC;QAClCf,YAAY,CAACiB,OAAO,CAAC,QAAQ,EAAED,MAAM,CAAC,EAAG;QACzChB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAE,IAAI,CAACvB,KAAK,CAAC,EAAG;;QAE1C,IAAI,IAAI,CAACE,aAAa,EAAE;UACpBI,YAAY,CAACiB,OAAO,CAAC,YAAY,EAAE,IAAI,CAACvB,KAAK,CAAC,EAAG;QACrD,OAAO;UACHM,YAAY,CAACkB,UAAU,CAAC,YAAY,CAAC,EAAG;QAC5C;QAEAC,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,GAAG;MAC9B,EAAE,OAAOC,CAAC,EAAE;QACRC,KAAK,CAAC,QAAQ,CAAC;QACfb,OAAO,CAACc,KAAK,CAACF,CAAC,CAAC;QAChB,MAAMG,aAAY,GAAIH,CAAC,CAACjB,QAAQ,EAAEZ,IAAI,EAAEiC,cAAa,IAAK,cAAc;QACxEH,KAAK,CAACE,aAAa,CAAC;MACxB;IACJ,CAAC;IACDE,WAAWA,CAAA,EAAG;MACVR,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,mDAAmD;IAClF,CAAC;IACGO,MAAMA,CAAA,EAAG;MACL,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;IACtC,CAAC;IACDC,YAAYA,CAAA,EAAG;MACX,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,qBAAqB,CAAC;IAC5C,CAAC;IACDE,MAAMA,CAAA,EAAG;MACL,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC;IACrC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}