{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      boardItems: [],\n      // 게시글 목록 데이터\n      currentPage: 1,\n      // 현재 페이지 번호\n      totalPages: 1,\n      // 총 페이지 수\n      itemsPerPage: 10,\n      // 페이지당 항목 수\n      isAdmin: false,\n      // 관리자인지 여부\n      userId: null,\n      // 현재 로그인된 사용자의 ID\n      role: null,\n      // 현재 로그인된 사용자의 역할\n      category: '',\n      // 현재 게시판 종류\n      boardTitle: '',\n      // 게시판 제목\n      activeItem: null // 현재 열려있는 conLayer의 아이템 ID\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems' // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkUserRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkUserRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n      this.role = role;\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1,\n            // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage // 페이지당 항목 수\n          }\n        });\n        console.log(response.data); // 응답 데이터를 콘솔에 출력\n        const data = response.data.result || response.data; // result 안에 데이터가 없다면 데이터 자체 사용\n        this.boardItems = data.content || data; // content가 없다면 데이터 자체 사용\n        this.totalPages = data.totalPages || 1; // totalPages가 없다면 1로 기본값 설정\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({\n        name: 'BoardCreate',\n        params: {\n          category: this.category\n        }\n      });\n    },\n    goToDetail(id, category) {\n      this.$router.push({\n        name: 'BoardDetail',\n        params: {\n          category,\n          id\n        }\n      });\n    },\n    canEditOrDelete(item) {\n      if (this.category === 'post') {\n        return this.isAdmin || item.userId === this.userId;\n      } else {\n        return this.isAdmin;\n      }\n    },\n    toggleConLayer(itemId) {\n      if (this.activeItem === itemId) {\n        this.activeItem = null;\n      } else {\n        this.activeItem = itemId;\n      }\n    },\n    modifyPost(id) {\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id,\n          category: this.category\n        }\n      });\n    },\n    async deletePost(id) {\n      if (confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n        let apiUrl = '';\n        if (this.category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n        } else if (this.category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n        } else if (this.category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n        } else {\n          console.error('잘못된 카테고리입니다.');\n          return;\n        }\n        try {\n          await axios.delete(apiUrl);\n          this.fetchBoardItems();\n          alert('게시글이 삭제되었습니다.');\n        } catch (error) {\n          console.error('게시글을 삭제하는 데 실패했습니다:', error);\n          alert('게시글 삭제에 실패했습니다.');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","boardItems","currentPage","totalPages","itemsPerPage","isAdmin","userId","role","category","boardTitle","activeItem","watch","created","checkUserRole","fetchBoardItems","localStorage","getItem","methods","$route","params","setBoardTitle","apiUrl","process","env","VUE_APP_API_BASE_URL","console","error","response","get","page","size","log","result","content","alert","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goToPreviousPage","goToNextPage","goToPage","createNewPost","$router","push","name","goToDetail","id","canEditOrDelete","item","toggleConLayer","itemId","modifyPost","deletePost","confirm","delete"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"inner\">\n      <h1 class=\"board-title\">{{ boardTitle }}</h1>\n      <table class=\"tbl_list\">\n        <caption></caption>\n        <colgroup>\n          <col width=\"80\" />\n          <col width=\"\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n          <col width=\"140\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th scope=\"col\">번호</th>\n            <th scope=\"col\">제목</th>\n            <th scope=\"col\">작성자</th>\n            <th scope=\"col\">작성일</th>\n            <th scope=\"col\">관리</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n            <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n            <td @click=\"goToDetail(item.id, category)\" class=\"text_left subject\">{{ item.title }}</td>\n            <td>{{ item.nickname }}</td>\n            <td>{{ formatDate(item.createdTime) }}</td>\n            <td>\n              <button\n                type=\"button\"\n                class=\"btn_adm_control\"\n                v-if=\"canEditOrDelete(item)\"\n                @click=\"toggleConLayer(item.id)\"\n              >•••</button>\n              <div class=\"conLayer\" v-if=\"activeItem === item.id\">\n                <a href=\"javascript:void(0)\" class=\"btn_board_modify\" @click=\"modifyPost(item.id)\">수정</a>\n                <a href=\"javascript:void(0)\" class=\"btn_board_del btn_del\" @click=\"deletePost(item.id)\">삭제</a>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"btnWrap\">\n        <button @click=\"createNewPost\" class=\"btn_write\">작성하기</button>\n      </div>\n      <div class=\"pagingWrap\">\n        <ul>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(1)\" class=\"btn_paging_start\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPreviousPage\" class=\"btn_paging_prev\"></a></li>\n          <li v-for=\"page in totalPages\" :key=\"page\">\n            <a href=\"javascript:void(0)\" @click=\"goToPage(page)\" :class=\"{ btn_paging: true, active: currentPage === page }\">{{ page }}</a>\n          </li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToNextPage\" class=\"btn_paging_next\"></a></li>\n          <li><a href=\"javascript:void(0)\" @click=\"goToPage(totalPages)\" class=\"btn_paging_end\"></a></li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      userId: null, // 현재 로그인된 사용자의 ID\n      role: null, // 현재 로그인된 사용자의 역할\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n      activeItem: null, // 현재 열려있는 conLayer의 아이템 ID\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems', // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkUserRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkUserRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n      this.role = role;\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1, // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage, // 페이지당 항목 수\n          },\n        });\n        console.log(response.data); // 응답 데이터를 콘솔에 출력\n    const data = response.data.result || response.data; // result 안에 데이터가 없다면 데이터 자체 사용\n    this.boardItems = data.content || data; // content가 없다면 데이터 자체 사용\n    this.totalPages = data.totalPages || 1; // totalPages가 없다면 1로 기본값 설정\n  } catch (error) {\n    console.error('목록을 가져오는 데 실패했습니다:', error);\n    alert('목록을 가져오는 데 실패했습니다.');\n  }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id, category) {\n      this.$router.push({ name: 'BoardDetail', params: { category, id } });\n    },\n    canEditOrDelete(item) {\n      if (this.category === 'post') {\n        return this.isAdmin || item.userId === this.userId;\n      } else {\n        return this.isAdmin;\n      }\n    },\n    toggleConLayer(itemId) {\n      if (this.activeItem === itemId) {\n        this.activeItem = null;\n      } else {\n        this.activeItem = itemId;\n      }\n    },\n    modifyPost(id) {\n      this.$router.push({ name: 'BoardUpdate', params: { id, category: this.category } });\n    },\n    async deletePost(id) {\n      if (confirm('정말로 이 게시글을 삭제하시겠습니까?')) {\n        let apiUrl = '';\n        if (this.category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n        } else if (this.category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n        } else if (this.category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n        } else {\n          console.error('잘못된 카테고리입니다.');\n          return;\n        }\n\n        try {\n          await axios.delete(apiUrl);\n          this.fetchBoardItems();\n          alert('게시글이 삭제되었습니다.');\n        } catch (error) {\n          console.error('게시글을 삭제하는 데 실패했습니다:', error);\n          alert('게시글 삭제에 실패했습니다.');\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* (CSS 스타일은 그대로 유지) */\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n\n.inner {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.tbl_list {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_list th,\n.tbl_list td {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: left;\n}\n\n.tbl_list th {\n  background-color: #f4f4f4;\n}\n\n.text_left {\n  text-align: left;\n}\n\n.subject {\n  cursor: pointer;\n  color: #333;\n  text-decoration: none;\n}\n\n.subject:hover {\n  text-decoration: underline;\n}\n\n.btn_adm_control {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n}\n\n.conLayer {\n  display: inline-block;\n  background-color: #f4f4f4;\n  border: 1px solid #ccc;\n  position: absolute;\n  z-index: 1;\n}\n\n.btnWrap {\n  text-align: right;\n  margin-top: 20px;\n}\n\n.btn_write {\n  padding: 10px 20px;\n  background-color: #f27885;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n}\n\n.btn_write:hover {\n  background-color: #fa5263;\n}\n\n.pagingWrap ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.pagingWrap li {\n  display: inline-block;\n}\n\n.pagingWrap li a {\n  margin: 0 5px;\n  text-decoration: none;\n  color: black;\n  cursor: pointer;\n}\n\n.pagingWrap li a.active {\n  font-weight: bold;\n  color: blue;\n}\n\n.pagingWrap .btn_paging_start:before {\n  content: \"<<\";\n}\n\n.pagingWrap .btn_paging_prev:before {\n  content: \"<\";\n}\n\n.pagingWrap .btn_paging_next:before {\n  content: \">\";\n}\n\n.pagingWrap .btn_paging_end:before {\n  content: \">>\";\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}