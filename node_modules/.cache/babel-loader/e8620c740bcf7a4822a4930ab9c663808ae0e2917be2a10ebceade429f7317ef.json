{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3b9be7f1\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"board-container\"\n};\nconst _hoisted_2 = {\n  class: \"board-title\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"board-table\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"번호\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"제목\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"작성자\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"작성일\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", null, \"관리\", -1 /* HOISTED */));\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 0,\n  class: \"control\"\n};\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = {\n  key: 1,\n  class: \"control\"\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = {\n  class: \"pagination\"\n};\nconst _hoisted_18 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.boardTitle), 1 /* TEXT */), $data.isAdmin || $data.category === 'post' ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_3, [_createElementVNode(\"button\", {\n    class: \"create-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.createNewPost && $options.createNewPost(...args))\n  }, \"게시글 작성\")])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"table\", _hoisted_4, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_hoisted_5, _hoisted_6, _hoisted_7, _hoisted_8, _hoisted_9, $data.category === 'post' ? (_openBlock(), _createElementBlock(\"th\", _hoisted_10, \"신고\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 신고 열 추가 \")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boardItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(index + 1 + ($data.currentPage - 1) * $data.itemsPerPage), 1 /* TEXT */), _createElementVNode(\"td\", {\n      onClick: $event => $options.goToDetail(item.id, $data.category),\n      class: \"clickable\"\n    }, _toDisplayString(item.title), 9 /* TEXT, PROPS */, _hoisted_11), _createElementVNode(\"td\", null, _toDisplayString(item.nickname), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(item.createdTime)), 1 /* TEXT */), $options.canEditOrDelete(item) ? (_openBlock(), _createElementBlock(\"td\", _hoisted_12, [_createElementVNode(\"button\", {\n      onClick: $event => $options.updateItem(item.id, $data.category)\n    }, \"수정\", 8 /* PROPS */, _hoisted_13), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteItem(item.id, $data.category)\n    }, \"삭제\", 8 /* PROPS */, _hoisted_14)])) : _createCommentVNode(\"v-if\", true), _ctx.canReport() ? (_openBlock(), _createElementBlock(\"td\", _hoisted_15, [_createTextVNode(\" 자유게시판일 때만 신고 버튼 추가 \"), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.reportItem(item.id)\n    }, \"신고\", 8 /* PROPS */, _hoisted_16)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPreviousPage && $options.goToPreviousPage(...args))\n  }, \"Previous\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalPages, page => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: page,\n      onClick: $event => $options.goToPage(page),\n      class: _normalizeClass({\n        active: $data.currentPage === page\n      })\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_18);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.goToNextPage && $options.goToNextPage(...args))\n  }, \"Next\")])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","boardTitle","isAdmin","category","_hoisted_3","onClick","_cache","args","$options","createNewPost","_createCommentVNode","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_Fragment","_renderList","boardItems","item","index","id","currentPage","itemsPerPage","$event","goToDetail","title","_hoisted_11","nickname","formatDate","createdTime","canEditOrDelete","_hoisted_12","updateItem","_hoisted_13","deleteItem","_hoisted_14","_ctx","canReport","_hoisted_15","_createTextVNode","reportItem","_hoisted_16","_hoisted_17","goToPreviousPage","totalPages","page","goToPage","_normalizeClass","active","_hoisted_18","goToNextPage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1 class=\"board-title\">{{ boardTitle }}</h1>\n    <h2 v-if=\"isAdmin || category === 'post'\">\n      <button class=\"create-button\" @click=\"createNewPost\">게시글 작성</button>\n    </h2>\n    <table class=\"board-table\">\n      <thead>\n        <tr>\n          <th>번호</th>\n          <th>제목</th>\n          <th>작성자</th>\n          <th>작성일</th>\n          <th>관리</th>\n          <th v-if=\"category === 'post'\">신고</th> <!-- 신고 열 추가 -->\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n          <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n          <td @click=\"goToDetail(item.id, category)\" class=\"clickable\">{{ item.title }}</td>\n          <td>{{ item.nickname }}</td>\n          <td>{{ formatDate(item.createdTime) }}</td>\n          <td v-if=\"canEditOrDelete(item)\" class=\"control\">\n            <button @click=\"updateItem(item.id, category)\">수정</button>\n            <button @click=\"deleteItem(item.id, category)\">삭제</button>\n          </td>\n          <td v-if=\"canReport()\" class=\"control\"> 자유게시판일 때만 신고 버튼 추가\n            <button @click=\"reportItem(item.id)\">신고</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"pagination\">\n      <button @click=\"goToPreviousPage\">Previous</button>\n      <span v-for=\"page in totalPages\" :key=\"page\" @click=\"goToPage(page)\" :class=\"{ active: currentPage === page }\">{{ page }}</span>\n      <button @click=\"goToNextPage\">Next</button>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      userId: null, // 현재 로그인된 사용자의 ID\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems', // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkAdminRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n    this.userId = localStorage.getItem('userId'); // 로컬스토리지에서 userId 가져오기\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1, // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage, // 페이지당 항목 수\n          },\n        });\n        const data = response.data.result;\n        this.boardItems = data.content;\n        this.totalPages = data.totalPages;\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (this.category !== 'post' && !this.isAdmin) {\n        alert('관리자만 이 게시판에 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id, category) {\n      this.$router.push({ name: 'BoardDetail', params: { category, id } });\n    },\n    updateItem(id, category) {\n      this.$router.push({ name: 'BoardUpdate', params: { category, id } });\n    },\n    async deleteItem(id, category) {\n      try {\n        const confirmed = confirm('이 게시글을 삭제하시겠습니까?');\n        if (confirmed) {\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n          } else if (category === 'post') {\n            apiUrl =`${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.fetchBoardItems(); // 삭제 후 목록을 다시 로드\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    canEditOrDelete(item) {\n      // console.log(item.user_id)\n      // Admin이거나, 게시글 작성자가 현재 로그인한 사용자와 동일한 경우에만 true\n      return this.isAdmin || (item.user_id === parseInt(this.userId, 10) && this.category === 'post');\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.board-table th,\n.board-table td {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: left;\n}\n\n.board-table th {\n  background-color: #f4f4f4;\n}\n\n.board-table td.clickable {\n  cursor: pointer;\n  color: blue;\n  text-decoration: underline;\n}\n\n.control button {\n  margin-right: 5px;\n}\n\n.pagination {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.pagination button {\n  margin: 0 5px;\n}\n\n.pagination span {\n  margin: 0 5px;\n  cursor: pointer;\n}\n\n.pagination .active {\n  font-weight: bold;\n  color: blue;\n}\n\n.create-button {\n  display: block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.create-button:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}