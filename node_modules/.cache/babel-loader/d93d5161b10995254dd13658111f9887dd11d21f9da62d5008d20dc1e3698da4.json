{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: \"QnAList\",\n  data() {\n    return {\n      qnaList: [] // 초기값은 빈 배열\n    };\n  },\n  async mounted() {\n    await this.fetchQnAList(); // 컴포넌트가 마운트될 때 Q&A 리스트를 불러옵니다.\n  },\n  methods: {\n    async fetchQnAList() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/qna`);\n        if (response.status === 200) {\n          this.qnaList = response.data.result; // 응답 데이터에서 Q&A 리스트를 추출\n        } else {\n          console.error('Q&A 리스트 가져오기 실패:', response.data.message || response.statusText);\n        }\n      } catch (error) {\n        console.error('Q&A 리스트 가져오기 중 오류 발생:', error.response ? error.response.data.message : error.message);\n      }\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleString();\n    },\n    viewDetails(id) {\n      this.$router.push(`/qna/detail/${id}`); // ID를 포함한 상세 페이지 URL로 이동\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","qnaList","mounted","fetchQnAList","methods","response","get","process","env","VUE_APP_API_BASE_URL","status","result","console","error","message","statusText","formatDate","dateString","Date","toLocaleString","viewDetails","id","$router","push"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/UserQuestions.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <h1 class=\"board-title\">내 질문 목록</h1>\n\n      <table class=\"tbl_list\">\n        <caption></caption>\n        <colgroup>\n          <col width=\"80\" />\n          <col width=\"auto\" />\n          <col width=\"140\" />\n          <col width=\"160\" /> <!-- 작성일 칸의 너비를 160으로 증가 -->\n          <col width=\"140\" /> <!-- 상태 칸 추가 -->\n        </colgroup>\n        <thead>\n          <tr>\n            <th>번호</th>\n            <th>제목</th>\n            <th>상태</th>\n            <th>작성일</th>\n            <th>보기</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in qnaList\" :key=\"item.id\">\n            <td>{{ index + 1 }}</td>\n            <td @click=\"viewDetails(item.id)\" class=\"text_left subject\">{{ item.title }}</td>\n            <td>\n              <v-chip\n                :color=\"item.answeredAt ? 'green' : 'red'\"\n                dark\n                small\n              >\n                {{ item.answeredAt ? '답변완료' : '미답변' }}\n              </v-chip>\n            </td>\n            <td>{{ formatDate(item.createdTime) }}</td>\n            <td>\n              <v-btn @click=\"viewDetails(item.id)\" class=\"btn_view\" color=\"black\">\n                보기\n              </v-btn>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: \"QnAList\",\n  data() {\n    return {\n      qnaList: [] // 초기값은 빈 배열\n    };\n  },\n  async mounted() {\n    await this.fetchQnAList(); // 컴포넌트가 마운트될 때 Q&A 리스트를 불러옵니다.\n  },\n  methods: {\n    async fetchQnAList() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/user/qna`);\n        if (response.status === 200) {\n          this.qnaList = response.data.result; // 응답 데이터에서 Q&A 리스트를 추출\n        } else {\n          console.error('Q&A 리스트 가져오기 실패:', response.data.message || response.statusText);\n        }\n      } catch (error) {\n        console.error('Q&A 리스트 가져오기 중 오류 발생:', error.response ? error.response.data.message : error.message);\n      }\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleString();\n    },\n    viewDetails(id) {\n      this.$router.push(`/qna/detail/${id}`); // ID를 포함한 상세 페이지 URL로 이동\n    }\n  }\n};\n</script>\n\n<style scoped>\n.board-title {\n  font-size: 26px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.tbl_list {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.tbl_list th,\n.tbl_list td {\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n  padding: 10px;\n  text-align: left;\n}\n\n.tbl_list th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n\n.text_left {\n  text-align: left;\n}\n\n.subject {\n  text-decoration: none;\n  color: #333;\n  cursor: pointer;\n}\n\n.subject:hover {\n  text-decoration: underline;\n}\n\n.btn_view {\n  text-transform: uppercase;\n  color: #fff; /* 텍스트 색상 흰색 */\n}\n\n.v-btn.btn_view:hover {\n  background-color: #333 !important; /* hover 시 검은색 유지 */\n}\n</style>\n"],"mappings":";AAkDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAC,CAAE;IACd,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;EAC7B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,WAAW,CAAC;QAChF,IAAIJ,QAAQ,CAACK,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACT,OAAM,GAAII,QAAQ,CAACL,IAAI,CAACW,MAAM,EAAE;QACvC,OAAO;UACLC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAER,QAAQ,CAACL,IAAI,CAACc,OAAM,IAAKT,QAAQ,CAACU,UAAU,CAAC;QACjF;MACF,EAAE,OAAOF,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACR,QAAO,GAAIQ,KAAK,CAACR,QAAQ,CAACL,IAAI,CAACc,OAAM,GAAID,KAAK,CAACC,OAAO,CAAC;MACtG;IACF,CAAC;IACDE,UAAUA,CAACC,UAAU,EAAE;MACrB,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,cAAc,CAAC,CAAC;IAC9C,CAAC;IACDC,WAAWA,CAACC,EAAE,EAAE;MACd,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAeF,EAAE,EAAE,CAAC,EAAE;IAC1C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}