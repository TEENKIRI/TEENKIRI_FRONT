{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3f11768f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"게시글 작성\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"category\"\n}, \"게시판 종류:\", -1 /* HOISTED */));\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"title\"\n}, \"제목:\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"content\"\n}, \"내용:\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"image\"\n}, \"이미지:\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"저장\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.category = $event),\n    id: \"category\",\n    required: \"\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCategory, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: option.value,\n      value: option.value\n    }, _toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.category]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.title = $event),\n    id: \"title\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.title]])]), _createElementVNode(\"div\", null, [_hoisted_5, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.content = $event),\n    id: \"content\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.content]])]), _createElementVNode(\"div\", null, [_hoisted_6, _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.onFileChange && $options.onFileChange(...args))\n  }, null, 32 /* NEED_HYDRATION */)]), _hoisted_7], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_2","$event","$data","category","id","required","_Fragment","_renderList","availableCategory","option","key","value","text","_hoisted_3","_hoisted_4","title","_hoisted_5","content","_hoisted_6","onChange","onFileChange","_hoisted_7"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardCreate.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>게시글 작성</h1>\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"category\">게시판 종류:</label>\n        <select v-model=\"category\" id=\"category\" required>\n          <option v-for=\"option in availableCategory\" :key=\"option.value\" :value=\"option.value\">\n            {{ option.text }}\n          </option>\n        </select>\n      </div>\n      <div>\n        <label for=\"title\">제목:</label>\n        <input type=\"text\" v-model=\"title\" id=\"title\" required>\n      </div>\n      <div>\n        <label for=\"content\">내용:</label>\n        <textarea v-model=\"content\" id=\"content\" required></textarea>\n      </div>\n      <div>\n        <label for=\"image\">이미지:</label>\n        <input type=\"file\" @change=\"onFileChange\">\n      </div>\n      <button type=\"submit\">저장</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode'; // 올바른 가져오기 방식\n\n\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      category: 'post', // 기본 게시판 종류\n      availableCategory: [], // 선택 가능한 게시판 종류\n    };\n  },\n  created() {\n    this.setAvailableCategory(); // 컴포넌트가 생성될 때 선택 가능한 게시판 종류를 설정\n  },\n  methods: {\n    setAvailableCategory() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n\n      const decodedToken = jwtDecode(token);\n      const role = decodedToken.role;\n\n      if (role === 'ADMIN') {\n        this.availableCategory = [\n          { value: 'event', text: '이벤트' },\n          { value: 'notice', text: '공지' },\n          { value: 'post', text: '자유게시판' },\n        ];\n      } else {\n        this.availableCategory = [\n          { value: 'post', text: '자유게시판' },\n        ];\n      }\n    },\n    onFileChange(e) {\n      this.image = e.target.files[0];\n    },\n    async submitForm() {\n      // 토큰 확인 및 관리자 여부 체크\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n\n      const decodedToken = jwtDecode(token);\n      if (decodedToken.role !== 'ADMIN' && this.category !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      // 폼 데이터 생성\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.category);  // 게시판 종류 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        let apiUrl = '';\n        switch (this.category) {\n          case 'event':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n            break;\n          case 'notice':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n            break;\n          case 'post':\n          default:\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n            break;\n        }\n\n        // 서버로 POST 요청 보내기\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${token}`,  // 토큰을 헤더에 추가\n          },\n        });\n        console.log('저장 성공:', response.data);\n\n        // 저장 후 적절한 게시판으로 이동\n        this.$router.push({ name: 'BoardList', params: { category: this.category } });\n      } catch (error) {\n        if (error.response) {\n          console.error('저장 실패:', error.response.data);\n        } else {\n          console.error('저장 실패: 서버와의 통신에 실패했습니다.');\n        }\n        alert('게시글 저장에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\nform {\n  display: flex;\n  flex-direction: column;\n}\n\nform > div {\n  margin-bottom: 10px;\n}\n\nbutton {\n  align-self: flex-start;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;gEAEIA,mBAAA,CAAe,YAAX,QAAM;gEAGNA,mBAAA,CAAqC;EAA9BC,GAAG,EAAC;AAAU,GAAC,SAAO;mBALrC;gEAaQD,mBAAA,CAA8B;EAAvBC,GAAG,EAAC;AAAO,GAAC,KAAG;gEAItBD,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAS,GAAC,KAAG;gEAIxBD,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAO,GAAC,MAAI;gEAGzBD,mBAAA,CAAiC;EAAzBE,IAAI,EAAC;AAAQ,GAAC,IAAE;;uBAvB5BC,mBAAA,CAyBM,cAxBJC,UAAe,EACfJ,mBAAA,CAsBO;IAtBAK,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BR,mBAAA,CAOM,cANJW,UAAqC,E,gBACrCX,mBAAA,CAIS;IAVjB,uBAAAM,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAMyBC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,EAAE,EAAC,UAAU;IAACC,QAAQ,EAAR;yBACvCb,mBAAA,CAESc,SAAA,QATnBC,WAAA,CAOmCL,KAAA,CAAAM,iBAAiB,EAA3BC,MAAM;yBAArBjB,mBAAA,CAES;MAFoCkB,GAAG,EAAED,MAAM,CAACE,KAAK;MAAGA,KAAK,EAAEF,MAAM,CAACE;wBAC1EF,MAAM,CAACG,IAAI,wBAR1BC,UAAA;2EAMyBX,KAAA,CAAAC,QAAQ,E,KAM3Bd,mBAAA,CAGM,cAFJyB,UAA8B,E,gBAC9BzB,mBAAA,CAAuD;IAAhDE,IAAI,EAAC,MAAM;IAd1B,uBAAAI,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAcoCC,KAAA,CAAAa,KAAK,GAAAd,MAAA;IAAEG,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAAlBH,KAAA,CAAAa,KAAK,E,KAEnC1B,mBAAA,CAGM,cAFJ2B,UAAgC,E,gBAChC3B,mBAAA,CAA6D;IAlBrE,uBAAAM,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAkB2BC,KAAA,CAAAe,OAAO,GAAAhB,MAAA;IAAEG,EAAE,EAAC,SAAS;IAACC,QAAQ,EAAR;iDAAtBH,KAAA,CAAAe,OAAO,E,KAE5B5B,mBAAA,CAGM,cAFJ6B,UAA+B,EAC/B7B,mBAAA,CAA0C;IAAnCE,IAAI,EAAC,MAAM;IAAE4B,QAAM,EAAAxB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAsB,YAAA,IAAAtB,QAAA,CAAAsB,YAAA,IAAAvB,IAAA,CAAY;uCAE1CwB,UAAiC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}