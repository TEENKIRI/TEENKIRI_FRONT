{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      category: 'post',\n      // 기본 게시판 종류\n      availableCategory: [] // 선택 가능한 게시판 종류\n    };\n  },\n  created() {\n    this.setAvailableCategory(); // 컴포넌트가 생성될 때 선택 가능한 게시판 종류를 설정\n  },\n  methods: {\n    setAvailableCategory() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n      const decodedToken = jwtDecode(token);\n      const role = decodedToken.role;\n      if (role === 'ADMIN') {\n        this.availableCategory = [{\n          value: 'event',\n          text: '이벤트'\n        }, {\n          value: 'notice',\n          text: '공지'\n        }, {\n          value: 'post',\n          text: '자유게시판'\n        }];\n      } else {\n        this.availableCategory = [{\n          value: 'post',\n          text: '자유게시판'\n        }];\n      }\n    },\n    onFileChange(e) {\n      this.image = e.target.files[0];\n    },\n    async submitForm() {\n      // 토큰 확인 및 관리자 여부 체크\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      const decodedToken = jwtDecode(token);\n      if (decodedToken.role !== 'ADMIN' && this.category !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      // 폼 데이터 생성\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.category); // 게시판 종류 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n      try {\n        let apiUrl = '';\n        switch (this.category) {\n          case 'event':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n            break;\n          case 'notice':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n            break;\n          case 'post':\n          default:\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n            break;\n        }\n\n        // 서버로 POST 요청 보내기\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${token}` // 토큰을 헤더에 추가\n          }\n        });\n        console.log('저장 성공:', response.data);\n\n        // 저장 후 적절한 게시판으로 이동\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: this.category\n          }\n        });\n      } catch (error) {\n        if (error.response) {\n          console.error('저장 실패:', error.response.data);\n        } else {\n          console.error('저장 실패: 서버와의 통신에 실패했습니다.');\n        }\n        alert('게시글 저장에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","data","title","content","image","category","availableCategory","created","setAvailableCategory","methods","token","localStorage","getItem","alert","$router","push","decodedToken","role","value","text","onFileChange","e","target","files","submitForm","formData","FormData","append","apiUrl","process","env","VUE_APP_API_BASE_URL","response","post","headers","console","log","name","params","error"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardCreate.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>게시글 작성</h1>\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"category\">게시판 종류:</label>\n        <select v-model=\"category\" id=\"category\" required>\n          <option v-for=\"option in availableCategory\" :key=\"option.value\" :value=\"option.value\">\n            {{ option.text }}\n          </option>\n        </select>\n      </div>\n      <div>\n        <label for=\"title\">제목:</label>\n        <input type=\"text\" v-model=\"title\" id=\"title\" required>\n      </div>\n      <div>\n        <label for=\"content\">내용:</label>\n        <textarea v-model=\"content\" id=\"content\" required></textarea>\n      </div>\n      <div>\n        <label for=\"image\">이미지:</label>\n        <input type=\"file\" @change=\"onFileChange\">\n      </div>\n      <button type=\"submit\">저장</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      category: 'post', // 기본 게시판 종류\n      availableCategory: [], // 선택 가능한 게시판 종류\n    };\n  },\n  created() {\n    this.setAvailableCategory(); // 컴포넌트가 생성될 때 선택 가능한 게시판 종류를 설정\n  },\n  methods: {\n    setAvailableCategory() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n\n      const decodedToken = jwtDecode(token);\n      const role = decodedToken.role;\n\n      if (role === 'ADMIN') {\n        this.availableCategory = [\n          { value: 'event', text: '이벤트' },\n          { value: 'notice', text: '공지' },\n          { value: 'post', text: '자유게시판' },\n        ];\n      } else {\n        this.availableCategory = [\n          { value: 'post', text: '자유게시판' },\n        ];\n      }\n    },\n    onFileChange(e) {\n      this.image = e.target.files[0];\n    },\n    async submitForm() {\n      // 토큰 확인 및 관리자 여부 체크\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n\n      const decodedToken = jwtDecode(token);\n      if (decodedToken.role !== 'ADMIN' && this.category !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      // 폼 데이터 생성\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.category);  // 게시판 종류 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        let apiUrl = '';\n        switch (this.category) {\n          case 'event':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n            break;\n          case 'notice':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n            break;\n          case 'post':\n          default:\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n            break;\n        }\n\n        // 서버로 POST 요청 보내기\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${token}`,  // 토큰을 헤더에 추가\n          },\n        });\n        console.log('저장 성공:', response.data);\n\n        // 저장 후 적절한 게시판으로 이동\n        this.$router.push({ name: 'BoardList', params: { category: this.category } });\n      } catch (error) {\n        if (error.response) {\n          console.error('저장 실패:', error.response.data);\n        } else {\n          console.error('저장 실패: 서버와의 통신에 실패했습니다.');\n        }\n        alert('게시글 저장에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\nform {\n  display: flex;\n  flex-direction: column;\n}\n\nform > div {\n  margin-bottom: 10px;\n}\n\nbutton {\n  align-self: flex-start;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}