{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      questionDetail: null,\n      newComment: '',\n      error: null,\n      deleteDialog: false,\n      // 삭제 확인 다이얼로그 표시 여부\n      userEmail: '',\n      // 토큰에서 디코드한 사용자 이메일\n      userRole: '' // 로그인된 사용자 역할\n    };\n  },\n  computed: {\n    isQuestionAuthor() {\n      return this.questionDetail && this.questionDetail.userEmail === this.userEmail;\n    },\n    isAdmin() {\n      return this.userRole === 'ADMIN';\n    },\n    canEditAnswer() {\n      return this.userRole === 'ADMIN' || this.userRole === 'TEACHER';\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.fetchQuestionDetail();\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n        this.userRole = decoded.role;\n        //   console.log('이메일?', this.userEmail)\n      } else {\n        this.$router.push('/login'); // 토큰이 없으면 로그인 페이지로 이동\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    async fetchQuestionDetail() {\n      const questionId = this.$route.params.id;\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/detail/${questionId}`);\n        this.questionDetail = response.data.result;\n        console.log(response);\n      } catch (error) {\n        this.error = error.response ? error.response.data.message : '질문 정보를 불러오는 중 오류가 발생했습니다.';\n      }\n    },\n    // 댓글 달기\n    async submitComment() {\n      const questionId = this.$route.params.id;\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, {\n          qnaId: questionId,\n          content: this.newComment,\n          userId: localStorage.getItem('userId') // 로그인한 사용자 ID\n        });\n        this.newComment = '';\n        this.fetchQuestionDetail(); // 댓글 목록 갱신을 위해 상세 정보를 다시 불러옴\n      } catch (error) {\n        this.error = '댓글 등록에 실패했습니다.';\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n        this.fetchQuestionDetail(); // 댓글 목록 갱신을 위해 상세 정보를 다시 불러옴\n      } catch (error) {\n        this.error = '댓글 삭제에 실패했습니다.';\n      }\n    },\n    confirmDeleteQuestion() {\n      this.deleteDialog = true; // 삭제 확인 다이얼로그 표시\n    },\n    async deleteQuestion() {\n      const questionId = this.$route.params.id;\n      try {\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/delete/${questionId}`);\n        this.$router.push('/qna/list'); // 삭제 후 목록으로 돌아가기\n      } catch (error) {\n        this.error = '질문 삭제에 실패했습니다.';\n      }\n    },\n    editQuestion() {\n      this.$router.push(`/qna/update/question/${this.$route.params.id}`); // 질문 수정 페이지로 이동\n    },\n    editAnswer(id) {\n      // const answerId = \n      this.$router.push(`/qna/update/answer/${id}`); // 답변 수정 페이지로 이동\n    },\n    formatDate(date) {\n      if (!date) return '';\n      const options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(date).toLocaleDateString('ko-KR', options);\n    },\n    goBack() {\n      this.$router.push('/qna/list');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","questionDetail","newComment","error","deleteDialog","userEmail","userRole","computed","isQuestionAuthor","isAdmin","canEditAnswer","created","decodeToken","fetchQuestionDetail","methods","token","localStorage","getItem","decoded","parseJwt","sub","role","$router","push","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","questionId","$route","params","id","response","get","process","env","VUE_APP_API_BASE_URL","result","console","log","message","submitComment","post","qnaId","content","userId","deleteComment","commentId","confirmDeleteQuestion","deleteQuestion","editQuestion","editAnswer","formatDate","date","options","year","month","day","hour","minute","Date","toLocaleDateString","goBack"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/QnaDetail.vue"],"sourcesContent":["<template>\n    <v-container class=\"mt-5\">\n      <v-card v-if=\"questionDetail\">\n        <v-card-title>\n          <h3>{{ questionDetail.title }}</h3>\n          <v-spacer></v-spacer>\n          <!-- 질문 수정 버튼 (작성자만 보이도록) -->\n          <v-btn v-if=\"isQuestionAuthor\" color=\"warning\" @click=\"editQuestion\">질문 수정</v-btn>\n          <!-- 삭제 버튼 (관리자만 보이도록) -->\n          <v-btn v-if=\"isAdmin\" color=\"error\" @click=\"confirmDeleteQuestion\">삭제</v-btn>\n        </v-card-title>\n  \n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\">\n              <p><strong>작성자:</strong> {{ questionDetail.questionUserNickname }}</p>\n              <p><strong>작성 시간:</strong> {{ formatDate(questionDetail.createdTime) }}</p>\n              <v-img\n                v-if=\"questionDetail.qimageUrl\"\n                :src=\"questionDetail.qimageUrl\"\n                alt=\"질문 이미지\"\n                max-width=\"400\"\n                class=\"my-3\"\n              />\n              <p><strong>질문 내용:</strong></p>\n              <p>{{ questionDetail.questionText }}</p>\n            </v-col>\n  \n            <v-col cols=\"12\" v-if=\"questionDetail.answerText\">\n              <v-divider class=\"my-3\"></v-divider>\n              <p><strong>답변자:</strong> {{ questionDetail.answeredByNickname }}</p>\n              <p><strong>답변 시간:</strong> {{ formatDate(questionDetail.answeredAt) }}</p>\n              <v-img\n                v-if=\"questionDetail.aimageUrl\"\n                :src=\"questionDetail.aimageUrl\"\n                alt=\"답변 이미지\"\n                max-width=\"400\"\n                class=\"my-3\"\n              />\n              <p><strong>답변 내용:</strong></p>\n              <p>{{ questionDetail.answerText }}</p>\n              <!-- 답변 수정 버튼 (관리자와 선생님만 보이도록) -->\n              <v-btn v-if=\"canEditAnswer\" color=\"warning\" @click=\"editAnswer\">답변 수정</v-btn>\n            </v-col>\n          </v-row>\n  \n          <!-- 댓글 목록 -->\n          <v-row>\n            <v-col cols=\"12\">\n              <v-divider class=\"my-3\"></v-divider>\n              <h4>댓글</h4>\n              <v-list>\n                <v-list-item v-for=\"comment in questionDetail.comments\" :key=\"comment.id\">\n                  <v-list-item-content>\n                    <v-list-item-title>{{ comment.nickname }} ({{ formatDate(comment.createdTime) }})</v-list-item-title>\n                    <v-list-item-subtitle>{{ comment.content }}</v-list-item-subtitle>\n                  </v-list-item-content>\n                  <!-- 댓글 삭제 버튼 (관리자만 볼 수 있음) -->\n                  <v-list-item-action v-if=\"isAdmin\">\n                    <v-btn icon @click=\"deleteComment(comment.id)\">\n                      <v-icon>mdi-delete</v-icon>\n                    </v-btn>\n                  </v-list-item-action>\n                </v-list-item>\n              </v-list>\n  \n              <!-- 댓글 작성 -->\n              <v-form @submit.prevent=\"submitComment\">\n                <v-textarea\n                  label=\"댓글 작성\"\n                  v-model=\"newComment\"\n                  required\n                />\n                <v-btn type=\"submit\" color=\"primary\">댓글 등록</v-btn>\n              </v-form>\n            </v-col>\n          </v-row>\n        </v-card-text>\n  \n        <v-card-actions>\n          <v-btn color=\"primary\" @click=\"goBack\">목록으로 돌아가기</v-btn>\n        </v-card-actions>\n      </v-card>\n  \n      <v-alert type=\"error\" v-else-if=\"error\">\n        {{ error }}\n      </v-alert>\n  \n      <v-progress-circular v-else indeterminate color=\"primary\"></v-progress-circular>\n  \n      <!-- 질문 삭제 확인 다이얼로그 -->\n      <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n        <v-card>\n          <v-card-title class=\"headline\">게시글 삭제</v-card-title>\n          <v-card-text>게시글을 정말 삭제하시겠습니까?</v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"primary\" text @click=\"deleteDialog = false\">취소</v-btn>\n            <v-btn color=\"error\" text @click=\"deleteQuestion\">삭제</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        questionDetail: null,\n        newComment: '',\n        error: null,\n        deleteDialog: false, // 삭제 확인 다이얼로그 표시 여부\n        userEmail: '', // 토큰에서 디코드한 사용자 이메일\n        userRole: '', // 로그인된 사용자 역할\n      };\n    },\n    computed: {\n      isQuestionAuthor() {\n        return this.questionDetail && this.questionDetail.userEmail === this.userEmail;\n      },\n      isAdmin() {\n        return this.userRole === 'ADMIN';\n      },\n      canEditAnswer() {\n        return this.userRole === 'ADMIN' || this.userRole === 'TEACHER';\n      }\n    },\n    created() {\n      this.decodeToken();\n      this.fetchQuestionDetail();\n    },\n    methods: {\n      decodeToken() {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const decoded = this.parseJwt(token);\n          this.userEmail = decoded.sub;\n          this.userRole = decoded.role;\n        //   console.log('이메일?', this.userEmail)\n        } else {\n          this.$router.push('/login'); // 토큰이 없으면 로그인 페이지로 이동\n        }\n      },\n      parseJwt(token) {\n        try {\n          const base64Url = token.split('.')[1];\n          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n          const jsonPayload = decodeURIComponent(\n            atob(base64)\n              .split('')\n              .map(function(c) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n              })\n              .join('')\n          );\n          return JSON.parse(jsonPayload);\n        } catch (error) {\n          return null;\n        }\n      },\n      async fetchQuestionDetail() {\n        const questionId = this.$route.params.id;\n        try {\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/detail/${questionId}`);\n          this.questionDetail = response.data.result;\n          console.log(response)\n        } catch (error) {\n          this.error = error.response ? error.response.data.message : '질문 정보를 불러오는 중 오류가 발생했습니다.';\n        }\n      },\n      // 댓글 달기\n      async submitComment() {\n        const questionId = this.$route.params.id;\n        try {\n          await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, {\n            qnaId: questionId,\n            content: this.newComment,\n            userId: localStorage.getItem('userId') // 로그인한 사용자 ID\n          });\n          this.newComment = '';\n          this.fetchQuestionDetail(); // 댓글 목록 갱신을 위해 상세 정보를 다시 불러옴\n        } catch (error) {\n          this.error = '댓글 등록에 실패했습니다.';\n        }\n      },\n      async deleteComment(commentId) {\n        try {\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchQuestionDetail(); // 댓글 목록 갱신을 위해 상세 정보를 다시 불러옴\n        } catch (error) {\n          this.error = '댓글 삭제에 실패했습니다.';\n        }\n      },\n      confirmDeleteQuestion() {\n        this.deleteDialog = true; // 삭제 확인 다이얼로그 표시\n      },\n      async deleteQuestion() {\n        const questionId = this.$route.params.id;\n        try {\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/qna/delete/${questionId}`);\n          this.$router.push('/qna/list'); // 삭제 후 목록으로 돌아가기\n        } catch (error) {\n          this.error = '질문 삭제에 실패했습니다.';\n        }\n      },\n      editQuestion() {\n        this.$router.push(`/qna/update/question/${this.$route.params.id}`); // 질문 수정 페이지로 이동\n      },\n      editAnswer(id) {\n        // const answerId = \n        this.$router.push(`/qna/update/answer/${id}`); // 답변 수정 페이지로 이동\n      },\n      formatDate(date) {\n        if (!date) return '';\n        const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };\n        return new Date(date).toLocaleDateString('ko-KR', options);\n      },\n      goBack() {\n        this.$router.push('/qna/list');\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .v-container {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  .my-3 {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}