{"ast":null,"code":"import UserCreate from \"@/views/user/UserCreate.vue\";\nimport LoginPage from \"@/views/user/LoginPage.vue\";\nimport FindIdPage from \"@/views/user/FindIdPage.vue\";\nimport FindPasswordPage from \"@/views/user/FindPasswordPage.vue\";\nimport UserList from \"@/views/user/UserList.vue\";\nimport ResetPasswordPage from \"@/views/user/ResetPasswordPage.vue\";\nimport UpdateUserInfo from \"@/views/user/UpdateUserInfo.vue\";\nimport ReportCreate from \"@/views/report/ReportCreate.vue\";\nimport SubscribePage from \"@/views/user/SubscribePage.vue\";\nimport WishListPage from \"@/views/user/WishListPage.vue\";\nimport UserNotificaiton from \"@/views/user/UserNotificaion.vue\";\nimport { jwtDecode } from \"jwt-decode\";\nexport const memberRouter = [{\n  path: '/user/create',\n  name: 'UserCreate',\n  component: UserCreate\n}, {\n  path: '/login',\n  name: 'LoginPage',\n  component: LoginPage\n}, {\n  path: '/user/find-id',\n  name: 'FindIdPage',\n  component: FindIdPage\n}, {\n  path: '/user/find-password',\n  name: 'FindPasswordPage',\n  component: FindPasswordPage\n}, {\n  path: '/user/list',\n  name: 'UserList',\n  component: UserList\n}, {\n  path: '/user/reset-password',\n  name: 'ResetPasswordPage',\n  component: ResetPasswordPage,\n  props: route => ({\n    token: route.query.token\n  })\n}, {\n  path: '/user/edit-info',\n  name: 'UpdateUserInfo',\n  component: UpdateUserInfo\n}, {\n  path: '/report',\n  name: 'ReportCreate',\n  component: ReportCreate,\n  props: route => ({\n    // 기존 게시글 정보\n    postId: route.query.postId,\n    // 댓글 정보\n    commentId: route.query.commentId,\n    // QnA 관련 추가 정보\n    qnaId: route.query.qnaId // 질문글 ID\n  })\n}, {\n  path: '/my/subject/:id',\n  name: 'SubscribePage',\n  component: SubscribePage\n}, {\n  path: '/user/wishlist',\n  name: 'WishListPage',\n  component: WishListPage\n}, {\n  path: '/user/notification',\n  name: 'UserNotificaiton',\n  component: UserNotificaiton\n},\n// {\n//     path: '/loginSuccess',\n//     component: LoginPage,\n//     beforeEnter: (to, from, next) => {\n//         const accessToken = to.query.token;\n//         const refreshToken = to.query.refreshToken; // 쿼리에서 리프레시 토큰도 가져옵니다.\n//         if (accessToken && refreshToken) {\n//             const decoded = jwtDecode(accessToken);\n//             localStorage.setItem(\"token\", accessToken);\n//             localStorage.setItem(\"refreshToken\", refreshToken); // 리프레시 토큰을 로컬 스토리지에 저장합니다.\n//             localStorage.setItem(\"email\", decoded.email);\n//             localStorage.setItem(\"role\", decoded.role);\n//             window.location.href = \"/\";\n//         } else {\n//             next('/login'); // 토큰이 없다면 로그인 페이지로 리다이렉트\n//         }\n//     }\n// }\n{\n  path: '/loginSuccess',\n  component: LoginPage,\n  beforeEnter: (to, from, next) => {\n    const accessToken = to.query.token; // 쿼리 파라미터에서 토큰을 가져옴\n    // 쿼리 파라미터에서 리프레시 토큰도 가져오려면 아래와 같이 사용합니다.\n    const refreshToken = to.query.refreshToken;\n    if (accessToken) {\n      try {\n        // JWT 토큰을 디코딩하여 사용자 정보를 추출합니다.\n        const decoded = jwtDecode(accessToken);\n        // 로컬 스토리지에 토큰과 사용자 정보를 저장합니다.\n        localStorage.setItem(\"token\", accessToken);\n        if (refreshToken) {\n          localStorage.setItem(\"refreshToken\", refreshToken);\n        }\n        localStorage.setItem(\"email\", decoded.sub); // 이메일은 JWT에서 'sub' 클레임으로 보통 저장됩니다.\n        localStorage.setItem(\"role\", decoded.role);\n\n        // 홈 페이지로 리다이렉트합니다.\n        window.location.href = \"/\";\n      } catch (error) {\n        console.error(\"Invalid token\", error);\n        next('/login'); // 토큰이 유효하지 않은 경우 로그인 페이지로 리다이렉트\n      }\n    } else {\n      next('/login'); // 토큰이 없다면 로그인 페이지로 리다이렉트\n    }\n  }\n}];","map":{"version":3,"names":["UserCreate","LoginPage","FindIdPage","FindPasswordPage","UserList","ResetPasswordPage","UpdateUserInfo","ReportCreate","SubscribePage","WishListPage","UserNotificaiton","jwtDecode","memberRouter","path","name","component","props","route","token","query","postId","commentId","qnaId","beforeEnter","to","from","next","accessToken","refreshToken","decoded","localStorage","setItem","sub","role","window","location","href","error","console"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/router/memberRouter.js"],"sourcesContent":["import UserCreate from \"@/views/user/UserCreate.vue\";\nimport LoginPage from \"@/views/user/LoginPage.vue\";\nimport FindIdPage from \"@/views/user/FindIdPage.vue\";\nimport FindPasswordPage from \"@/views/user/FindPasswordPage.vue\";\nimport UserList from \"@/views/user/UserList.vue\";\nimport ResetPasswordPage from \"@/views/user/ResetPasswordPage.vue\";\nimport UpdateUserInfo from \"@/views/user/UpdateUserInfo.vue\";\nimport ReportCreate from \"@/views/report/ReportCreate.vue\";\nimport SubscribePage from \"@/views/user/SubscribePage.vue\";\nimport WishListPage from \"@/views/user/WishListPage.vue\";\n\nimport UserNotificaiton from \"@/views/user/UserNotificaion.vue\"\nimport { jwtDecode } from \"jwt-decode\";\nexport const memberRouter = [\n    {\n        path: '/user/create',\n        name: 'UserCreate',\n        component: UserCreate\n    },\n    {\n        path: '/login',\n        name: 'LoginPage',\n        component: LoginPage\n    },\n    {\n        path: '/user/find-id',\n        name: 'FindIdPage',\n        component: FindIdPage\n    },\n    {\n        path: '/user/find-password',\n        name: 'FindPasswordPage',\n        component: FindPasswordPage\n    },\n    {\n        path: '/user/list',\n        name: 'UserList',\n        component: UserList\n    },\n    {\n        path: '/user/reset-password',\n        name: 'ResetPasswordPage',\n        component: ResetPasswordPage,\n        props: route => ({ token: route.query.token })\n    },\n    {\n        path: '/user/edit-info',\n        name: 'UpdateUserInfo',\n        component: UpdateUserInfo,\n    },\n    {\n        path: '/report',\n        name: 'ReportCreate',\n        component: ReportCreate,\n        props: route => ({\n          // 기존 게시글 정보\n          postId: route.query.postId,\n\n          // 댓글 정보\n          commentId: route.query.commentId, \n\n          // QnA 관련 추가 정보\n          qnaId: route.query.qnaId, // 질문글 ID\n        })\n    },\n    {\n        path: '/my/subject/:id',\n        name: 'SubscribePage',\n        component: SubscribePage\n    },\n    {\n        path: '/user/wishlist',\n        name: 'WishListPage',\n        component: WishListPage,\n    },\n    {\n        path: '/user/notification',\n        name: 'UserNotificaiton',\n        component: UserNotificaiton\n    },\n    // {\n    //     path: '/loginSuccess',\n    //     component: LoginPage,\n    //     beforeEnter: (to, from, next) => {\n    //         const accessToken = to.query.token;\n    //         const refreshToken = to.query.refreshToken; // 쿼리에서 리프레시 토큰도 가져옵니다.\n    //         if (accessToken && refreshToken) {\n    //             const decoded = jwtDecode(accessToken);\n    //             localStorage.setItem(\"token\", accessToken);\n    //             localStorage.setItem(\"refreshToken\", refreshToken); // 리프레시 토큰을 로컬 스토리지에 저장합니다.\n    //             localStorage.setItem(\"email\", decoded.email);\n    //             localStorage.setItem(\"role\", decoded.role);\n    //             window.location.href = \"/\";\n    //         } else {\n    //             next('/login'); // 토큰이 없다면 로그인 페이지로 리다이렉트\n    //         }\n    //     }\n    // }\n    {\n        path: '/loginSuccess',\n        component: LoginPage,\n        beforeEnter: (to, from, next) => {\n            const accessToken = to.query.token; // 쿼리 파라미터에서 토큰을 가져옴\n            // 쿼리 파라미터에서 리프레시 토큰도 가져오려면 아래와 같이 사용합니다.\n            const refreshToken = to.query.refreshToken;\n    \n            if (accessToken) {\n                try {\n                    // JWT 토큰을 디코딩하여 사용자 정보를 추출합니다.\n                    const decoded = jwtDecode(accessToken);\n                    // 로컬 스토리지에 토큰과 사용자 정보를 저장합니다.\n                    localStorage.setItem(\"token\", accessToken);\n                    if (refreshToken) {\n                        localStorage.setItem(\"refreshToken\", refreshToken);\n                    }\n                    localStorage.setItem(\"email\", decoded.sub); // 이메일은 JWT에서 'sub' 클레임으로 보통 저장됩니다.\n                    localStorage.setItem(\"role\", decoded.role);\n    \n                    // 홈 페이지로 리다이렉트합니다.\n                    window.location.href = \"/\";\n                } catch (error) {\n                    console.error(\"Invalid token\", error);\n                    next('/login'); // 토큰이 유효하지 않은 경우 로그인 페이지로 리다이렉트\n                }\n            } else {\n                next('/login'); // 토큰이 없다면 로그인 페이지로 리다이렉트\n            }\n        }\n    }\n\n]\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}