{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null,\n      isAdmin: false,\n      comments: [],\n      newCommentContent: '',\n      isLoggedIn: false,\n      isFreeBoard: false,\n      showReportModal: false,\n      reportData: {},\n      userId: localStorage.getItem('userId'),\n      deleteDialog: false,\n      error: null,\n      userEmail: '',\n      activeComment: null,\n      // 현재 열려있는 conLayer의 댓글 ID\n      boardTitle: '' // 추가된 데이터 속성\n    };\n  },\n  computed: {\n    canEditPost() {\n      return this.isAdmin || this.isFreeBoard && this.post && this.post.userEmail === this.userEmail;\n    },\n    canDeletePost() {\n      return this.isAdmin || this.isFreeBoard && this.post && this.post.userEmail === this.userEmail;\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.setBoardTitle(); // 게시판 제목 설정\n    this.fetchPostDetail();\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    setBoardTitle() {\n      const category = this.$route.params.category;\n      if (category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else if (category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    toggleCommentOptions(commentId) {\n      if (this.activeComment === commentId) {\n        this.activeComment = null;\n      } else {\n        this.activeComment = commentId;\n      }\n    },\n    canDeleteComment() {\n      return this.isAdmin;\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n      this.$router.push({\n        name: routeName,\n        params: {\n          category\n        }\n      });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id: this.post.id,\n          category\n        }\n      });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        // const confirmed = confirm(\"이 게시글을 삭제하시겠습니까???\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        commentId: comment.id,\n        commentContent: comment.content,\n        commentAuthor: comment.nickname,\n        postTitle: this.post.title,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","ReportCreate","components","data","post","isAdmin","comments","newCommentContent","isLoggedIn","isFreeBoard","showReportModal","reportData","userId","localStorage","getItem","deleteDialog","error","userEmail","activeComment","boardTitle","computed","canEditPost","canDeletePost","created","decodeToken","checkAdminRole","checkLoginStatus","checkIfFreeBoard","setBoardTitle","fetchPostDetail","fetchComments","methods","token","decoded","parseJwt","sub","$router","push","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","role","category","$route","params","postId","id","apiUrl","process","env","VUE_APP_API_BASE_URL","Error","response","get","result","console","alert","submitComment","trim","newComment","content","deleteComment","commentId","confirmed","confirm","toggleCommentOptions","canDeleteComment","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goBack","routeName","name","editPost","confirmDeletePost","deletePost","openPostReportModal","postTitle","title","postContent","authorEmail","nickname","postCategory","openCommentReportModal","comment","commentContent","commentAuthor","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <!-- 헤드 부분 -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card class=\"pa-3 mb-4\">\n<h1 class=\"board-title\">{{ boardTitle }}</h1>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-card v-if=\"post\" class=\"pa-5\">\n      <!-- 제목 -->\n      <v-card-title class=\"d-flex justify-space-between align-center\">\n        <h2 class=\"text-h4 font-weight-bold\">{{ post.title }}</h2>\n        <div class=\"d-flex justify-end mb-3\">\n          <v-btn v-if=\"isFreeBoard\" class=\"btn_st2 mr-2\" @click=\"openPostReportModal\">신고</v-btn>\n        </div>\n      </v-card-title>\n\n      <!-- 본문 내용 -->\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\">\n            <ul class=\"info\">\n              <li><strong>작성자: {{post.nickname}}</strong></li>\n              <li><strong>작성일:</strong> {{ formatDate(post.createdTime) }}</li>\n            </ul>\n            <v-img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Post Image\" max-width=\"400\" class=\"my-3\"/>\n            <div v-html=\"post.content\" class=\"text-body-1 bodyTxt\"></div>\n          </v-col>\n        </v-row>\n      </v-card-text>\n\n      <!-- 댓글 섹션 -->\n      <v-row v-if=\"isFreeBoard\">\n        <v-divider class=\"my-3\"></v-divider>\n        <v-col cols=\"12\">\n          <h4 class=\"text-h6 font-weight-bold\">댓글</h4>\n          <v-list two-line>\n            <v-list-item v-for=\"comment in comments\" :key=\"comment.id\" class=\"py-2\">\n              <v-list-item-content class=\"comment-content\">\n                <div class=\"comment-text\">\n                  <v-list-item-title class=\"text-subtitle-1\">{{ comment.content }}</v-list-item-title>\n                  <v-list-item-subtitle>{{ comment.nickname }} ({{ formatDate(comment.createdTime) }})</v-list-item-subtitle>\n                </div>\n                <v-list-item-action class=\"action-buttons\">\n                  <a href=\"javascript:void(0)\" class=\"btn_board_option\" @click=\"openCommentReportModal(comment)\">신고</a>  \n                  <a v-if=\"canDeleteComment()\" href=\"javascript:void(0)\" class=\"btn_board_option\" @click=\"deleteComment(comment.id)\">삭제</a>\n                </v-list-item-action>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n\n          <!-- 댓글 작성 폼 -->\n          <v-form v-if=\"isLoggedIn\" @submit.prevent=\"submitComment\" class=\"mt-3\">\n            <v-textarea label=\"댓글 작성\" v-model=\"newCommentContent\" required outlined />\n          </v-form>\n        </v-col>\n      </v-row>\n\n      <!-- 액션 버튼들 -->\n      <v-form @submit.prevent=\"submitComment\" class=\"mt-3\">\n        <v-card-actions class=\"d-flex justify-end\">\n          <v-btn class=\"btn_solid\" @click=\"goBack\">목록으로</v-btn>\n          <v-btn v-if=\"isFreeBoard\" type=\"submit\" class=\"btn_comment_ok\">댓글작성</v-btn>\n          <v-btn v-if=\"canEditPost\" class=\"btn_st2\" @click=\"editPost\">수정</v-btn>\n          <v-btn v-if=\"canDeletePost\" class=\"btn_del\" @click=\"confirmDeletePost\">삭제</v-btn>\n        </v-card-actions>\n      </v-form>\n    </v-card>\n\n    <!-- 에러 및 로딩 상태 -->\n    <v-alert type=\"error\" v-else-if=\"error\">{{ error }}</v-alert>\n    <v-progress-circular v-else indeterminate color=\"primary\"></v-progress-circular>\n\n    <!-- 게시글 삭제 확인 다이얼로그 -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title class=\"headline\">게시글 삭제</v-card-title>\n        <v-card-text>게시글을 정말 삭제하시겠습니까???</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn class=\"btn_white\" text @click=\"deleteDialog = false\">취소</v-btn>\n          <v-btn class=\"btn_del\" text @click=\"deletePost\">삭제</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 신고 모달 창 -->\n    <ReportCreate \n      v-if=\"showReportModal\" \n      :postId=\"reportData.postId\" \n      :postTitle=\"reportData.postTitle\" \n      :postContent=\"reportData.postContent\" \n      :authorEmail=\"reportData.authorEmail\" \n      :postCategory=\"reportData.postCategory\" \n      :commentId=\"reportData.commentId\" \n      :commentContent=\"reportData.commentContent\" \n      :commentAuthor=\"reportData.commentAuthor\" \n      @close=\"closeReportModal\" \n    />\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\n\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null,\n      isAdmin: false,\n      comments: [],\n      newCommentContent: '',\n      isLoggedIn: false,\n      isFreeBoard: false,\n      showReportModal: false,\n      reportData: {},\n      userId: localStorage.getItem('userId'),\n      deleteDialog: false,\n      error: null,\n      userEmail: '',\n      activeComment: null, // 현재 열려있는 conLayer의 댓글 ID\n      boardTitle: '' // 추가된 데이터 속성\n    };\n  },\n  computed: {\n    canEditPost() {\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    },\n    canDeletePost() {\n      return this.isAdmin || (this.isFreeBoard && this.post && this.post.userEmail === this.userEmail);\n    }\n  },\n  created() {\n    this.decodeToken();\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.setBoardTitle(); // 게시판 제목 설정\n    this.fetchPostDetail();\n\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    decodeToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = this.parseJwt(token);\n        this.userEmail = decoded.sub;\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(\n          atob(base64)\n            .split('')\n            .map(function(c) {\n              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n        );\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    setBoardTitle() {\n      const category = this.$route.params.category;\n      if (category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (category === 'notice') {\n        this.boardTitle = '공지사항';\n      } else if (category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    toggleCommentOptions(commentId) {\n      if (this.activeComment === commentId) {\n        this.activeComment = null;\n      } else {\n        this.activeComment = commentId;\n      }\n    },\n    canDeleteComment() {\n      return this.isAdmin;\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        // const confirmed = confirm(\"이 게시글을 삭제하시겠습니까???\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        commentId: comment.id,\n        commentContent: comment.content,\n        commentAuthor: comment.nickname,\n        postTitle: this.post.title,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n\n.text-body-1 {\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #555;\n}\n\n.info {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.info li {\n  display: inline-block;\n  margin-right: 20px;\n}\n\n.v-btn {\n  font-weight: bold;\n  border-radius: 0;\n}\n\n.btn_white {\n  background-color: white !important;\n  color: #424242 !important;\n  border: 1px solid #dcdcdc !important;\n}\n\n.btn_white:hover {\n  background-color: #f5f5f5 !important;\n}\n\n.btn_del {\n  background-color: #f27885 !important;\n  color: white;\n  border-radius: 8px;\n}\n\n.btn_solid {\n  background-color: #ffdb69 !important;\n  color: rgb(255, 255, 255);\n  border-radius: 8px;\n}\n\n.btn_st2 {\n  background-color: #424242 !important;\n  color: white;\n  border-radius: 8px;\n}\n\n.btn_alert {\n  background-color: #d32f2f !important;\n  color: white;\n}\n\n.btn_comment_ok {\n  background-color: #5087c7 !important;\n  color: white;\n  border-radius: 8px;\n}\n\n.action-buttons {\n  display: flex;\n  align-items: center;\n  margin-left: 16px;\n}\n\n.v-list-item-action {\n  margin-left: auto;\n}\n\n.v-list-item-action .v-btn {\n  margin-left: 8px;\n}\n\n.comment-text {\n  flex-grow: 1;\n}\n\n.comment-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.btn_board_option {\n  display: block;\n  padding: 5px 10px;\n  color: #ffffff;\n  text-decoration: none;\n  background-color: #f27885;\n  border-bottom: 1px solid #ccc;\n  border-radius: 8px;\n}\n\n.btn_board_option:hover {\n  background-color: #f5f5f5;\n  color: black;\n}\n\n.v-icon {\n  font-size: 18px !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}