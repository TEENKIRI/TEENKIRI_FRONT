{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      formData: {\n        title: '',\n        questionText: '',\n        qImage: [] // 빈 배열로 초기화\n      },\n      previewImageSrc: null\n    };\n  },\n  methods: {\n    updateFile(value) {\n      this.formData.qImage = value ? value[0] : null; // 파일 배열에서 첫 번째 파일을 사용\n      this.previewImage(); // 이미지 미리보기 갱신\n    },\n    previewImage() {\n      if (this.formData.qImage) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.formData.qImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const formData = new FormData();\n      formData.append('title', this.formData.title);\n      formData.append('questionText', this.formData.questionText);\n      if (this.formData.qImage) {\n        formData.append('image', this.formData.qImage);\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response);\n        alert('Question created successfully!');\n        this.resetForm();\n        this.$router.push({\n          name: 'QnaList'\n        }); // 질문 목록 페이지로 이동\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : 'Failed to create question';\n        alert(errorMessage);\n        console.error('Full error details:', error); // 에러 전체를 출력\n      }\n    },\n    resetForm() {\n      this.formData.title = '';\n      this.formData.questionText = '';\n      this.formData.qImage = [];\n      this.previewImageSrc = null;\n      if (this.$refs.form) {\n        this.$refs.form.reset(); // form을 초기화합니다.\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","formData","title","questionText","qImage","previewImageSrc","methods","updateFile","value","previewImage","reader","FileReader","onload","e","target","result","readAsDataURL","submitForm","FormData","append","response","post","process","env","VUE_APP_API_BASE_URL","headers","console","log","alert","resetForm","$router","push","name","error","errorMessage","message","$refs","form","reset"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/qna/CreateQuestion.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-form ref=\"form\" @submit.prevent=\"submitForm\">\n      <v-text-field\n        v-model=\"formData.title\"\n        label=\"Title\"\n        required\n      ></v-text-field>\n\n      <v-textarea\n        v-model=\"formData.questionText\"\n        label=\"Question\"\n        required\n      ></v-textarea>\n\n      <v-file-input\n        :modelValue=\"formData.qImage\"\n        @update:modelValue=\"updateFile\"\n        label=\"Upload Image\"\n        accept=\"image/*\"\n      ></v-file-input>\n\n      <v-img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" max-width=\"200\"></v-img>\n\n      <v-btn color=\"primary\" type=\"submit\">Submit</v-btn>\n    </v-form>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      formData: {\n        title: '',\n        questionText: '',\n        qImage: [], // 빈 배열로 초기화\n      },\n      previewImageSrc: null,\n    };\n  },\n  methods: {\n    updateFile(value) {\n      this.formData.qImage = value ? value[0] : null; // 파일 배열에서 첫 번째 파일을 사용\n      this.previewImage(); // 이미지 미리보기 갱신\n    },\n    previewImage() {\n      if (this.formData.qImage) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.formData.qImage);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      const formData = new FormData();\n      formData.append('title', this.formData.title);\n      formData.append('questionText', this.formData.questionText);\n      if (this.formData.qImage) {\n        formData.append('image', this.formData.qImage);\n      }\n\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/qna/create`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        console.log(response)\n        alert('Question created successfully!');\n        this.resetForm();\n        this.$router.push({ name: 'QnaList' });  // 질문 목록 페이지로 이동\n      } catch (error) {\n        const errorMessage = error.response && error.response.data ? error.response.data.message : 'Failed to create question';\n        alert(errorMessage);\n        console.error('Full error details:', error);  // 에러 전체를 출력\n      }\n    },\n    resetForm() {\n      this.formData.title = '';\n      this.formData.questionText = '';\n      this.formData.qImage = [];\n      this.previewImageSrc = null;\n      if (this.$refs.form) {\n        this.$refs.form.reset();  // form을 초기화합니다.\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding-top: 50px;\n}\n</style>\n"],"mappings":";AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,YAAY,EAAE,EAAE;QAChBC,MAAM,EAAE,EAAE,CAAE;MACd,CAAC;MACDC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,KAAK,EAAE;MAChB,IAAI,CAACP,QAAQ,CAACG,MAAK,GAAII,KAAI,GAAIA,KAAK,CAAC,CAAC,IAAI,IAAI,EAAE;MAChD,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;IACvB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACR,QAAQ,CAACG,MAAM,EAAE;QACxB,MAAMM,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;UACrB,IAAI,CAACR,eAAc,GAAIQ,CAAC,CAACC,MAAM,CAACC,MAAM;QACxC,CAAC;QACDL,MAAM,CAACM,aAAa,CAAC,IAAI,CAACf,QAAQ,CAACG,MAAM,CAAC;MAC5C,OAAO;QACL,IAAI,CAACC,eAAc,GAAI,IAAI;MAC7B;IACF,CAAC;IACD,MAAMY,UAAUA,CAAA,EAAG;MACjB,MAAMhB,QAAO,GAAI,IAAIiB,QAAQ,CAAC,CAAC;MAC/BjB,QAAQ,CAACkB,MAAM,CAAC,OAAO,EAAE,IAAI,CAAClB,QAAQ,CAACC,KAAK,CAAC;MAC7CD,QAAQ,CAACkB,MAAM,CAAC,cAAc,EAAE,IAAI,CAAClB,QAAQ,CAACE,YAAY,CAAC;MAC3D,IAAI,IAAI,CAACF,QAAQ,CAACG,MAAM,EAAE;QACxBH,QAAQ,CAACkB,MAAM,CAAC,OAAO,EAAE,IAAI,CAAClB,QAAQ,CAACG,MAAM,CAAC;MAChD;MAEA,IAAI;QACF,MAAMgB,QAAO,GAAI,MAAMrB,KAAK,CAACsB,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,aAAa,EAAEvB,QAAQ,EAAE;UAC5FwB,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAACP,QAAQ;QACpBQ,KAAK,CAAC,gCAAgC,CAAC;QACvC,IAAI,CAACC,SAAS,CAAC,CAAC;QAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC,EAAG;MAC3C,EAAE,OAAOC,KAAK,EAAE;QACd,MAAMC,YAAW,GAAID,KAAK,CAACb,QAAO,IAAKa,KAAK,CAACb,QAAQ,CAACpB,IAAG,GAAIiC,KAAK,CAACb,QAAQ,CAACpB,IAAI,CAACmC,OAAM,GAAI,2BAA2B;QACtHP,KAAK,CAACM,YAAY,CAAC;QACnBR,OAAO,CAACO,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,EAAG;MAChD;IACF,CAAC;IACDJ,SAASA,CAAA,EAAG;MACV,IAAI,CAAC5B,QAAQ,CAACC,KAAI,GAAI,EAAE;MACxB,IAAI,CAACD,QAAQ,CAACE,YAAW,GAAI,EAAE;MAC/B,IAAI,CAACF,QAAQ,CAACG,MAAK,GAAI,EAAE;MACzB,IAAI,CAACC,eAAc,GAAI,IAAI;MAC3B,IAAI,IAAI,CAAC+B,KAAK,CAACC,IAAI,EAAE;QACnB,IAAI,CAACD,KAAK,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,EAAG;MAC5B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}