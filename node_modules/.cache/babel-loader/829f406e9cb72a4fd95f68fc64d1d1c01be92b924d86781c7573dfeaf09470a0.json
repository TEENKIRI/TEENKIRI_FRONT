{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock, withKeys as _withKeys } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_list_item_title = _resolveComponent(\"v-list-item-title\");\n  const _component_v_list_item_subtitle = _resolveComponent(\"v-list-item-subtitle\");\n  const _component_v_list_item_content = _resolveComponent(\"v-list-item-content\");\n  const _component_v_list_item = _resolveComponent(\"v-list-item\");\n  const _component_v_list = _resolveComponent(\"v-list\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_list, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n        return _openBlock(), _createBlock(_component_v_list_item, {\n          key: message.id\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_list_item_content, null, {\n            default: _withCtx(() => [_createVNode(_component_v_list_item_title, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.senderNickname), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.content), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_v_list_item_subtitle, null, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(message.createdTime), 1 /* TEXT */)]),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)]),\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_v_text_field, {\n      modelValue: $data.newMessage,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n      label: \"메시지를 입력하세요...\",\n      onKeyup: _withKeys($options.sendMessage, [\"enter\"])\n    }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_container","default","_withCtx","_createVNode","_component_v_list","_createElementBlock","_Fragment","_renderList","$data","messages","message","_component_v_list_item","key","id","_component_v_list_item_content","_component_v_list_item_title","_createTextVNode","_toDisplayString","senderNickname","_","_component_v_list_item_subtitle","content","createdTime","_component_v_text_field","modelValue","newMessage","_cache","$event","label","onKeyup","_withKeys","$options","sendMessage"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/chat/ChatView.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-list>\n        <v-list-item v-for=\"message in messages\" :key=\"message.id\">\n          <v-list-item-content>\n            <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n            <v-list-item-subtitle>{{ message.content }}</v-list-item-subtitle>\n            <v-list-item-subtitle>{{ message.createdTime }}</v-list-item-subtitle>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n  \n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n    </v-container>\n  </template>\n  \n  <script>\n  import SockJS from 'sockjs-client';\n  import { Stomp } from '@stomp/stompjs';\n  export default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n    };\n  },\n  mounted() {\n    this.connectWebSocket();\n  },\n  methods: {\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      const userId = localStorage.getItem('userId'); // userId를 localStorage에서 가져오기\n\n      if (!userId) {\n        console.error(\"User ID is not available in localStorage\");\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: userId, // userId를 senderId로 설정\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  },\n};\n\n  </script>\n  \n  <style scoped>\n  .v-container {\n    max-width: 800px;\n    margin: auto;\n  }\n  \n  .v-list-item {\n    border-bottom: 1px solid #e0e0e0;\n    padding-bottom: 10px;\n    margin-bottom: 10px;\n  }\n  </style>\n  "],"mappings":";;;;;;;;;uBACIA,YAAA,CAgBcC,sBAAA;IAjBlBC,OAAA,EAAAC,QAAA,CAEM,MAQS,CARTC,YAAA,CAQSC,iBAAA;MAVfH,OAAA,EAAAC,QAAA,CAGqB,MAA2B,E,kBAAxCG,mBAAA,CAMcC,SAAA,QATtBC,WAAA,CAGuCC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;6BAA3BX,YAAA,CAMcY,sBAAA;UAN4BC,GAAG,EAAEF,OAAO,CAACG;;UAH/DZ,OAAA,EAAAC,QAAA,CAIU,MAIsB,CAJtBC,YAAA,CAIsBW,8BAAA;YARhCb,OAAA,EAAAC,QAAA,CAKY,MAAmE,CAAnEC,YAAA,CAAmEY,4BAAA;cAL/Ed,OAAA,EAAAC,QAAA,CAK+B,MAA4B,CAL3Dc,gBAAA,CAAAC,gBAAA,CAKkCP,OAAO,CAACQ,cAAc,iB;cALxDC,CAAA;0CAMYhB,YAAA,CAAkEiB,+BAAA;cAN9EnB,OAAA,EAAAC,QAAA,CAMkC,MAAqB,CANvDc,gBAAA,CAAAC,gBAAA,CAMqCP,OAAO,CAACW,OAAO,iB;cANpDF,CAAA;0CAOYhB,YAAA,CAAsEiB,+BAAA;cAPlFnB,OAAA,EAAAC,QAAA,CAOkC,MAAyB,CAP3Dc,gBAAA,CAAAC,gBAAA,CAOqCP,OAAO,CAACY,WAAW,iB;cAPxDH,CAAA;;YAAAA,CAAA;;UAAAA,CAAA;;;MAAAA,CAAA;QAYMhB,YAAA,CAIgBoB,uBAAA;MAhBtBC,UAAA,EAaiBhB,KAAA,CAAAiB,UAAU;MAb3B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAaiBnB,KAAA,CAAAiB,UAAU,GAAAE,MAAA;MACnBC,KAAK,EAAC,eAAe;MACpBC,OAAK,EAfdC,SAAA,CAesBC,QAAA,CAAAC,WAAW;;IAfjCb,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}