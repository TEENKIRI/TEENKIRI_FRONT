{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false,\n      // 관리자인지 여부를 확인하기 위한 변수 추가\n      notifications: []\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter(notification => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter(notification => notification.delYN === 'N');\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN'; // 로그인 후 역할이 ADMIN인지 확인\n      this.fetchNotifications();\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      eventSource.addEventListener('notification', event => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n      eventSource.onerror = error => {\n        console.error('SSE 연결 오류:', error);\n      };\n    }\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.notifications = response.data;\n      } catch (error) {\n        console.error('알림 목록을 가져오는 중 오류 발생:', error);\n      }\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          this.notifications[index].delYN = 'Y';\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId) {\n            window.location.href = `/report/list`;\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({\n          name: 'SubjectList',\n          params: {\n            category: 'subject'\n          }\n        });\n      } else if (section === '이벤트') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'event'\n          }\n        });\n      } else if (section === '공지사항') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'notice'\n          }\n        });\n      } else if (section === '자유게시판') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'post'\n          }\n        });\n      } else if (section === 'QnA') {\n        this.$router.push({\n          name: 'QnaList',\n          params: {\n            category: 'qna'\n          }\n        });\n      } else if (section === '신고리스트') {\n        if (this.isAdmin) {\n          this.$router.push({\n            name: 'ReportList',\n            params: {\n              category: 'report'\n            }\n          });\n        } else {\n          console.log('관리자만 접근할 수 있습니다.');\n        }\n      } else {\n        console.log(section);\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      console.log('Logged out');\n      window.location.reload();\n    }\n  }\n};","map":{"version":3,"names":["EventSourcePolyfill","axios","name","data","logo","require","isLogin","isAdmin","notifications","computed","unreadNotificationsCount","filter","notification","delYN","length","unreadNotifications","mounted","token","localStorage","getItem","fetchNotifications","eventSource","process","env","VUE_APP_API_BASE_URL","headers","Authorization","addEventListener","event","JSON","parse","push","onerror","error","console","methods","response","get","markAsReadAndNavigate","index","id","postId","window","location","href","qnaId","reportId","navigate","section","$router","params","category","log","goToMember","goToMenu","doLogout","removeItem","reload"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <v-col cols=\"3\">\n          <v-toolbar-title>\n            <router-link to=\"/\" class=\"logo\">\n              <img :src=\"logo\" alt=\"로고\" class=\"logo-image\" />\n            </router-link>\n          </v-toolbar-title>\n        </v-col>\n        <v-col cols=\"6\">\n          <v-row justify=\"center\">\n            <v-btn text @click=\"navigate('강좌')\">강좌</v-btn>\n            <v-btn text @click=\"navigate('추천')\">추천</v-btn>\n            <v-btn text @click=\"navigate('이벤트')\">이벤트</v-btn>\n            <v-btn text @click=\"navigate('공지사항')\">공지사항</v-btn>\n            <v-btn text @click=\"navigate('자유게시판')\">자유게시판</v-btn>\n            <v-btn text @click=\"navigate('QnA')\">질문게시판</v-btn>\n            <!-- 관리자만 신고리스트를 볼 수 있게 조건 추가 -->\n            <v-btn v-if=\"isAdmin\" text @click=\"navigate('신고리스트')\">신고리스트</v-btn>\n          </v-row>\n        </v-col>\n        <v-col cols=\"3\" class=\"text-right\">\n          <v-btn icon @click=\"goToMember\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n          <v-btn v-if=\"isLogin\" @click=\"doLogout\">로그아웃</v-btn>\n          <v-btn icon @click=\"goToMenu\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n\n          <!-- 알림 아이콘 및 알림 목록 -->\n          <v-btn icon color=\"primary\">\n            <v-badge\n              color=\"red\"\n              :content=\"unreadNotificationsCount\"\n              overlap\n              v-if=\"unreadNotificationsCount > 0\"\n            >\n              <v-icon>mdi-bell</v-icon>\n            </v-badge>\n            <v-icon v-else>mdi-bell</v-icon>\n\n            <v-menu activator=\"parent\" offset-y>\n              <v-list max-width=\"300\" max-height=\"400\" style=\"overflow-y: auto;\">\n                <v-list-item\n                  v-for=\"(notification, index) in unreadNotifications\"\n                  :key=\"index\"\n                  :class=\"{'unread-notification': notification.delYN === 'N'}\"\n                  @click=\"markAsReadAndNavigate(notification, index)\"\n                >\n                  <v-list-item-content>\n                    <v-list-item-title>{{ notification.message }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n              </v-list>\n            </v-menu>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-app-bar>\n</template>\n\n<script>\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport axios from 'axios';\n\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      isAdmin: false, // 관리자인지 여부를 확인하기 위한 변수 추가\n      notifications: [],\n    };\n  },\n  computed: {\n    unreadNotificationsCount() {\n      return this.notifications.filter(notification => notification.delYN === 'N').length;\n    },\n    unreadNotifications() {\n      return this.notifications.filter(notification => notification.delYN === 'N');\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      this.isAdmin = localStorage.getItem('role') === 'ADMIN'; // 로그인 후 역할이 ADMIN인지 확인\n      this.fetchNotifications();\n\n      const eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      eventSource.addEventListener('notification', (event) => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n      });\n\n      eventSource.onerror = (error) => {\n        console.error('SSE 연결 오류:', error);\n      };\n    }\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/list`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        this.notifications = response.data;\n      } catch (error) {\n        console.error('알림 목록을 가져오는 중 오류 발생:', error);\n      }\n    },\n    async markAsReadAndNavigate(notification, index) {\n      if (notification.delYN === 'N') {\n        try {\n          const id = notification.id;\n          await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, null, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n          this.notifications[index].delYN = 'Y';\n\n          if (notification.postId) {\n            window.location.href = `/board/detail/post/${notification.postId}`;\n          } else if (notification.qnaId) {\n            window.location.href = `/qna/detail/${notification.qnaId}`;\n          } else if (notification.reportId){\n            window.location.href = `/report/list`;\n          }\n        } catch (error) {\n          console.error('알림을 읽음으로 표시하는 중 오류 발생:', error);\n        }\n      }\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({ name: 'SubjectList', params: { category: 'subject' } });\n      } else if (section === '이벤트') {\n        this.$router.push({ name: 'BoardList', params: { category: 'event' } });\n      } else if (section === '공지사항') {\n        this.$router.push({ name: 'BoardList', params: { category: 'notice' } });\n      } else if (section === '자유게시판') {\n        this.$router.push({ name: 'BoardList', params: { category: 'post' } });\n      } else if (section === 'QnA') {\n        this.$router.push({ name: 'QnaList', params: { category: 'qna' } });\n      } else if (section === '신고리스트') {\n        if (this.isAdmin) {\n          this.$router.push({ name: 'ReportList', params: { category: 'report' } });\n        } else {\n          console.log('관리자만 접근할 수 있습니다.');\n        }\n      } else {\n        console.log(section);\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      console.log('Logged out');\n      window.location.reload();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%;\n}\n\n.unread-notification {\n  background-color: white;\n}\n\n.v-list-item {\n  background-color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}