{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      boardItems: [],\n      // 게시글 목록 데이터\n      currentPage: 1,\n      // 현재 페이지 번호\n      totalPages: 1,\n      // 총 페이지 수\n      itemsPerPage: 10,\n      // 페이지당 항목 수\n      isAdmin: false,\n      // 관리자인지 여부\n      category: '',\n      // 현재 게시판 종류\n      boardTitle: '' // 게시판 제목\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems' // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkAdminRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1,\n            // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage // 페이지당 항목 수\n          }\n        });\n        const data = response.data.result;\n        this.boardItems = data.content;\n        this.totalPages = data.totalPages;\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (!this.isAdmin) {\n        alert('관리자만 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({\n        name: 'BoardCreate',\n        params: {\n          category: this.category\n        }\n      });\n    },\n    goToDetail(id, category) {\n      // 카테고리와 ID에 맞게 상세 페이지로 이동\n      this.$router.push({\n        name: 'BoardDetail',\n        params: {\n          category,\n          id\n        }\n      });\n    },\n    updateItem(id, category) {\n      // 카테고리와 ID에 맞게 수정 페이지로 이동\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          category,\n          id\n        }\n      });\n    },\n    async deleteItem(id, category) {\n      try {\n        const confirmed = confirm('이 게시글을 삭제하시겠습니까?');\n        if (confirmed) {\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.fetchBoardItems(); // 삭제 후 목록을 다시 로드\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","boardItems","currentPage","totalPages","itemsPerPage","isAdmin","category","boardTitle","watch","created","checkAdminRole","fetchBoardItems","methods","role","localStorage","getItem","$route","params","setBoardTitle","apiUrl","process","env","VUE_APP_API_BASE_URL","console","error","response","get","page","size","result","content","alert","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goToPreviousPage","goToNextPage","goToPage","createNewPost","$router","push","name","goToDetail","id","updateItem","deleteItem","confirmed","confirm","Error"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1 class=\"board-title\">{{ boardTitle }}</h1>\n    <h2 v-if=\"isAdmin\">\n      <button class=\"create-button\" @click=\"createNewPost\">게시글 작성</button>\n    </h2>\n    <table class=\"board-table\">\n      <thead>\n        <tr>\n          <th>번호</th>\n          <th>제목</th>\n          <th>작성자</th>\n          <th>작성일</th>\n          <th v-if=\"isAdmin\">관리</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item, index) in boardItems\" :key=\"item.id\">\n          <td>{{ index + 1 + (currentPage - 1) * itemsPerPage }}</td>\n          <td @click=\"goToDetail(item.id, category)\" class=\"clickable\">{{ item.title }}</td>\n          <td>{{ item.nickname }}</td>\n          <td>{{ formatDate(item.createdTime) }}</td>\n          <td v-if=\"isAdmin\" class=\"control\">\n            <button @click=\"updateItem(item.id, category)\">수정</button>\n            <button @click=\"deleteItem(item.id, category)\">삭제</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"pagination\">\n      <button @click=\"goToPreviousPage\">Previous</button>\n      <span v-for=\"page in totalPages\" :key=\"page\" @click=\"goToPage(page)\" :class=\"{ active: currentPage === page }\">{{ page }}</span>\n      <button @click=\"goToNextPage\">Next</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      boardItems: [], // 게시글 목록 데이터\n      currentPage: 1, // 현재 페이지 번호\n      totalPages: 1, // 총 페이지 수\n      itemsPerPage: 10, // 페이지당 항목 수\n      isAdmin: false, // 관리자인지 여부\n      category: '', // 현재 게시판 종류\n      boardTitle: '', // 게시판 제목\n    };\n  },\n  watch: {\n    '$route.params.category': 'fetchBoardItems', // category가 변경될 때마다 fetchBoardItems 호출\n  },\n  created() {\n    this.checkAdminRole();\n    this.fetchBoardItems(); // 컴포넌트 생성 시 게시글 목록을 가져옴\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    async fetchBoardItems() {\n      this.category = this.$route.params.category;\n      this.setBoardTitle();\n\n      let apiUrl = '';\n      if (this.category === 'event') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/list`;\n      } else if (this.category === 'notice') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/list`;\n      } else if (this.category === 'post') {\n        apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/list`;\n      } else {\n        console.error('잘못된 카테고리입니다.');\n        return;\n      }\n\n      try {\n        const response = await axios.get(apiUrl, {\n          params: {\n            page: this.currentPage - 1, // 페이지 번호 (0부터 시작)\n            size: this.itemsPerPage, // 페이지당 항목 수\n          },\n        });\n        const data = response.data.result;\n        this.boardItems = data.content;\n        this.totalPages = data.totalPages;\n      } catch (error) {\n        console.error('목록을 가져오는 데 실패했습니다:', error);\n        alert('목록을 가져오는 데 실패했습니다.');\n      }\n    },\n    setBoardTitle() {\n      if (this.category === 'event') {\n        this.boardTitle = '이벤트 게시판';\n      } else if (this.category === 'notice') {\n        this.boardTitle = '공지사항 게시판';\n      } else if (this.category === 'post') {\n        this.boardTitle = '자유게시판';\n      } else {\n        this.boardTitle = '게시판';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goToPreviousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchBoardItems();\n      }\n    },\n    goToNextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchBoardItems();\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n      this.fetchBoardItems();\n    },\n    createNewPost() {\n      if (!this.isAdmin) {\n        alert('관리자만 글을 작성할 수 있습니다.');\n        return;\n      }\n      this.$router.push({ name: 'BoardCreate', params: { category: this.category } });\n    },\n    goToDetail(id, category) {\n      // 카테고리와 ID에 맞게 상세 페이지로 이동\n      this.$router.push({ name: 'BoardDetail', params: { category, id } });\n    },\n    updateItem(id, category) {\n      // 카테고리와 ID에 맞게 수정 페이지로 이동\n      this.$router.push({ name: 'BoardUpdate', params: { category, id } });\n    },\n    async deleteItem(id, category) {\n      try {\n        const confirmed = confirm('이 게시글을 삭제하시겠습니까?');\n        if (confirmed) {\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.fetchBoardItems(); // 삭제 후 목록을 다시 로드\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.board-table th,\n.board-table td {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: left;\n}\n\n.board-table th {\n  background-color: #f4f4f4;\n}\n\n.board-table td.clickable {\n  cursor: pointer;\n  color: blue;\n  text-decoration: underline;\n}\n\n.control button {\n  margin-right: 5px;\n}\n\n.pagination {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.pagination button {\n  margin: 0 5px;\n}\n\n.pagination span {\n  margin: 0 5px;\n  cursor: pointer;\n}\n\n.pagination .active {\n  font-weight: bold;\n  color: blue;\n}\n\n.create-button {\n  display: block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.create-button:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}