{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d9fcf9e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"board-detail-container\"\n};\nconst _hoisted_2 = {\n  class: \"board-detail-title\"\n};\nconst _hoisted_3 = {\n  class: \"board-detail-info\"\n};\nconst _hoisted_4 = {\n  class: \"board-detail-content\"\n};\nconst _hoisted_5 = {\n  class: \"board-detail-actions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.post.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", null, \"작성자: \" + _toDisplayString($data.post.nickname), 1 /* TEXT */), _createElementVNode(\"span\", null, \"작성일: \" + _toDisplayString($options.formatDate($data.post.createdTime)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"p\", null, _toDisplayString($data.post.content), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))\n  }, \"목록으로 돌아가기\"), $data.isAdmin ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.editPost && $options.editPost(...args))\n  }, \"수정\")) : _createCommentVNode(\"v-if\", true), $data.isAdmin ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.deletePost && $options.deletePost(...args))\n  }, \"삭제\")) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","post","title","_hoisted_3","nickname","$options","formatDate","createdTime","_hoisted_4","content","_hoisted_5","onClick","_cache","args","goBack","isAdmin","key","editPost","_createCommentVNode","deletePost"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"board-detail-container\">\n    <h1 class=\"board-detail-title\">{{ post.title }}</h1>\n    <div class=\"board-detail-info\">\n      <span>작성자: {{ post.nickname }}</span>\n      <span>작성일: {{ formatDate(post.createdTime) }}</span>\n    </div>\n    <div class=\"board-detail-content\">\n      <p>{{ post.content }}</p>\n    </div>\n    <div class=\"board-detail-actions\">\n      <button @click=\"goBack\">목록으로 돌아가기</button>\n      <button v-if=\"isAdmin\" @click=\"editPost\">수정</button>\n      <button v-if=\"isAdmin\" @click=\"deletePost\">삭제</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      post: {}, // 게시글 데이터를 저장할 객체\n      isAdmin: false, // 관리자인지 여부\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.fetchPostDetail(); // 컴포넌트가 생성될 때 게시글 상세 정보를 가져옴\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const category = this.$route.params.category;\n        \n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result; // 서버에서 받아온 데이터를 post 객체에 저장\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack(); // 삭제 후 목록으로 돌아가기\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-detail-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-detail-title {\n  font-size: 32px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-detail-info {\n  font-size: 14px;\n  color: #777;\n  margin-bottom: 20px;\n}\n\n.board-detail-content {\n  font-size: 18px;\n  line-height: 1.6;\n  margin-bottom: 40px;\n}\n\n.board-detail-actions {\n  text-align: right;\n}\n\n.board-detail-actions button {\n  padding: 10px 20px;\n  margin-left: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.board-detail-actions button:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAwB;;EAC7BA,KAAK,EAAC;AAAoB;;EACzBA,KAAK,EAAC;AAAmB;;EAIzBA,KAAK,EAAC;AAAsB;;EAG5BA,KAAK,EAAC;AAAsB;;uBATnCC,mBAAA,CAcM,OAdNC,UAcM,GAbJC,mBAAA,CAAoD,MAApDC,UAAoD,EAAAC,gBAAA,CAAlBC,KAAA,CAAAC,IAAI,CAACC,KAAK,kBAC5CL,mBAAA,CAGM,OAHNM,UAGM,GAFJN,mBAAA,CAAqC,cAA/B,OAAK,GAAAE,gBAAA,CAAGC,KAAA,CAAAC,IAAI,CAACG,QAAQ,kBAC3BP,mBAAA,CAAoD,cAA9C,OAAK,GAAAE,gBAAA,CAAGM,QAAA,CAAAC,UAAU,CAACN,KAAA,CAAAC,IAAI,CAACM,WAAW,kB,GAE3CV,mBAAA,CAEM,OAFNW,UAEM,GADJX,mBAAA,CAAyB,WAAAE,gBAAA,CAAnBC,KAAA,CAAAC,IAAI,CAACQ,OAAO,iB,GAEpBZ,mBAAA,CAIM,OAJNa,UAIM,GAHJb,mBAAA,CAA0C;IAAjCc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,QAAA,CAAAS,MAAA,IAAAT,QAAA,CAAAS,MAAA,IAAAD,IAAA,CAAM;KAAE,WAAS,GACnBb,KAAA,CAAAe,OAAO,I,cAArBpB,mBAAA,CAAoD;IAZ1DqB,GAAA;IAY8BL,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,QAAA,CAAAY,QAAA,IAAAZ,QAAA,CAAAY,QAAA,IAAAJ,IAAA,CAAQ;KAAE,IAAE,KAZjDK,mBAAA,gBAaoBlB,KAAA,CAAAe,OAAO,I,cAArBpB,mBAAA,CAAsD;IAb5DqB,GAAA;IAa8BL,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,QAAA,CAAAc,UAAA,IAAAd,QAAA,CAAAc,UAAA,IAAAN,IAAA,CAAU;KAAE,IAAE,KAbnDK,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}