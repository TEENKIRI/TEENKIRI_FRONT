{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      previewImageSrc: null,\n      category: 'post',\n      // 기본 게시판 종류\n      availableCategory: [] // 선택 가능한 게시판 종류\n    };\n  },\n  created() {\n    this.setAvailableCategory(); // 컴포넌트가 생성될 때 선택 가능한 게시판 종류를 설정\n  },\n  methods: {\n    setAvailableCategory() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n      const decodedToken = this.parseJwt(token);\n      const role = decodedToken.role;\n      if (role === 'ADMIN') {\n        this.availableCategory = [{\n          value: 'event',\n          text: '이벤트'\n        }, {\n          value: 'notice',\n          text: '공지'\n        }, {\n          value: 'post',\n          text: '자유게시판'\n        }];\n      } else {\n        this.availableCategory = [{\n          value: 'post',\n          text: '자유게시판'\n        }];\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.image = files[0];\n        this.previewImage();\n      } else {\n        this.image = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.image) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.image);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      // 토큰 확인 및 관리자 여부 체크\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      const decodedToken = this.parseJwt(token);\n      if (decodedToken.role !== 'ADMIN' && this.category !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      // 폼 데이터 생성\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.category); // 게시판 종류 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n      try {\n        let apiUrl = '';\n        switch (this.category) {\n          case 'event':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n            break;\n          case 'notice':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n            break;\n          case 'post':\n          default:\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n            break;\n        }\n\n        // 서버로 POST 요청 보내기\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${token}` // 토큰을 헤더에 추가\n          }\n        });\n        console.log('저장 성공:', response.data);\n\n        // 저장 후 적절한 게시판으로 이동\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: this.category\n          }\n        });\n      } catch (error) {\n        if (error.response) {\n          console.error('저장 실패:', error.response.data);\n        } else {\n          console.error('저장 실패: 서버와의 통신에 실패했습니다.');\n        }\n        alert('게시글 저장에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","title","content","image","previewImageSrc","category","availableCategory","created","setAvailableCategory","methods","token","localStorage","getItem","alert","$router","push","decodedToken","parseJwt","role","value","text","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","onFileChange","event","files","target","dataTransfer","length","previewImage","reader","FileReader","onload","e","result","readAsDataURL","submitForm","formData","FormData","append","apiUrl","process","env","VUE_APP_API_BASE_URL","response","post","headers","Authorization","console","log","name","params"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardCreate.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card>\n      <v-card-title>\n        <h3>게시글 작성</h3>\n      </v-card-title>\n\n      <v-card-text>\n        <v-form ref=\"form\" @submit.prevent=\"submitForm\">\n          <!-- 게시판 종류 -->\n          <v-select\n          v-model=\"category\"\n          :items=\"availableCategory\"\n          item-value=\"value\" \n          item-text=\"text\"    \n          label=\"게시판 종류\"\n          required\n        ></v-select>\n        \n          <!-- 제목 -->\n          <v-text-field\n            label=\"제목\"\n            v-model=\"title\"\n            required\n          />\n\n          <!-- 내용 -->\n          <v-textarea\n            label=\"내용\"\n            v-model=\"content\"\n            rows=\"5\"\n            required\n          />\n\n          <!-- 이미지 선택 -->\n          <v-file-input\n            @change=\"onFileChange\"\n            label=\"이미지 선택\"\n            accept=\"image/*\"\n          />\n          \n          <!-- 미리보기 이미지 -->\n          <v-img v-if=\"previewImageSrc\" :src=\"previewImageSrc\" max-width=\"200\" class=\"my-3\"/>\n\n          <v-btn type=\"submit\" color=\"primary\" class=\"mt-3\">저장</v-btn>\n        </v-form>\n      </v-card-text>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      title: '',\n      content: '',\n      image: null,\n      previewImageSrc: null,\n      category: 'post', // 기본 게시판 종류\n      availableCategory: [], // 선택 가능한 게시판 종류\n    };\n  },\n  created() {\n    this.setAvailableCategory(); // 컴포넌트가 생성될 때 선택 가능한 게시판 종류를 설정\n  },\n  methods: {\n    setAvailableCategory() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        this.$router.push('/login');\n        return;\n      }\n\n      const decodedToken = this.parseJwt(token);\n      const role = decodedToken.role;\n\n      if (role === 'ADMIN') {\n        this.availableCategory = [\n          { value: 'event', text: '이벤트' },\n          { value: 'notice', text: '공지' },\n          { value: 'post', text: '자유게시판' },\n        ];\n      } else {\n        this.availableCategory = [\n          { value: 'post', text: '자유게시판' },\n        ];\n      }\n    },\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(\n          atob(base64)\n            .split('')\n            .map(function (c) {\n              return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n        );\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        return null;\n      }\n    },\n    onFileChange(event) {\n      const files = event?.target?.files || event?.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.image = files[0];\n        this.previewImage();\n      } else {\n        this.image = null;\n        this.previewImageSrc = null;\n      }\n    },\n    previewImage() {\n      if (this.image) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewImageSrc = e.target.result;\n        };\n        reader.readAsDataURL(this.image);\n      } else {\n        this.previewImageSrc = null;\n      }\n    },\n    async submitForm() {\n      // 토큰 확인 및 관리자 여부 체크\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n\n      const decodedToken = this.parseJwt(token);\n      if (decodedToken.role !== 'ADMIN' && this.category !== 'post') {\n        alert('관리자만 공지와 이벤트 게시글을 작성할 수 있습니다.');\n        return;\n      }\n\n      // 폼 데이터 생성\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      formData.append('category', this.category); // 게시판 종류 추가\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        let apiUrl = '';\n        switch (this.category) {\n          case 'event':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/create`;\n            break;\n          case 'notice':\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/create`;\n            break;\n          case 'post':\n          default:\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/create`;\n            break;\n        }\n\n        // 서버로 POST 요청 보내기\n        const response = await axios.post(apiUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${token}`, // 토큰을 헤더에 추가\n          },\n        });\n        console.log('저장 성공:', response.data);\n\n        // 저장 후 적절한 게시판으로 이동\n        this.$router.push({ name: 'BoardList', params: { category: this.category } });\n      } catch (error) {\n        if (error.response) {\n          console.error('저장 실패:', error.response.data);\n        } else {\n          console.error('저장 실패: 서버와의 통신에 실패했습니다.');\n        }\n        alert('게시글 저장에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 600px;\n  margin: auto;\n}\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}