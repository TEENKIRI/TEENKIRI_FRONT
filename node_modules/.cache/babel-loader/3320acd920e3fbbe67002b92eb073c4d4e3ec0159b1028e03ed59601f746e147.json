{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null\n    };\n  },\n  mounted() {\n    this.connectWebSocket();\n  },\n  methods: {\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      const userId = localStorage.getItem('userId'); // userId를 localStorage에서 가져오기\n\n      if (!userId) {\n        console.error(\"User ID is not available in localStorage\");\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: userId // userId를 senderId로 설정\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","data","messages","newMessage","stompClient","mounted","connectWebSocket","methods","socket","process","env","VUE_APP_API_BASE_URL","over","connect","frame","console","log","subscribe","tick","message","JSON","parse","body","push","sendMessage","userId","localStorage","getItem","error","connected","content","senderId","send","stringify","beforeUnmount","disconnect"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/chat/ChatView.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-list>\n        <v-list-item v-for=\"message in messages\" :key=\"message.id\">\n          <v-list-item-content>\n            <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n            <v-list-item-subtitle>{{ message.content }}</v-list-item-subtitle>\n            <v-list-item-subtitle>{{ message.createdTime }}</v-list-item-subtitle>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n  \n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n    </v-container>\n  </template>\n  \n  <script>\n  import SockJS from 'sockjs-client';\n  import { Stomp } from '@stomp/stompjs';\n  export default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n    };\n  },\n  mounted() {\n    this.connectWebSocket();\n  },\n  methods: {\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      const userId = localStorage.getItem('userId'); // userId를 localStorage에서 가져오기\n\n      if (!userId) {\n        console.error(\"User ID is not available in localStorage\");\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: userId, // userId를 senderId로 설정\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  },\n};\n\n  </script>\n  \n  <style scoped>\n  .v-container {\n    max-width: 800px;\n    margin: auto;\n  }\n  \n  .v-list-item {\n    border-bottom: 1px solid #e0e0e0;\n    padding-bottom: 10px;\n    margin-bottom: 10px;\n  }\n  </style>\n  "],"mappings":";AAqBE,OAAOA,MAAK,MAAO,eAAe;AAClC,SAASC,KAAI,QAAS,gBAAgB;AACtC,eAAe;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACPD,gBAAgBA,CAAA,EAAG;MACjB,MAAME,MAAK,GAAI,IAAIT,MAAM,CAAC,GAAGU,OAAO,CAACC,GAAG,CAACC,oBAAoB,KAAK,CAAC;MACnE,IAAI,CAACP,WAAU,GAAIJ,KAAK,CAACY,IAAI,CAACJ,MAAM,CAAC;MAErC,IAAI,CAACJ,WAAW,CAACS,OAAO,CAAC,CAAC,CAAC,EAAEC,KAAI,IAAK;QACpCC,OAAO,CAACC,GAAG,CAAC,aAAY,GAAIF,KAAK,CAAC;QAClC,IAAI,CAACV,WAAW,CAACa,SAAS,CAAC,eAAe,EAAEC,IAAG,IAAK;UAClD,MAAMC,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACH,IAAI,CAACI,IAAI,CAAC;UACrC,IAAI,CAACpB,QAAQ,CAACqB,IAAI,CAACJ,OAAO,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDK,WAAWA,CAAA,EAAG;MACZ,MAAMC,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE;;MAE/C,IAAI,CAACF,MAAM,EAAE;QACXV,OAAO,CAACa,KAAK,CAAC,0CAA0C,CAAC;QACzD;MACF;MAEA,IAAI,IAAI,CAACxB,WAAU,IAAK,IAAI,CAACA,WAAW,CAACyB,SAAS,EAAE;QAClD,MAAMV,OAAM,GAAI;UACdW,OAAO,EAAE,IAAI,CAAC3B,UAAU;UACxB4B,QAAQ,EAAEN,MAAM,CAAE;QACpB,CAAC;QACD,IAAI,CAACrB,WAAW,CAAC4B,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAEZ,IAAI,CAACa,SAAS,CAACd,OAAO,CAAC,CAAC;QAC3E,IAAI,CAAChB,UAAS,GAAI,EAAE;MACtB;IACF;EACF,CAAC;EACD+B,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAC9B,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC+B,UAAU,CAAC,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}