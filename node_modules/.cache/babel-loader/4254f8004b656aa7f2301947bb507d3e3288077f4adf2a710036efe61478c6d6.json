{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null,\n      // 게시글 데이터를 저장할 객체\n      isAdmin: false,\n      // 관리자인지 여부\n      comments: [],\n      // 댓글 목록\n      newCommentContent: '',\n      // 새로운 댓글 내용\n      isLoggedIn: false,\n      // 로그인 여부\n      isFreeBoard: false,\n      // 자유게시판 여부\n      showReportModal: false,\n      // 신고 모달 창 표시 여부\n      reportData: {},\n      // 신고 모달에 전달할 데이터\n      userId: localStorage.getItem('userId'),\n      // 로그인된 사용자의 ID\n      deleteDialog: false,\n      // 삭제 확인 다이얼로그 표시 여부\n      error: null // 에러 메시지\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail();\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n      this.$router.push({\n        name: routeName,\n        params: {\n          category\n        }\n      });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id: this.post.id,\n          category\n        }\n      });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        postId: comment.id,\n        postTitle: this.post.title,\n        postContent: comment.content,\n        authorEmail: comment.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","ReportCreate","components","data","post","isAdmin","comments","newCommentContent","isLoggedIn","isFreeBoard","showReportModal","reportData","userId","localStorage","getItem","deleteDialog","error","created","checkAdminRole","checkLoginStatus","checkIfFreeBoard","fetchPostDetail","fetchComments","methods","role","token","category","$route","params","postId","id","apiUrl","process","env","VUE_APP_API_BASE_URL","Error","response","get","result","console","alert","submitComment","trim","newComment","content","deleteComment","commentId","confirmed","confirm","delete","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goBack","routeName","$router","push","name","editPost","confirmDeletePost","deletePost","openPostReportModal","postTitle","title","postContent","authorEmail","nickname","postCategory","openCommentReportModal","comment","closeReportModal"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <v-container class=\"mt-5\">\n    <v-card v-if=\"post\">\n      <v-card-title>\n        <h3>{{ post.title }}</h3>\n        <v-spacer></v-spacer>\n        <v-btn v-if=\"isAdmin\" color=\"warning\" @click=\"editPost\">수정</v-btn>\n        <v-btn v-if=\"isAdmin\" color=\"error\" @click=\"confirmDeletePost\">삭제</v-btn>\n        <v-btn color=\"secondary\" @click=\"openPostReportModal\">신고하기</v-btn>\n      </v-card-title>\n\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\">\n            <p><strong>작성자:</strong> {{ post.nickname }}</p>\n            <p><strong>작성일:</strong> {{ formatDate(post.createdTime) }}</p>\n            <v-img v-if=\"post.imageUrl\" :src=\"post.imageUrl\" alt=\"Post Image\" max-width=\"400\" class=\"my-3\"/>\n            <p><strong>내용:</strong></p>\n            <p>{{ post.content }}</p>\n          </v-col>\n        </v-row>\n\n        <!-- 자유게시판일 때만 댓글 섹션을 표시 -->\n        <v-row v-if=\"isFreeBoard\">\n          <v-col cols=\"12\">\n            <v-divider class=\"my-3\"></v-divider>\n            <h4>댓글</h4>\n            <v-list>\n              <v-list-item v-for=\"comment in comments\" :key=\"comment.id\">\n                <v-list-item-content>\n                  <v-list-item-title>{{ comment.nickname }} ({{ formatDate(comment.createdTime) }})</v-list-item-title>\n                  <v-list-item-subtitle>{{ comment.content }}</v-list-item-subtitle>\n                </v-list-item-content>\n                <v-list-item-action v-if=\"isAdmin || comment.user_id === parseInt(userId, 10)\">\n                  <v-btn icon @click=\"deleteComment(comment.id)\">\n                    <v-icon>mdi-delete</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n                <v-list-item-action>\n                  <v-btn icon @click=\"openCommentReportModal(comment)\">\n                    <v-icon>mdi-alert-circle-outline</v-icon>\n                  </v-btn>\n                </v-list-item-action>\n              </v-list-item>\n            </v-list>\n\n            <v-form v-if=\"isLoggedIn\" @submit.prevent=\"submitComment\">\n              <v-textarea label=\"댓글 작성\" v-model=\"newCommentContent\" required />\n              <v-btn type=\"submit\" color=\"primary\">댓글 등록</v-btn>\n            </v-form>\n          </v-col>\n        </v-row>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-btn color=\"primary\" @click=\"goBack\">목록으로 돌아가기</v-btn>\n      </v-card-actions>\n    </v-card>\n\n    <v-alert type=\"error\" v-else-if=\"error\">{{ error }}</v-alert>\n    <v-progress-circular v-else indeterminate color=\"primary\"></v-progress-circular>\n\n    <!-- 게시글 삭제 확인 다이얼로그 -->\n    <v-dialog v-model=\"deleteDialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title class=\"headline\">게시글 삭제</v-card-title>\n        <v-card-text>게시글을 정말 삭제하시겠습니까?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"deleteDialog = false\">취소</v-btn>\n          <v-btn color=\"error\" text @click=\"deletePost\">삭제</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 신고 모달 창 -->\n    <ReportCreate \n      v-if=\"showReportModal\" \n      :postId=\"reportData.postId\" \n      :postTitle=\"reportData.postTitle\" \n      :postContent=\"reportData.postContent\" \n      :authorEmail=\"reportData.authorEmail\" \n      :postCategory=\"reportData.postCategory\" \n      @close=\"closeReportModal\" \n    />\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ReportCreate from '../report/ReportCreate.vue';\n\nexport default {\n  components: {\n    ReportCreate\n  },\n  data() {\n    return {\n      post: null, // 게시글 데이터를 저장할 객체\n      isAdmin: false, // 관리자인지 여부\n      comments: [], // 댓글 목록\n      newCommentContent: '', // 새로운 댓글 내용\n      isLoggedIn: false, // 로그인 여부\n      isFreeBoard: false, // 자유게시판 여부\n      showReportModal: false, // 신고 모달 창 표시 여부\n      reportData: {}, // 신고 모달에 전달할 데이터\n      userId: localStorage.getItem('userId'), // 로그인된 사용자의 ID\n      deleteDialog: false, // 삭제 확인 다이얼로그 표시 여부\n      error: null // 에러 메시지\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail();\n\n    if (this.isFreeBoard) {\n      this.fetchComments();\n    }\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      this.isAdmin = role === 'ADMIN';\n    },\n    checkLoginStatus() {\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post';\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id;\n        const category = this.$route.params.category;\n        let apiUrl;\n\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result;\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id;\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result;\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        if (!this.newCommentContent.trim()) {\n          alert('댓글 내용을 입력하세요.');\n          return;\n        }\n\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId\n        };\n\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = '';\n        this.fetchComments();\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments();\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    confirmDeletePost() {\n      this.deleteDialog = true;\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack();\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n    openPostReportModal() {\n      this.reportData = {\n        postId: this.post.id,\n        postTitle: this.post.title,\n        postContent: this.post.content,\n        authorEmail: this.post.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    openCommentReportModal(comment) {\n      this.reportData = {\n        postId: comment.id,\n        postTitle: this.post.title,\n        postContent: comment.content,\n        authorEmail: comment.nickname,\n        postCategory: this.$route.params.category\n      };\n      this.showReportModal = true;\n    },\n    closeReportModal() {\n      this.showReportModal = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.v-container {\n  max-width: 800px;\n  margin: 0 auto;\n}\n.my-3 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}