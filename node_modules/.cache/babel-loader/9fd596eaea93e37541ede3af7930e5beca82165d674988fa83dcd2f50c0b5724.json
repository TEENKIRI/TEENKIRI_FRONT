{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      notifications: [],\n      eventSource: null // SSE 연결을 저장할 변수\n    };\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n    if (this.isLogin) {\n      this.fetchNotifications();\n      this.setupSSE();\n    }\n  },\n  beforeDestroy() {\n    if (this.eventSource) {\n      this.eventSource.close(); // 컴포넌트가 파괴될 때 SSE 연결 종료\n    }\n  },\n  methods: {\n    fetchNotifications() {\n      const savedNotifications = localStorage.getItem('notifications');\n      if (savedNotifications) {\n        this.notifications = JSON.parse(savedNotifications);\n      } else {\n        axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        }).then(response => {\n          this.notifications = response.data;\n          localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 알림 목록 저장\n        }).catch(error => {\n          console.error('알림 가져오기 오류:', error);\n        });\n      }\n    },\n    setupSSE() {\n      const token = localStorage.getItem('token');\n      this.eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.eventSource.addEventListener('notification', event => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n        localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 새로운 알림 저장\n      });\n      this.eventSource.onerror = error => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    markAsRead(id) {\n      axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      }).then(() => {\n        const notification = this.notifications.find(n => n.id === id);\n        if (notification) {\n          notification.delYN = 'Y';\n          localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 읽음 처리 저장\n        }\n      }).catch(error => {\n        console.error('알림 상태 업데이트 오류:', error);\n      });\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({\n          name: 'SubjectList',\n          params: {\n            category: 'subject'\n          }\n        });\n      } else if (section === '이벤트') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'event'\n          }\n        });\n      } else if (section === '공지사항') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'notice'\n          }\n        });\n      } else if (section === '자유게시판') {\n        this.$router.push({\n          name: 'BoardList',\n          params: {\n            category: 'post'\n          }\n        });\n      } else if (section === 'QnA') {\n        this.$router.push({\n          name: 'QnaList',\n          params: {\n            category: 'qna'\n          }\n        });\n      } else {\n        console.log(section);\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      localStorage.removeItem('notifications'); // 로그아웃 시 알림 목록 제거\n      window.location.reload();\n    }\n  }\n};","map":{"version":3,"names":["axios","EventSourcePolyfill","name","data","logo","require","isLogin","notifications","eventSource","created","token","localStorage","getItem","fetchNotifications","setupSSE","beforeDestroy","close","methods","savedNotifications","JSON","parse","get","process","env","VUE_APP_API_BASE_URL","headers","Authorization","then","response","setItem","stringify","catch","error","console","addEventListener","event","notification","push","onerror","markAsRead","id","find","n","delYN","navigate","section","$router","params","category","log","goToMember","goToMenu","doLogout","removeItem","window","location","reload"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/HeaderComponent.vue"],"sourcesContent":["<template>\n  <v-app-bar app>\n    <v-container>\n      <v-row align=\"center\">\n        <v-col cols=\"3\">\n          <v-toolbar-title>\n            <router-link to=\"/\" class=\"logo\">\n              <img :src=\"logo\" alt=\"로고\" class=\"logo-image\" />\n            </router-link>\n          </v-toolbar-title>\n        </v-col>\n        <v-col cols=\"6\">\n          <v-row justify=\"center\">\n            <v-btn text @click=\"navigate('강좌')\">강좌</v-btn>\n            <v-btn text @click=\"navigate('추천')\">추천</v-btn>\n            <v-btn text @click=\"navigate('이벤트')\">이벤트</v-btn>\n            <v-btn text @click=\"navigate('공지사항')\">공지사항</v-btn>\n            <v-btn text @click=\"navigate('자유게시판')\">자유게시판</v-btn>\n            <v-btn text @click=\"navigate('QnA')\">질문게시판</v-btn>\n          </v-row>\n        </v-col>\n        <v-col cols=\"3\" class=\"text-right\">\n          <v-btn icon @click=\"goToMember\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n          <v-btn v-if=\"isLogin\" @click=\"doLogout\">로그아웃</v-btn>\n          <v-btn icon @click=\"goToMenu\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n\n          <!-- 알림 아이콘 및 알림 목록 -->\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ props }\">\n              <v-btn icon v-bind=\"props\">\n                <v-badge\n                  color=\"red\"\n                  :content=\"notifications.length\"\n                  overlap\n                  v-if=\"notifications.length > 0\"\n                >\n                  <v-icon>mdi-bell</v-icon>\n                </v-badge>\n                <v-icon v-else>mdi-bell</v-icon>\n              </v-btn>\n            </template>\n            <v-list>\n              <v-list-item\n                v-for=\"(notification, index) in notifications\"\n                :key=\"index\"\n                @click=\"markAsRead(notification.id)\"\n                :class=\"{ read: notification.delYN === 'Y' }\"\n              >\n                <v-list-item-content>\n                  <v-list-item-title>{{ notification.message }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-menu>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-app-bar>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { EventSourcePolyfill } from 'event-source-polyfill';\n\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      logo: require('@/assets/images/ico_logo.png'),\n      isLogin: false,\n      notifications: [],\n      eventSource: null, // SSE 연결을 저장할 변수\n    };\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    this.isLogin = !!token;\n\n    if (this.isLogin) {\n      this.fetchNotifications();\n      this.setupSSE();\n    }\n  },\n  beforeDestroy() {\n    if (this.eventSource) {\n      this.eventSource.close(); // 컴포넌트가 파괴될 때 SSE 연결 종료\n    }\n  },\n  methods: {\n    fetchNotifications() {\n      const savedNotifications = localStorage.getItem('notifications');\n      if (savedNotifications) {\n        this.notifications = JSON.parse(savedNotifications);\n      } else {\n        axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        })\n        .then(response => {\n          this.notifications = response.data;\n          localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 알림 목록 저장\n        })\n        .catch(error => {\n          console.error('알림 가져오기 오류:', error);\n        });\n      }\n    },\n    setupSSE() {\n      const token = localStorage.getItem('token');\n      this.eventSource = new EventSourcePolyfill(`${process.env.VUE_APP_API_BASE_URL}/subscribe`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      this.eventSource.addEventListener('notification', (event) => {\n        const notification = JSON.parse(event.data);\n        this.notifications.push(notification);\n        localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 새로운 알림 저장\n      });\n\n      this.eventSource.onerror = (error) => {\n        console.error('SSE 연결 오류:', error);\n      };\n    },\n    markAsRead(id) {\n      axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/notifications/update/${id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n      })\n      .then(() => {\n        const notification = this.notifications.find(n => n.id === id);\n        if (notification) {\n          notification.delYN = 'Y';\n          localStorage.setItem('notifications', JSON.stringify(this.notifications)); // 읽음 처리 저장\n        }\n      })\n      .catch(error => {\n        console.error('알림 상태 업데이트 오류:', error);\n      });\n    },\n    navigate(section) {\n      if (section === '강좌') {\n        this.$router.push({ name: 'SubjectList', params: { category: 'subject' } });\n      } else if (section === '이벤트') {\n        this.$router.push({ name: 'BoardList', params: { category: 'event' } });\n      } else if (section === '공지사항') {\n        this.$router.push({ name: 'BoardList', params: { category: 'notice' } });\n      } else if (section === '자유게시판') {\n        this.$router.push({ name: 'BoardList', params: { category: 'post' } });\n      } else if (section === 'QnA') {\n        this.$router.push({ name: 'QnaList', params: { category: 'qna' } });\n      } else {\n        console.log(section);\n      }\n    },\n    goToMember() {\n      if (this.isLogin) {\n        this.$router.push('/user/edit-info');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    goToMenu() {\n      console.log('Go to menu');\n    },\n    doLogout() {\n      localStorage.removeItem('role');\n      localStorage.removeItem('token');\n      this.isLogin = false;\n      localStorage.removeItem('notifications'); // 로그아웃 시 알림 목록 제거\n      window.location.reload();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.logo {\n  font-weight: bold;\n  color: inherit;\n  text-decoration: none;\n}\n\n.logo-image {\n  height: 10%;\n}\n\n.read {\n  background-color: #f0f0f0; /* 읽은 알림의 배경색 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}