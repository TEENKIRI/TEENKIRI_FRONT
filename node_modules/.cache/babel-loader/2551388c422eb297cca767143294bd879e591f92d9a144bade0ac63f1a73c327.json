{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      post: {},\n      // 게시글 데이터를 저장할 객체\n      isAdmin: false,\n      // 관리자인지 여부\n      comments: [],\n      // 댓글 목록\n      newCommentContent: '',\n      // 새로운 댓글 내용\n      isLoggedIn: false,\n      // 로그인 여부\n      nickname: '',\n      // 현재 사용자 닉네임\n      isFreeBoard: false // 자유게시판 여부\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail(); // 컴포넌트가 생성될 때 게시글 상세 정보를 가져옴\n\n    if (this.isFreeBoard) {\n      this.fetchComments(); // 자유게시판일 때만 댓글 목록 가져오기\n    }\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    checkLoginStatus() {\n      // 로그인 상태와 현재 사용자 이메일을 확인하는 로직\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n      this.userEmail = localStorage.getItem('email'); // 로그인된 사용자의 이메일\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post'; // 'post'를 자유게시판 카테고리로 간주\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const category = this.$route.params.category;\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result; // 서버에서 받아온 데이터를 post 객체에 저장\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result; // 서버에서 받아온 댓글 목록을 comments 배열에 저장\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n      try {\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId'); // 로컬 스토리지에서 userId를 가져옵니다.\n        const newComment = {\n          content: this.newCommentContent,\n          postId: postId,\n          userId: userId // userId를 포함시킵니다.\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = ''; // 입력 필드 초기화\n        this.fetchComments(); // 댓글 목록 새로고침\n      } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments(); // 댓글 목록 새로고침\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n      this.$router.push({\n        name: routeName,\n        params: {\n          category\n        }\n      });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({\n        name: 'BoardUpdate',\n        params: {\n          id: this.post.id,\n          category\n        }\n      });\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack(); // 삭제 후 목록으로 돌아가기\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","post","isAdmin","comments","newCommentContent","isLoggedIn","nickname","isFreeBoard","created","checkAdminRole","checkLoginStatus","checkIfFreeBoard","fetchPostDetail","fetchComments","methods","role","localStorage","getItem","token","userEmail","category","$route","params","postId","id","apiUrl","process","env","VUE_APP_API_BASE_URL","Error","response","get","result","error","console","alert","submitComment","userId","newComment","content","deleteComment","commentId","confirmed","confirm","delete","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","goBack","routeName","$router","push","name","editPost","deletePost"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/board/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"board-detail-container\">\n    <h1 class=\"board-detail-title\">{{ post.title }}</h1>\n    <div class=\"board-detail-info\">\n      <span>작성자: {{ post.nickname }}</span>\n      <span>작성일: {{ formatDate(post.createdTime) }}</span>\n    </div>\n    <div v-if=\"post.imageUrl\" class=\"board-detail-image\">\n      <img :src=\"post.imageUrl\" alt=\"Post Image\" v-if=\"post.imageUrl\" />\n    </div>\n    <div class=\"board-detail-content\">\n      <p>{{ post.content }}</p>\n    </div>\n    <div class=\"board-detail-actions\">\n      <button @click=\"goBack\">목록으로 돌아가기</button>\n      <button v-if=\"isAdmin\" @click=\"editPost\">수정</button>\n      <button v-if=\"isAdmin\" @click=\"deletePost\">삭제</button>\n    </div>\n    \n    <!-- 자유게시판일 때만 댓글 섹션을 표시 -->\n    <div v-if=\"isFreeBoard\" class=\"comments-section\">\n      <h2>댓글</h2>\n      <ul>\n        <li v-for=\"comment in comments\" :key=\"comment.id\">\n          <p><strong>{{ comment.nickname }}</strong>: {{ comment.content }}</p>\n          <small>{{ formatDate(comment.createdTime) }}</small>\n          <button v-if=\"isAdmin\" @click=\"deleteComment(comment.id)\">삭제</button> <!-- 관리자만 삭제 가능 -->\n        </li>\n      </ul>\n\n      <div v-if=\"isLoggedIn\">\n        <textarea v-model=\"newCommentContent\" placeholder=\"댓글을 작성하세요\"></textarea>\n        <button @click=\"submitComment\">댓글 작성</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      post: {}, // 게시글 데이터를 저장할 객체\n      isAdmin: false, // 관리자인지 여부\n      comments: [], // 댓글 목록\n      newCommentContent: '', // 새로운 댓글 내용\n      isLoggedIn: false, // 로그인 여부\n      nickname: '', // 현재 사용자 닉네임\n      isFreeBoard: false, // 자유게시판 여부\n    };\n  },\n  created() {\n    this.checkAdminRole();\n    this.checkLoginStatus();\n    this.checkIfFreeBoard();\n    this.fetchPostDetail(); // 컴포넌트가 생성될 때 게시글 상세 정보를 가져옴\n\n    if (this.isFreeBoard) {\n      this.fetchComments(); // 자유게시판일 때만 댓글 목록 가져오기\n    }\n  },\n  methods: {\n    checkAdminRole() {\n      const role = localStorage.getItem('role');\n      if (role === 'ADMIN') {\n        this.isAdmin = true;\n      }\n    },\n    checkLoginStatus() {\n      // 로그인 상태와 현재 사용자 이메일을 확인하는 로직\n      const token = localStorage.getItem('token');\n      this.isLoggedIn = !!token;\n      this.userEmail = localStorage.getItem('email'); // 로그인된 사용자의 이메일\n    },\n    checkIfFreeBoard() {\n      const category = this.$route.params.category;\n      this.isFreeBoard = category === 'post'; // 'post'를 자유게시판 카테고리로 간주\n    },\n    async fetchPostDetail() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const category = this.$route.params.category;\n\n        let apiUrl;\n        if (category === 'event') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/detail/${postId}`;\n        } else if (category === 'notice') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/detail/${postId}`;\n        } else if (category === 'post') {\n          apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/detail/${postId}`;\n        } else {\n          throw new Error('잘못된 카테고리입니다.');\n        }\n\n        const response = await axios.get(apiUrl);\n        this.post = response.data.result; // 서버에서 받아온 데이터를 post 객체에 저장\n      } catch (error) {\n        console.error('게시글을 불러오는 데 실패했습니다:', error);\n        alert('게시글을 불러오는 데 실패했습니다.');\n      }\n    },\n    async fetchComments() {\n      try {\n        const postId = this.$route.params.id; // URL에서 게시글 ID를 가져옴\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/comment/post/${postId}`);\n        this.comments = response.data.result; // 서버에서 받아온 댓글 목록을 comments 배열에 저장\n      } catch (error) {\n        console.error('댓글을 불러오는 데 실패했습니다:', error);\n      }\n    },\n    async submitComment() {\n    try {\n        const postId = this.$route.params.id;\n        const userId = localStorage.getItem('userId');  // 로컬 스토리지에서 userId를 가져옵니다.\n        const newComment = {\n            content: this.newCommentContent,\n            postId: postId,\n            userId: userId  // userId를 포함시킵니다.\n        };\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/comment/create`, newComment);\n        this.newCommentContent = ''; // 입력 필드 초기화\n        this.fetchComments(); // 댓글 목록 새로고침\n    } catch (error) {\n        console.error('댓글 작성에 실패했습니다:', error);\n        alert('댓글 작성에 실패했습니다.');\n    }\n},\n    async deleteComment(commentId) {\n      try {\n        const confirmed = confirm(\"이 댓글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          await axios.delete(`${process.env.VUE_APP_API_BASE_URL}/comment/delete/${commentId}`);\n          this.fetchComments(); // 댓글 목록 새로고침\n        }\n      } catch (error) {\n        console.error('댓글 삭제에 실패했습니다:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    goBack() {\n      const category = this.$route.params.category;\n      let routeName = 'BoardList';\n\n      this.$router.push({ name: routeName, params: { category } });\n    },\n    editPost() {\n      const category = this.$route.params.category;\n      this.$router.push({ name: 'BoardUpdate', params: { id: this.post.id, category } });\n    },\n    async deletePost() {\n      try {\n        const confirmed = confirm(\"이 게시글을 삭제하시겠습니까?\");\n        if (confirmed) {\n          const category = this.$route.params.category;\n\n          let apiUrl;\n          if (category === 'event') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/event/delete/${this.post.id}`;\n          } else if (category === 'notice') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/notice/delete/${this.post.id}`;\n          } else if (category === 'post') {\n            apiUrl = `${process.env.VUE_APP_API_BASE_URL}/board/post/delete/${this.post.id}`;\n          } else {\n            throw new Error('잘못된 카테고리입니다.');\n          }\n\n          await axios.get(apiUrl);\n          alert('게시글이 삭제되었습니다.');\n          this.goBack(); // 삭제 후 목록으로 돌아가기\n        }\n      } catch (error) {\n        console.error('게시글을 삭제하는 데 실패했습니다:', error);\n        alert('게시글 삭제에 실패했습니다.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.board-detail-container {\n  width: 80%;\n  margin: 0 auto;\n}\n\n.board-detail-title {\n  font-size: 32px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.board-detail-info {\n  font-size: 14px;\n  color: #777;\n  margin-bottom: 20px;\n}\n\n.board-detail-image {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.board-detail-image img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 8px;\n}\n\n.board-detail-content {\n  font-size: 18px;\n  line-height: 1.6;\n  margin-bottom: 40px;\n}\n\n.board-detail-actions {\n  text-align: right;\n}\n\n.board-detail-actions button {\n  padding: 10px 20px;\n  margin-left: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.board-detail-actions button:hover {\n  background-color: #0056b3;\n}\n\n.comments-section {\n  margin-top: 40px;\n}\n\n.comments-section h2 {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n.comments-section ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.comments-section li {\n  margin-bottom: 20px;\n}\n\n.comments-section textarea {\n  width: 100%;\n  height: 100px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.comments-section button {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.comments-section button:hover {\n  background-color: #218838;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}