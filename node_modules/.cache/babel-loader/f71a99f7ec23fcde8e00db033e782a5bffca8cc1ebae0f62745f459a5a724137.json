{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SubjectDetailComponent from \"@/components/subject/SubjectDetailComponent.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    SubjectDetailComponent\n  },\n  provide() {\n    return {\n      getSubjectData: () => this.subjectData // subjectData를 함수로 제공\n    };\n  },\n  data() {\n    return {\n      user: {},\n      subjectData: null,\n      // 초기 상태는 null\n\n      subjectId: \"\",\n      selectedMenu: \"SubjectDetail\",\n      // 기본으로 선택된 메뉴\n      lecture: {\n        lectureList: [],\n        page: {\n          pageSize: 5,\n          currentPage: 0\n        }\n      }\n    };\n  },\n  async created() {\n    this.subjectId = this.$route.params.id;\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n    this.getSubjectPerLectureList();\n  },\n  watch: {\n    subjectData: {\n      deep: true,\n      handler(newVal) {\n        console.log(\"Subject Data Updated:\", newVal);\n      }\n    }\n  },\n  methods: {\n    async getSubjectPerLectureList() {\n      const params = {\n        size: this.lecture.page.pageSize,\n        page: this.lecture.page.currentPage\n      };\n      const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/subject/${this.subjectId}/lecture/list`, {\n        params\n      });\n      const addtionalData = response.data.result.content;\n      console.log(response);\n      this.lecture.lectureList = [...this.lecture.lectureList, ...addtionalData];\n    },\n    setLectureCreateBtn() {\n      console.log(this.user);\n      console.log(this.user.userId, this.subjectData.userTeacherId);\n      if (Number(this.user.userId) === this.subjectData.userTeacherId || this.user.role == \"ADMIN\") {\n        console.log(\"수정 가능!!\");\n        this.user.isAdmin = true;\n      } else {\n        console.log(\"수정 불가!\");\n      }\n    },\n    handleSubjectDataLoaded(data) {\n      this.subjectData = data;\n      // 여기에 추가 작업을 작성하면 됩니다.\n      if (this.subjectData && this.user.userId) {\n        this.setLectureCreateBtn();\n      }\n    },\n    handleMenuUpdate(newSelection) {\n      this.selectedMenu = newSelection;\n      console.log(\"메뉴 바뀜 >> \", newSelection);\n    },\n    goToDetail(lectureId) {\n      console.log(\"강의페이지로 이동~\", lectureId);\n      this.$router.push({\n        name: \"LectureDetail\",\n        params: {\n          id: lectureId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["SubjectDetailComponent","axios","components","provide","getSubjectData","subjectData","data","user","subjectId","selectedMenu","lecture","lectureList","page","pageSize","currentPage","created","$route","params","id","$store","dispatch","getters","getUserObj","error","console","getSubjectPerLectureList","watch","deep","handler","newVal","log","methods","size","response","get","process","env","VUE_APP_API_BASE_URL","addtionalData","result","content","setLectureCreateBtn","userId","userTeacherId","Number","role","isAdmin","handleSubjectDataLoaded","handleMenuUpdate","newSelection","goToDetail","lectureId","$router","push","name"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/views/subject/SubjectDetail.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- subjectData가 로드된 후에만 컴포넌트를 렌더링 -->\n      <SubjectDetailComponent @subject-data-loaded=\"handleSubjectDataLoaded\" v-model=\"selectedMenu\" />\n      <!-- <SubjectDetailComponent  /> -->\n\n      <v-row v-if=\"this.user.isAdmin\">\n        <v-col>\n        <router-link to=\"/lecture/create\">\n          <v-btn>강의 업로드하기</v-btn>\n        </router-link>\n        </v-col>\n      </v-row>\n\n      <v-row>\n        <v-col>\n          <v-table>\n            <thead>\n              <tr>\n                <th>번호</th>\n                <th>제목</th>\n                <th>수강여부</th>\n                <th>강의시간</th>\n                <th>이동</th>\n                <th v-if=\"this.user.isAdmin\">관리</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"item in lecture.lectureList\" :key=\"item.id\">\n                <td>{{ item.id }}</td>\n                <td>{{ item.title }}</td>\n                <td>{{ item.progress }}</td>\n                <td>{{ item.videoDuration }}</td>\n                <td>\n                  <v-btn v-if=\"user.userId\" \n                    @click=\"goToDetail(item.id)\">강의보기\n                  </v-btn>\n                </td>\n                <td v-if=\"this.user.isAdmin\">\n                  <v-btn  \n                    :to=\"`/lecture/create/${item.id}`\">수정\n                  </v-btn>\n                </td>\n              </tr>\n            </tbody>\n          </v-table>\n        </v-col>\n      </v-row>\n\n      <!-- 강의 목록에 해당하는 내용 -->\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport SubjectDetailComponent from \"@/components/subject/SubjectDetailComponent.vue\";\nimport axios from \"axios\";\n\nexport default {\n  components: {\n    SubjectDetailComponent,\n  },\n  provide() {\n    return {\n      getSubjectData: () => this.subjectData, // subjectData를 함수로 제공\n    };\n  },\n  data() {\n    return {\n      user: {},\n\n      subjectData: null, // 초기 상태는 null\n\n      subjectId: \"\",\n      selectedMenu: \"SubjectDetail\", // 기본으로 선택된 메뉴\n      lecture: {\n        lectureList: [],\n        page: {\n          pageSize: 5,\n          currentPage: 0,\n        },\n      },\n    };\n  },\n  async created() {\n    this.subjectId = this.$route.params.id;\n    try {\n      await this.$store.dispatch(\"setUserAllInfoActions\");\n      this.user = this.$store.getters.getUserObj;\n    } catch (error) {\n      console.error(\"An error occurred while fetching user info:\", error);\n    }\n\n    this.getSubjectPerLectureList();\n  },\n  watch: {\n    subjectData: {\n      deep: true,\n      handler(newVal) {\n        console.log(\"Subject Data Updated:\", newVal);\n      },\n    },\n  },\n  methods: {\n    async getSubjectPerLectureList() {\n      const params = {\n        size: this.lecture.page.pageSize,\n        page: this.lecture.page.currentPage,\n      };\n\n      const response = await axios.get(\n        `${process.env.VUE_APP_API_BASE_URL}/subject/${this.subjectId}/lecture/list`,\n        { params }\n      );\n      const addtionalData = response.data.result.content;\n      console.log(response);\n      this.lecture.lectureList = [...this.lecture.lectureList, ...addtionalData];\n      \n    },\n    setLectureCreateBtn() {\n      console.log(this.user);\n      console.log(this.user.userId, this.subjectData.userTeacherId)\n      if(Number(this.user.userId) === this.subjectData.userTeacherId || this.user.role == \"ADMIN\"){\n        console.log(\"수정 가능!!\")\n        this.user.isAdmin = true;\n      }else{\n        console.log(\"수정 불가!\")\n      }\n    },\n    handleSubjectDataLoaded(data) {\n      this.subjectData = data;\n      // 여기에 추가 작업을 작성하면 됩니다.\n      if(this.subjectData && this.user.userId){\n        this.setLectureCreateBtn();\n      }\n    },\n    handleMenuUpdate(newSelection) {\n      this.selectedMenu = newSelection;\n      console.log(\"메뉴 바뀜 >> \", newSelection);\n    },\n    goToDetail(lectureId) {\n      console.log(\"강의페이지로 이동~\", lectureId);\n      this.$router.push({ name: \"LectureDetail\", params: { id: lectureId } });\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}