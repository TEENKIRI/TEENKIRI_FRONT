{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'),\n      loginTime: new Date().toISOString().slice(0, 19) // ISO 형식으로 변환\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: {\n            since: this.loginTime\n          }\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', tick => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId\n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatDate(datetime) {\n      const date = new Date(datetime);\n      return `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일 ${date.getHours()}:${date.getMinutes()}`;\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["axios","SockJS","Stomp","data","messages","newMessage","stompClient","userId","localStorage","getItem","loginTime","Date","toISOString","slice","mounted","loadChatHistory","connectWebSocket","methods","response","get","process","env","VUE_APP_API_BASE_URL","params","since","error","console","socket","over","connect","frame","log","subscribe","tick","message","JSON","parse","body","push","sendMessage","connected","content","senderId","send","stringify","isMyMessage","formatDate","datetime","date","getFullYear","getMonth","getDate","getHours","getMinutes","beforeUnmount","disconnect"],"sources":["/Users/milcho/Project/TEENKIRI/teenkiri_front/teenkiri_front/src/components/ChatComponent.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-list>\n        <v-list-item\n          v-for=\"message in messages\"\n          :key=\"message.id\"\n          :class=\"{'my-message': isMyMessage(message.senderId), 'other-message': !isMyMessage(message.senderId)}\"\n        >\n          <v-list-item-content>\n            <v-list-item-title>{{ message.senderNickname }}</v-list-item-title>\n            <v-list-item-subtitle>{{ formatDate(message.createdTime) }}</v-list-item-subtitle>\n            <v-list-item-subtitle>{{ message.content }}</v-list-item-subtitle>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n  \n      <v-text-field\n        v-model=\"newMessage\"\n        label=\"메시지를 입력하세요...\"\n        @keyup.enter=\"sendMessage\"\n      ></v-text-field>\n    </v-container>\n  </template>\n  \n<script>\nimport axios from 'axios';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      stompClient: null,\n      userId: localStorage.getItem('userId'), \n      loginTime: new Date().toISOString().slice(0, 19), // ISO 형식으로 변환\n    };\n  },\n  mounted() {\n    this.loadChatHistory();\n    this.connectWebSocket();\n  },\n  methods: {\n    async loadChatHistory() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/chat/messages`, {\n          params: { since: this.loginTime },\n        });\n        this.messages = response.data;\n      } catch (error) {\n        console.error('채팅 기록을 불러오는 중 오류 발생:', error);\n      }\n    },\n    connectWebSocket() {\n      const socket = new SockJS(`${process.env.VUE_APP_API_BASE_URL}/ws`);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, (frame) => {\n        console.log('Connected: ' + frame);\n        this.stompClient.subscribe('/topic/public', (tick) => {\n          const message = JSON.parse(tick.body);\n          this.messages.push(message);\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.userId) {\n        console.error('User ID is not available in localStorage');\n        return;\n      }\n\n      if (this.stompClient && this.stompClient.connected) {\n        const message = {\n          content: this.newMessage,\n          senderId: this.userId, \n        };\n        this.stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n        this.newMessage = '';\n      }\n    },\n    isMyMessage(senderId) {\n      return senderId == this.userId;\n    },\n    formatDate(datetime) {\n      const date = new Date(datetime);\n      return `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일 ${date.getHours()}:${date.getMinutes()}`;\n    }\n  },\n  beforeUnmount() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  },\n};\n</script>\n  \n<style scoped>\n.v-list-item {\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 10px;\n  max-width: 60%;\n  font-size: 1.2rem; \n}\n\n.my-message {\n  background-color: #2196f3; \n  color: white;\n  margin-left: auto;\n  text-align: right;\n}\n\n.other-message {\n  background-color: #f44336;\n  color: white;\n  margin-right: auto;\n  text-align: left;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}